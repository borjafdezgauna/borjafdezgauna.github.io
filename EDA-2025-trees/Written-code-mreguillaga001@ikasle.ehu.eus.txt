BinaryTreeNode.cs (15) : Key = key;
BinaryTreeNode.cs (16) : Value = value;
List.cs (5) : using Lists;
List.cs (6) : using System.Collections;
List.cs (7) : using System.Collections.Concurrent;
List.cs (8) : using System.Diagnostics.Contracts;
List.cs (9) : using System.Runtime.InteropServices;
List.cs (11) : public class ListNode<T>
List.cs (12) : {
List.cs (13) : public T Value;
List.cs (14) : public ListNode<T> Next = null;
List.cs (15) : public ListNode<T> Previus = null;
List.cs (19) : public ListNode(T value)
List.cs (20) : {
List.cs (21) : Value = value;
List.cs (22) : }
List.cs (24) : public override string ToString()
List.cs (25) : {
List.cs (26) : return Value.ToString();
List.cs (27) : }
List.cs (28) : }
List.cs (30) : public class List<T> : IList<T>
List.cs (31) : {
List.cs (32) : ListNode<T> First = null;
List.cs (33) : ListNode<T> Last = null;
List.cs (34) : int m_numItems = 0;
List.cs (36) : public override string ToString()
List.cs (37) : {
List.cs (38) : ListNode<T> node = First;
List.cs (39) : string output = "[";
List.cs (41) : while (node != null)
List.cs (42) : {
List.cs (43) : output += node.ToString() + ",";
List.cs (44) : node = node.Next;
List.cs (45) : }
List.cs (46) : output = output.TrimEnd(',') + "] " + Count() + " elements";
List.cs (48) : return output;
List.cs (49) : }
List.cs (51) : public int Count()
List.cs (52) : {
List.cs (53) : //TODO #1: return the number of elements on the list
List.cs (55) : return m_numItems;
List.cs (56) : }
List.cs (58) : public T Get(int index)
List.cs (59) : {
List.cs (60) : //TODO #2: return the element on the index-th position. O if the position is out of bounds
List.cs (62) : if (index < 0 || index >= m_numItems)
List.cs (63) : {
List.cs (64) : return default(T);
List.cs (65) : }
List.cs (67) : ListNode<T> current = First;
List.cs (68) : int count = 0;
List.cs (70) : while (current != null)
List.cs (71) : {
List.cs (72) : if (count == index)
List.cs (73) : {
List.cs (74) : return current.Value;
List.cs (75) : }
List.cs (76) : current = current.Next;
List.cs (77) : count++;
List.cs (78) : }
List.cs (80) : return default(T);
List.cs (81) : }
List.cs (83) : public void Add(T value)
List.cs (84) : {
List.cs (85) : //TODO #3: add a new integer to the end of the list
List.cs (87) : ListNode<T> newNode = new ListNode<T>(value);
List.cs (89) : if (First == null)
List.cs (90) : {
List.cs (91) : First = newNode;
List.cs (92) : Last = newNode;
List.cs (93) : }
List.cs (94) : else
List.cs (95) : {
List.cs (96) : Last.Next = newNode;
List.cs (97) : newNode.Previus = Last;
List.cs (98) : Last = newNode;
List.cs (99) : }
List.cs (101) : m_numItems++;
List.cs (102) : }
List.cs (104) : public T Remove(int index)
List.cs (105) : {
List.cs (106) : //TODO #4: remove the element on the index-th position. Do nothing if position is out of bounds
List.cs (108) : if (index < 0 || index >= m_numItems)
List.cs (109) : {
List.cs (110) : return default(T);
List.cs (111) : }
List.cs (113) : ListNode<T> current;
List.cs (114) : int count;
List.cs (116) : if (index < m_numItems / 2)
List.cs (117) : {
List.cs (118) : current = First;
List.cs (119) : count = 0;
List.cs (120) : while (count < index)
List.cs (121) : {
List.cs (122) : current = current.Next;
List.cs (123) : count++;
List.cs (124) : }
List.cs (125) : }
List.cs (126) : else
List.cs (127) : {
List.cs (128) : current = Last;
List.cs (129) : count = m_numItems - 1;
List.cs (130) : while (count > index)
List.cs (131) : {
List.cs (132) : current = current.Previus;
List.cs (133) : count--;
List.cs (134) : }
List.cs (135) : }
List.cs (137) : T value = current.Value;
List.cs (139) : if (current.Previus != null)
List.cs (140) : {
List.cs (141) : current.Previus.Next = current.Next;
List.cs (142) : }
List.cs (143) : else
List.cs (144) : {
List.cs (145) : First = current.Next;
List.cs (146) : }
List.cs (148) : if (current.Next != null)
List.cs (149) : {
List.cs (150) : current.Next.Previus = current.Previus;
List.cs (151) : }
List.cs (152) : else
List.cs (153) : {
List.cs (154) : Last = current.Previus;
List.cs (155) : }
List.cs (157) : m_numItems--;
List.cs (158) : return value;
List.cs (159) : }
List.cs (161) : public void Clear()
List.cs (162) : {
List.cs (163) : //TODO #5: remove all the elements on the list
List.cs (165) : First = null;
List.cs (166) : Last = null;
List.cs (167) : m_numItems = 0;
List.cs (168) : }
List.cs (170) : public IEnumerator GetEnumerator()
List.cs (171) : {
List.cs (172) : //TODO #6 : Return an enumerator using "yield return" for each of the values in this list
List.cs (173) : ListNode<T> current = First;
List.cs (175) : while(current != null)
List.cs (176) : {
List.cs (177) : yield return current.Value;
List.cs (178) : current = current.Next;
List.cs (179) : }
List.cs (180) : }
List.cs (181) : }
TreeNode.cs (3) : using System.Collections.Generic;
TreeNode.cs (4) : using System.ComponentModel;
TreeNode.cs (13) : private Lists.List<TreeNode<T>> Children = new Lists.List<TreeNode<T>>();
TreeNode.cs (18) : Value = value;
TreeNode.cs (25) : string output = null;
TreeNode.cs (26) : string leftSpace = null;
TreeNode.cs (27) : for (int i = 0; i < depth; i++) leftSpace += " ";
TreeNode.cs (28) : if (leftSpace != null) leftSpace += "->";
TreeNode.cs (30) : output += $"{leftSpace}[{Value}]\n";
TreeNode.cs (32) : for (int childIndex = 0; childIndex < Children.Count(); childIndex++)
TreeNode.cs (33) : {
TreeNode.cs (34) : TreeNode<T> child = Children.Get(childIndex);
TreeNode.cs (35) : output += child.ToString(depth + 1, childIndex);
TreeNode.cs (36) : }
TreeNode.cs (37) : return output;
TreeNode.cs (43) : TreeNode<T> newNode = new TreeNode<T>(value);
TreeNode.cs (44) : Children.Add(newNode);
TreeNode.cs (46) : return newNode;
TreeNode.cs (52) : int numElements = 1;
TreeNode.cs (54) : for(int i = 0; i < Children.Count(); i++)
TreeNode.cs (55) : {
TreeNode.cs (56) : TreeNode<T> child = Children.Get(i);
TreeNode.cs (57) : numElements += child.Count();
TreeNode.cs (58) : }
TreeNode.cs (60) : return numElements;
TreeNode.cs (66) : if(Children.Count() == 0)
TreeNode.cs (67) : {
TreeNode.cs (68) : return -1;
TreeNode.cs (69) : }
TreeNode.cs (71) : int maxChildHeight = 0;
TreeNode.cs (72) : for(int i = 0; i < Children.Count(); i++)
TreeNode.cs (73) : {
TreeNode.cs (74) : TreeNode<T> child = Children.Get(i);
TreeNode.cs (75) : int chilHeight = child.Height();
TreeNode.cs (77) : if(chilHeight > maxChildHeight)
TreeNode.cs (78) : {
TreeNode.cs (79) : maxChildHeight = chilHeight;
TreeNode.cs (80) : }
TreeNode.cs (81) : }
TreeNode.cs (83) : return maxChildHeight + 1;
TreeNode.cs (93) : for (int i = 0; i < Children.Count(); i++)
TreeNode.cs (94) : {
TreeNode.cs (95) : TreeNode<T> child = Children.Get(i);
TreeNode.cs (96) : if (child.Value.ToString() == value.ToString())
TreeNode.cs (97) : {
TreeNode.cs (98) : Children.Remove(i);
TreeNode.cs (99) : return;
TreeNode.cs (100) : }
TreeNode.cs (103) : for (int i = 0; i < Children.Count(); i++)
TreeNode.cs (104) : {
TreeNode.cs (105) : TreeNode<T> child = Children.Get(i);
TreeNode.cs (106) : child.Remove(value);
TreeNode.cs (107) : }
TreeNode.cs (108) : }
TreeNode.cs (114) : if (Value.ToString() == value.ToString())
TreeNode.cs (115) : {
TreeNode.cs (116) : return this;
TreeNode.cs (117) : }
TreeNode.cs (119) : for (int i = 0; i < Children.Count(); i++)
TreeNode.cs (120) : {
TreeNode.cs (121) : TreeNode<T> child = Children.Get(i);
TreeNode.cs (122) : TreeNode<T> result = child.Find(value);
TreeNode.cs (124) : if(result != null)
TreeNode.cs (125) : {
TreeNode.cs (126) : return result;
TreeNode.cs (127) : }
TreeNode.cs (128) : }
TreeNode.cs (137) : for (int i = 0; i < Children.Count(); i++)
TreeNode.cs (138) : {
TreeNode.cs (139) : if (Children.Get(i) == node)
TreeNode.cs (140) : {
TreeNode.cs (141) : Children.Remove(i);
TreeNode.cs (142) : return;
TreeNode.cs (143) : }
TreeNode.cs (144) : }
TreeNode.cs (146) : for(int i = 0; i < Children.Count(); i++)
TreeNode.cs (147) : {
TreeNode.cs (148) : Children.Get(i).Remove(node);
TreeNode.cs (149) : }
