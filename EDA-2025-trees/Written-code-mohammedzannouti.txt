BinaryTreeNode.cs (3) : using System.Xml;
BinaryTreeNode.cs (43) : //          -If the current node (this) has a higher key than the new node (use CompareTo()), the new node should be on this node's left.
BinaryTreeNode.cs (49) : if (this.Key.CompareTo(node.Key) == 1)
BinaryTreeNode.cs (50) : {
BinaryTreeNode.cs (51) : if (LeftChild == null)
BinaryTreeNode.cs (52) : {
BinaryTreeNode.cs (53) : node = this.LeftChild;
BinaryTreeNode.cs (54) : }
BinaryTreeNode.cs (55) : else
BinaryTreeNode.cs (56) : {
BinaryTreeNode.cs (57) : LeftChild.Add(node);
BinaryTreeNode.cs (58) : }
BinaryTreeNode.cs (59) : }
BinaryTreeNode.cs (60) : if (this.Key.CompareTo(node.Key) == -1)
BinaryTreeNode.cs (61) : {
BinaryTreeNode.cs (62) : if (RightChild == null)
BinaryTreeNode.cs (63) : {
BinaryTreeNode.cs (64) : node = this.RightChild;
BinaryTreeNode.cs (65) : }
BinaryTreeNode.cs (66) : else
BinaryTreeNode.cs (67) : {
BinaryTreeNode.cs (68) : RightChild.Add(node);
BinaryTreeNode.cs (69) : }
BinaryTreeNode.cs (70) : }
BinaryTreeNode.cs (71) : if (this.Key.CompareTo(node.Key) == 0)
BinaryTreeNode.cs (72) : {
BinaryTreeNode.cs (73) : this.Value = node.Value;
BinaryTreeNode.cs (74) : }
BinaryTreeNode.cs (85) : int elementsRight = 0;
BinaryTreeNode.cs (86) : int elementsLeft = 0;
BinaryTreeNode.cs (87) : elementsLeft = LeftChild.Count();
BinaryTreeNode.cs (88) : elementsRight = RightChild.Count();
BinaryTreeNode.cs (90) : return elementsLeft + elementsRight;
BinaryTreeNode.cs (97) : {
BinaryTreeNode.cs (98) : int leftHeight = 0;
BinaryTreeNode.cs (99) : int rightHeight = 0;
BinaryTreeNode.cs (101) : if (LeftChild != null)
BinaryTreeNode.cs (102) : leftHeight = LeftChild.Height();
BinaryTreeNode.cs (104) : if (RightChild != null)
BinaryTreeNode.cs (105) : rightHeight = RightChild.Height();
BinaryTreeNode.cs (107) : int MasAlto = 0;
BinaryTreeNode.cs (108) : if (leftHeight < rightHeight) MasAlto = rightHeight;
BinaryTreeNode.cs (109) : else MasAlto = leftHeight;
BinaryTreeNode.cs (111) : return 1 + MasAlto;
BinaryTreeNode.cs (112) : }
BinaryTreeNode.cs (125) : if (this.Key.CompareTo(key) == 1)
BinaryTreeNode.cs (126) : {
BinaryTreeNode.cs (127) : if (LeftChild == null)
BinaryTreeNode.cs (128) : {
BinaryTreeNode.cs (129) : return default;
BinaryTreeNode.cs (130) : }
BinaryTreeNode.cs (131) : else
BinaryTreeNode.cs (132) : {
BinaryTreeNode.cs (133) : LeftChild.Get(key);
BinaryTreeNode.cs (134) : }
BinaryTreeNode.cs (135) : }
BinaryTreeNode.cs (136) : if (this.Key.CompareTo(key) == -1)
BinaryTreeNode.cs (137) : {
BinaryTreeNode.cs (138) : if (RightChild == null)
BinaryTreeNode.cs (139) : {
BinaryTreeNode.cs (140) : return default;
BinaryTreeNode.cs (141) : }
BinaryTreeNode.cs (142) : else
BinaryTreeNode.cs (143) : {
BinaryTreeNode.cs (144) : RightChild.Get(key);
BinaryTreeNode.cs (145) : }
BinaryTreeNode.cs (146) : }
BinaryTreeNode.cs (147) : if (this.Key.CompareTo(key) == 0)
BinaryTreeNode.cs (148) : {
BinaryTreeNode.cs (149) : return this.Value;
BinaryTreeNode.cs (150) : }
TreeNode.cs (97) : Children.Remove(i);
TreeNode.cs (137) : Children.Remove(i);
