BinaryTreeNode.cs (80) : int countDerecha = 0;
BinaryTreeNode.cs (81) : int countIzquierda = 0;
BinaryTreeNode.cs (82) : if (LeftChild != null)
BinaryTreeNode.cs (83) : {
BinaryTreeNode.cs (84) : countIzquierda = LeftChild.Count();
BinaryTreeNode.cs (85) : }
BinaryTreeNode.cs (86) : if (RightChild!= null)
BinaryTreeNode.cs (87) : {
BinaryTreeNode.cs (88) : countDerecha = RightChild.Count();
BinaryTreeNode.cs (89) : }
BinaryTreeNode.cs (90) : return 1+countIzquierda+countDerecha;
BinaryTreeNode.cs (97) : if (Count() == 0)
BinaryTreeNode.cs (98) : {
BinaryTreeNode.cs (99) : return -1;
BinaryTreeNode.cs (100) : }
BinaryTreeNode.cs (102) : if (Count() == 1)
BinaryTreeNode.cs (103) : {
BinaryTreeNode.cs (105) : }
BinaryTreeNode.cs (106) : int alturaIzquierda = 0;
BinaryTreeNode.cs (107) : int alturaDerecha = 0;
BinaryTreeNode.cs (108) : int alturaMax = 0;
BinaryTreeNode.cs (109) : if (LeftChild != null)
BinaryTreeNode.cs (110) : {
BinaryTreeNode.cs (111) : alturaIzquierda = 1 + LeftChild.Height();
BinaryTreeNode.cs (112) : }
BinaryTreeNode.cs (113) : if (RightChild != null)
BinaryTreeNode.cs (114) : {
BinaryTreeNode.cs (115) : alturaDerecha = 1 + RightChild.Height();
BinaryTreeNode.cs (116) : }
BinaryTreeNode.cs (117) : if (alturaIzquierda <= alturaDerecha)
BinaryTreeNode.cs (118) : {
BinaryTreeNode.cs (119) : alturaMax = alturaDerecha;
BinaryTreeNode.cs (120) : }
BinaryTreeNode.cs (121) : else
BinaryTreeNode.cs (122) : {
BinaryTreeNode.cs (123) : alturaMax = alturaIzquierda;
BinaryTreeNode.cs (124) : }
BinaryTreeNode.cs (125) : return alturaMax;
BinaryTreeNode.cs (137) : TValue valor = default;
BinaryTreeNode.cs (138) : if (Key.CompareTo(key) == 0)
BinaryTreeNode.cs (139) : {
BinaryTreeNode.cs (140) : return Value;
BinaryTreeNode.cs (141) : }
BinaryTreeNode.cs (142) : if (this.Key.CompareTo(key) == 1)
BinaryTreeNode.cs (143) : {
BinaryTreeNode.cs (144) : if (LeftChild != null)
BinaryTreeNode.cs (145) : {
BinaryTreeNode.cs (146) : valor=LeftChild.Get(key);
BinaryTreeNode.cs (147) : }
BinaryTreeNode.cs (148) : else
BinaryTreeNode.cs (149) : {
BinaryTreeNode.cs (150) : return default;
BinaryTreeNode.cs (151) : }
BinaryTreeNode.cs (152) : }
BinaryTreeNode.cs (153) : else
BinaryTreeNode.cs (154) : {
BinaryTreeNode.cs (155) : if (RightChild != null)
BinaryTreeNode.cs (156) : {
BinaryTreeNode.cs (157) : valor=RightChild.Get(key);
BinaryTreeNode.cs (158) : }
BinaryTreeNode.cs (159) : else
BinaryTreeNode.cs (160) : {
BinaryTreeNode.cs (162) : }
BinaryTreeNode.cs (163) : }
BinaryTreeNode.cs (165) : return valor;
BinaryTreeNode.cs (179) : if (Key.CompareTo(key) == 1)
BinaryTreeNode.cs (180) : {
BinaryTreeNode.cs (181) : if (LeftChild != null)
BinaryTreeNode.cs (182) : {
BinaryTreeNode.cs (183) : LeftChild = LeftChild.Remove(key);
BinaryTreeNode.cs (184) : }
BinaryTreeNode.cs (185) : }
BinaryTreeNode.cs (186) : else if (Key.CompareTo(key) == -1)
BinaryTreeNode.cs (187) : {
BinaryTreeNode.cs (188) : if (RightChild != null)
BinaryTreeNode.cs (189) : {
BinaryTreeNode.cs (190) : RightChild = RightChild.Remove(key);
BinaryTreeNode.cs (191) : }
BinaryTreeNode.cs (192) : }
BinaryTreeNode.cs (193) : else
BinaryTreeNode.cs (194) : {
BinaryTreeNode.cs (195) : if (LeftChild == null)
BinaryTreeNode.cs (196) : {
BinaryTreeNode.cs (197) : return RightChild;
BinaryTreeNode.cs (198) : }
BinaryTreeNode.cs (200) : if (RightChild == null)
BinaryTreeNode.cs (201) : {
BinaryTreeNode.cs (202) : return LeftChild;
BinaryTreeNode.cs (203) : }
BinaryTreeNode.cs (204) : return RightChild;
BinaryTreeNode.cs (206) : }
BinaryTreeNode.cs (208) : return this;
