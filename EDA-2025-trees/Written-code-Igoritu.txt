TreeNode.cs (72) : int height = 0;
TreeNode.cs (74) : if (Children.Count() == 0)
TreeNode.cs (75) : {
TreeNode.cs (76) : return height;
TreeNode.cs (77) : }
TreeNode.cs (78) : else
TreeNode.cs (79) : {
TreeNode.cs (80) : height += 1;
TreeNode.cs (81) : int heightASumar = 0;
TreeNode.cs (82) : foreach (TreeNode<T> children in Children)
TreeNode.cs (83) : {
TreeNode.cs (84) : foreach (TreeNode<T> children2 in Children) {
TreeNode.cs (85) : if (children.Height() > children2.Height())
TreeNode.cs (86) : {
TreeNode.cs (87) : heightASumar = children.Height();
TreeNode.cs (88) : }
TreeNode.cs (89) : else
TreeNode.cs (90) : {
TreeNode.cs (91) : heightASumar = children2.Height();
TreeNode.cs (92) : }
TreeNode.cs (93) : }
TreeNode.cs (94) : }
TreeNode.cs (95) : height += heightASumar;
TreeNode.cs (96) : }
TreeNode.cs (97) : return height;
TreeNode.cs (106) : int count = 1;
TreeNode.cs (107) : foreach (TreeNode<T> children in Children)
TreeNode.cs (108) : {
TreeNode.cs (109) : while (!children.Value.Equals(value))
TreeNode.cs (110) : {
TreeNode.cs (111) : count++;
TreeNode.cs (112) : }
TreeNode.cs (113) : if (children.Value.Equals(value))
TreeNode.cs (114) : {
TreeNode.cs (115) : Children.Remove(count);
TreeNode.cs (116) : return;
TreeNode.cs (117) : }
TreeNode.cs (118) : else
TreeNode.cs (119) : {
TreeNode.cs (120) : Remove(children);
TreeNode.cs (121) : }
TreeNode.cs (122) : }
TreeNode.cs (123) : return;
