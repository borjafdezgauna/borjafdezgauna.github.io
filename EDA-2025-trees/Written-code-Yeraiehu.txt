BinaryTreeNode.cs (3) : using System.Xml;
BinaryTreeNode.cs (95) : if (Key == null)
BinaryTreeNode.cs (96) : {
BinaryTreeNode.cs (97) : return -1;
BinaryTreeNode.cs (98) : }
BinaryTreeNode.cs (127) : int value = key.CompareTo(Key);
BinaryTreeNode.cs (128) : if (value == 0)
BinaryTreeNode.cs (129) : {
BinaryTreeNode.cs (130) : return Value;
BinaryTreeNode.cs (131) : }
BinaryTreeNode.cs (132) : else if (value < 0)
BinaryTreeNode.cs (133) : {
BinaryTreeNode.cs (134) : if (LeftChild == null)
BinaryTreeNode.cs (135) : {
BinaryTreeNode.cs (137) : }
BinaryTreeNode.cs (138) : else
BinaryTreeNode.cs (139) : {
BinaryTreeNode.cs (140) : return LeftChild.Get(key);
BinaryTreeNode.cs (141) : }
BinaryTreeNode.cs (142) : }
BinaryTreeNode.cs (143) : else
BinaryTreeNode.cs (144) : {
BinaryTreeNode.cs (145) : if (RightChild == null)
BinaryTreeNode.cs (146) : {
BinaryTreeNode.cs (147) : return default;
BinaryTreeNode.cs (148) : }
BinaryTreeNode.cs (149) : else
BinaryTreeNode.cs (150) : {
BinaryTreeNode.cs (151) : return RightChild.Get(key);
BinaryTreeNode.cs (152) : }
BinaryTreeNode.cs (153) : }
BinaryTreeNode.cs (166) : int value = key.CompareTo(Key);
BinaryTreeNode.cs (167) : if (value == 0)
BinaryTreeNode.cs (168) : {
BinaryTreeNode.cs (169) : if (LeftChild == null && RightChild == null)
BinaryTreeNode.cs (170) : {
BinaryTreeNode.cs (172) : }
BinaryTreeNode.cs (173) : else if (RightChild == null)
BinaryTreeNode.cs (174) : {
BinaryTreeNode.cs (175) : return LeftChild;
BinaryTreeNode.cs (176) : }
BinaryTreeNode.cs (177) : else if (LeftChild == null)
BinaryTreeNode.cs (178) : {
BinaryTreeNode.cs (179) : return RightChild;
BinaryTreeNode.cs (180) : }
BinaryTreeNode.cs (181) : else
BinaryTreeNode.cs (182) : {
BinaryTreeNode.cs (183) : LeftChild.Add(RightChild);
BinaryTreeNode.cs (184) : return LeftChild;
BinaryTreeNode.cs (185) : }
BinaryTreeNode.cs (186) : }
BinaryTreeNode.cs (187) : else if (value < 0)
BinaryTreeNode.cs (188) : {
BinaryTreeNode.cs (189) : if (LeftChild == null)
BinaryTreeNode.cs (190) : {
BinaryTreeNode.cs (191) : return this;
BinaryTreeNode.cs (192) : }
BinaryTreeNode.cs (193) : else
BinaryTreeNode.cs (194) : {
BinaryTreeNode.cs (195) : LeftChild = LeftChild.Remove(key);
BinaryTreeNode.cs (196) : return this;
BinaryTreeNode.cs (197) : }
BinaryTreeNode.cs (198) : }
BinaryTreeNode.cs (199) : else
BinaryTreeNode.cs (200) : {
BinaryTreeNode.cs (201) : if (RightChild == null)
BinaryTreeNode.cs (202) : {
BinaryTreeNode.cs (203) : return this;
BinaryTreeNode.cs (204) : }
BinaryTreeNode.cs (205) : else
BinaryTreeNode.cs (206) : {
BinaryTreeNode.cs (207) : RightChild = RightChild.Remove(key);
BinaryTreeNode.cs (208) : return this;
BinaryTreeNode.cs (209) : }
BinaryTreeNode.cs (210) : }
