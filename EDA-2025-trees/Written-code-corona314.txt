BinaryTree.cs (82) : int center = (end - start) / 2;
BinaryTree.cs (83) : BinaryTreeNode<TKey, TValue> binaryTree = new BinaryTreeNode<TKey, TValue>(keys[center], values[center]);
BinaryTree.cs (84) : AddBalanced(keys, values, center + 1, end);
BinaryTree.cs (85) : AddBalanced(keys, values, start, center + 1);
BinaryTree.cs (86) : return binaryTree;
BinaryTreeNode.cs (52) : if (LeftChild != null)
BinaryTreeNode.cs (53) : {
BinaryTreeNode.cs (54) : LeftChild.Add(node);
BinaryTreeNode.cs (55) : return;
BinaryTreeNode.cs (56) : }
BinaryTreeNode.cs (67) : if (RightChild != null)
BinaryTreeNode.cs (68) : {
BinaryTreeNode.cs (69) : RightChild.Add(node);
BinaryTreeNode.cs (70) : return;
BinaryTreeNode.cs (71) : }
BinaryTreeNode.cs (90) : int LeftChildHeight = -1;
BinaryTreeNode.cs (91) : int RightChildHeight = -1;
BinaryTreeNode.cs (92) : if (LeftChild != null) LeftChildHeight = LeftChild.Height();
BinaryTreeNode.cs (93) : if (RightChild != null) RightChildHeight = RightChild.Height();
BinaryTreeNode.cs (128) : if (LeftChild == null && RightChild == null)
BinaryTreeNode.cs (130) : if (Key.Equals(key)) return this;
BinaryTreeNode.cs (132) : else if (LeftChild == null && RightChild != null) RightChild.Remove(key);
BinaryTreeNode.cs (134) : else if (LeftChild != null && RightChild == null) LeftChild.Remove(key);
BinaryTreeNode.cs (137) : BinaryTreeNode<TKey, TValue> SaveTheChildrenFromLeft, DesintegratedNode;
BinaryTreeNode.cs (138) : if (LeftChild.Key.Equals(key))
BinaryTreeNode.cs (139) : {
BinaryTreeNode.cs (140) : if (LeftChild.LeftChild == null && LeftChild.RightChild == null) return LeftChild;
BinaryTreeNode.cs (141) : else if (LeftChild.LeftChild == null && LeftChild.RightChild != null)
BinaryTreeNode.cs (142) : {
BinaryTreeNode.cs (143) : DesintegratedNode = LeftChild;
BinaryTreeNode.cs (144) : LeftChild = LeftChild.RightChild;
BinaryTreeNode.cs (145) : return DesintegratedNode;
BinaryTreeNode.cs (146) : }
BinaryTreeNode.cs (147) : else if (LeftChild.LeftChild != null && LeftChild.RightChild == null)
BinaryTreeNode.cs (148) : {
BinaryTreeNode.cs (149) : DesintegratedNode = LeftChild;
BinaryTreeNode.cs (150) : LeftChild = LeftChild.LeftChild;
BinaryTreeNode.cs (151) : return DesintegratedNode;
BinaryTreeNode.cs (152) : }
BinaryTreeNode.cs (153) : SaveTheChildrenFromLeft = LeftChild.LeftChild;
BinaryTreeNode.cs (154) : DesintegratedNode = LeftChild;
BinaryTreeNode.cs (155) : LeftChild = LeftChild.RightChild;
BinaryTreeNode.cs (156) : Add(SaveTheChildrenFromLeft);
BinaryTreeNode.cs (157) : return DesintegratedNode;
BinaryTreeNode.cs (158) : }
BinaryTreeNode.cs (159) : else if (RightChild.Key.Equals(key))
BinaryTreeNode.cs (160) : {
BinaryTreeNode.cs (161) : if (RightChild.LeftChild == null && RightChild.RightChild == null) return RightChild;
BinaryTreeNode.cs (162) : else if (RightChild.LeftChild == null && RightChild.RightChild != null)
BinaryTreeNode.cs (164) : DesintegratedNode = RightChild;
BinaryTreeNode.cs (165) : RightChild = RightChild.RightChild;
BinaryTreeNode.cs (166) : return DesintegratedNode;
BinaryTreeNode.cs (167) : }
BinaryTreeNode.cs (168) : else if (RightChild.LeftChild != null && RightChild.RightChild == null)
BinaryTreeNode.cs (169) : {
BinaryTreeNode.cs (170) : DesintegratedNode = RightChild;
BinaryTreeNode.cs (171) : RightChild = RightChild.LeftChild;
BinaryTreeNode.cs (172) : return DesintegratedNode;
BinaryTreeNode.cs (173) : }
BinaryTreeNode.cs (174) : SaveTheChildrenFromLeft = RightChild.LeftChild;
BinaryTreeNode.cs (175) : DesintegratedNode = RightChild;
BinaryTreeNode.cs (176) : RightChild = RightChild.RightChild;
BinaryTreeNode.cs (177) : Add(SaveTheChildrenFromLeft);
BinaryTreeNode.cs (178) : return DesintegratedNode;
BinaryTreeNode.cs (182) : if (LeftChild.Key.CompareTo(key) == 1)
BinaryTreeNode.cs (183) : {
BinaryTreeNode.cs (184) : LeftChild.Remove(key);
BinaryTreeNode.cs (185) : }
BinaryTreeNode.cs (186) : else
BinaryTreeNode.cs (188) : RightChild.Remove(key);
