Manager.cs (215) : string dir = "data";
Manager.cs (216) : string filePath = Path.Combine(dir, $"security_{databaseName}.txt");
Manager.cs (217) : if (!File.Exists(filePath))
Manager.cs (220) : var manager = new Manager(username);
Manager.cs (221) : Profile currentProfile = null;
Manager.cs (223) : foreach (var rawLine in File.ReadAllLines(filePath))
Manager.cs (224) : {
Manager.cs (225) : if (rawLine.StartsWith("Profile="))
Manager.cs (226) : {
Manager.cs (227) : // guardamos el anterior (si exist�a)
Manager.cs (228) : if (currentProfile != null)
Manager.cs (229) : manager.Profiles.Add(currentProfile);
Manager.cs (231) : // arrancamos uno nuevo
Manager.cs (232) : string profileName = rawLine.Substring("Profile=".Length);
Manager.cs (233) : currentProfile = new Profile { Name = profileName };
Manager.cs (234) : }
Manager.cs (235) : else if (rawLine.StartsWith("User=") && currentProfile != null)
Manager.cs (236) : {
Manager.cs (237) : string userName = rawLine.Substring("User=".Length);
Manager.cs (238) : // creamos usuario con contrase�a provisional (se ajusta al leer "Password=")
Manager.cs (239) : currentProfile.Users.Add(new User { Username = userName });
Manager.cs (240) : }
Manager.cs (241) : else if (rawLine.StartsWith("Password=") && currentProfile != null)
Manager.cs (242) : {
Manager.cs (243) : string enc = rawLine.Substring("Password=".Length);
Manager.cs (244) : // asignamos la contrase�a al �ltimo usuario a�adido
Manager.cs (245) : var lastUser = currentProfile.Users[currentProfile.Users.Count - 1];
Manager.cs (246) : lastUser.EncryptedPassword = enc;
Manager.cs (247) : }
Manager.cs (248) : else if (currentProfile != null)
Manager.cs (249) : {
Manager.cs (250) : // debe ser �tabla=PRIV1,PRIV2,...�
Manager.cs (251) : int equals = rawLine.IndexOf('=');
Manager.cs (252) : if (equals > 0)
Manager.cs (253) : {
Manager.cs (254) : string table = rawLine.Substring(0, equals);
Manager.cs (255) : string privList = rawLine.Substring(equals + 1);
Manager.cs (256) : // sin usar string.Split: recorremos y separamos por comas
Manager.cs (258) : for (int i = 0; i < privList.Length; i++)
Manager.cs (259) : {
Manager.cs (260) : char c = privList[i];
Manager.cs (261) : if (c == ',')
Manager.cs (262) : {
Manager.cs (263) : // a�adimos lo acumulado en sb
Manager.cs (264) : if (sb.Length > 0)
Manager.cs (265) : {
Manager.cs (267) : currentProfile.GrantPrivilege(table, p);
Manager.cs (269) : }
Manager.cs (270) : }
Manager.cs (271) : else
Manager.cs (272) : {
Manager.cs (274) : }
Manager.cs (275) : }
Manager.cs (276) : // agregamos el �ltimo
Manager.cs (277) : if (sb.Length > 0)
Manager.cs (278) : {
Manager.cs (280) : currentProfile.GrantPrivilege(table, p);
Manager.cs (281) : }
Manager.cs (282) : }
Manager.cs (283) : }
Manager.cs (284) : }
Manager.cs (286) : // no olvidar a�adir el �ltimo perfil que est� en currentProfile
Manager.cs (287) : if (currentProfile != null)
Manager.cs (288) : manager.Profiles.Add(currentProfile);
Manager.cs (313) : return manager;
Manager.cs (338) : var privileges = entry.Value;
Manager.cs (340) : // Montamos la l�nea manualmente con concatenaci�n b�sica
Manager.cs (341) : string line = table + "=";
Manager.cs (342) : for (int i = 0; i < privileges.Count; i++)
Manager.cs (343) : {
Manager.cs (344) : line += privileges[i].ToString();
Manager.cs (345) : if (i < privileges.Count - 1)
Manager.cs (346) : {
Manager.cs (347) : line += ",";  // a�adimos la coma s�lo entre elementos
Manager.cs (348) : }
Manager.cs (349) : }
Manager.cs (351) : lines.Add(line);
