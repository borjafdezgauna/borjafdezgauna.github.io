Condition.cs (32) : String may = ">";
Condition.cs (33) : String men = "<";
Condition.cs (34) : String igu = "=";
Condition.cs (39) : if (Operator==men)
Condition.cs (44) : else if (Operator==may)
Condition.cs (49) : else if (Operator == igu)
Condition.cs (59) : if (Operator == men)
Condition.cs (64) : else if (Operator == may)
Condition.cs (69) : else if (Operator == igu)
Condition.cs (81) : if (Operator == men)
Condition.cs (86) : else if (Operator == may)
Condition.cs (91) : else if (Operator == igu)
Database.cs (32) : SecurityManager = new Manager(m_username);
Database.cs (33) : SecurityManager.AddProfile(new Profile { Name = Profile.AdminProfileName});
Database.cs (34) : SecurityManager.ProfileByName(Profile.AdminProfileName).Users.Add( new User {Username=adminUsername, EncryptedPassword=Encryption.Encrypt(adminPassword)} );
Database.cs (54) : if (tableName.Equals(table.Name))
Database.cs (71) : if (TableByName(tableName) == null)
Database.cs (73) : if (ColumnDefinition != null && ColumnDefinition.Count > 0)
Database.cs (76) : Tables.Add(tabla);
Database.cs (79) : }
Database.cs (80) : else
Database.cs (85) : }
Database.cs (86) : else
Database.cs (98) : if (TableByName(tableName) != null)
Database.cs (99) : {
Database.cs (112) : Table tabla = TableByName(tableName);
Database.cs (113) : if (tabla != null)
Database.cs (114) : {
Database.cs (115) : if (tabla.Insert(values))
Database.cs (116) : {
Database.cs (117) : //mensaje de inserci�n correcta
Database.cs (118) : LastErrorMessage = Constants.InsertSuccess;
Database.cs (119) : return true;
Database.cs (120) : }
Database.cs (121) : else
Database.cs (122) : {
Database.cs (123) : //mensaje no coincide n�mero columnas
Database.cs (124) : LastErrorMessage = Constants.ColumnCountsDontMatch;
Database.cs (125) : return false;
Database.cs (128) : }
Database.cs (130) : }
Database.cs (131) : else
Database.cs (132) : {
Database.cs (133) : //mensaje de error
Database.cs (134) : LastErrorMessage = Constants.TableDoesNotExistError;
Database.cs (136) : }
Database.cs (146) : Table tabla = TableByName(tableName);
Database.cs (147) : if (tabla != null)
Database.cs (148) : {
Database.cs (149) : foreach (string columna in columns)
Database.cs (150) : {
Database.cs (151) : if (tabla.ColumnByName(columna) == null)
Database.cs (152) : {
Database.cs (153) : LastErrorMessage = Constants.ColumnDoesNotExistError;
Database.cs (155) : }
Database.cs (156) : }
Database.cs (157) : return tabla.Select(columns, condition);
Database.cs (158) : }
Database.cs (159) : else
Database.cs (160) : {
Database.cs (161) : LastErrorMessage = Constants.TableDoesNotExistError;
Database.cs (162) : return null;
Database.cs (163) : }
Database.cs (173) : if (table != null)
Database.cs (174) : {
Database.cs (176) : {
Database.cs (177) : if (table.ColumnByName(columnCondition.ColumnName)!=null)
Database.cs (180) : LastErrorMessage = Constants.DeleteSuccess;
Database.cs (183) : LastErrorMessage = Constants.ColumnDoesNotExistError;
Database.cs (184) : return false;
Database.cs (185) : }
Database.cs (202) : if (t != null)
Database.cs (204) : if (t.ColumnByName(columnCondition.ColumnName) != null)
Database.cs (205) : {
Database.cs (206) : foreach (SetValue v in columnNames)
Database.cs (208) : if (t.ColumnByName(v.ColumnName) == null)
Database.cs (209) : {
Database.cs (210) : LastErrorMessage = Constants.ColumnDoesNotExistError;
Database.cs (215) : t.Update(columnNames, columnCondition);
Database.cs (216) : LastErrorMessage = Constants.UpdateSuccess;
Database.cs (217) : return true;
Database.cs (219) : else
Database.cs (220) : {
Database.cs (221) : LastErrorMessage = Constants.ColumnDoesNotExistError;
Database.cs (222) : return false;
Database.cs (223) : }
Database.cs (224) : }
Database.cs (225) : LastErrorMessage = Constants.TableDoesNotExistError;
Database.cs (226) : return false;
Database.cs (227) : }
Database.cs (240) : try
Database.cs (241) : {
Database.cs (427) : database.Tables.Add(Table.CreateTestTable());
Row.cs (40) : for (int i = 0;i<posicion-Values.Count+1;i++)
Row.cs (41) : {
Row.cs (42) : Values.Add(null);
Row.cs (43) : }
Row.cs (44) : if (posicion != -1 && posicion < Values.Count)
Row.cs (56) : if(posicion != -1 && posicion < Values.Count)
Row.cs (67) : if (GetPosition(condition.ColumnName) != -1)
Row.cs (68) : {
Row.cs (70) : }
Row.cs (71) : return false;
Row.cs (81) : foreach(Char c in value)
Row.cs (82) : {
Table.cs (33) : if (NumColumns() == row.Values.Count)
Table.cs (37) : }
Table.cs (50) : if(this.NumColumns() > i && i >= 0)
Table.cs (51) : {
Table.cs (53) : }
Table.cs (54) : return null;
Table.cs (111) : tableString +=  "'" + GetColumn(i).Name + "'";
Table.cs (132) : tableString += "'" + GetRow(i).GetValue(GetColumn(j).Name) + "'";
Table.cs (150) : if(NumRows() <= row || row < 0)
Table.cs (220) : if (values.Count != ColumnDefinitions.Count)
Table.cs (236) : if(condition != null)
Table.cs (237) : {
Table.cs (245) : return true;
DatabaseTests.cs (1) : using System.ComponentModel.DataAnnotations.Schema;
DatabaseTests.cs (3) : using DbManager.Parser;
DatabaseTests.cs (17) : /*[Fact]
DatabaseTests.cs (22) : columns.Add();
DatabaseTests.cs (23) : DB.CreateTable("tabla1",);
DatabaseTests.cs (24) : }*/
DatabaseTests.cs (26) : public void TestInsert()
DatabaseTests.cs (27) : {
DatabaseTests.cs (29) : Database DB = Database.CreateTestDatabase();
DatabaseTests.cs (30) : Assert.NotNull(DB.TableByName(Table.TestTableName));
DatabaseTests.cs (31) : Assert.Equal(3, DB.TableByName(Table.TestTableName).NumRows());
DatabaseTests.cs (33) : List<String> values0 = new List<string>() { "v1", "v2","v3" };
DatabaseTests.cs (34) : List<String> values1 = new List<string>() { "v1", "v2" };
DatabaseTests.cs (35) : Assert.False(DB.Insert("tabla1",values0));
DatabaseTests.cs (36) : Assert.Equal(DB.LastErrorMessage, Constants.TableDoesNotExistError);
DatabaseTests.cs (38) : Assert.False(DB.Insert(Table.TestTableName, values1));
DatabaseTests.cs (39) : Assert.Equal(3,DB.TableByName(Table.TestTableName).NumRows());
DatabaseTests.cs (41) : Assert.True(DB.Insert(Table.TestTableName, values0));
DatabaseTests.cs (42) : Assert.Equal(4, DB.TableByName(Table.TestTableName).NumRows());
DatabaseTests.cs (44) : }
DatabaseTests.cs (46) : [Fact]
DatabaseTests.cs (47) : public void TestUpdate()
DatabaseTests.cs (48) : {
DatabaseTests.cs (49) : Database DB = Database.CreateTestDatabase();
DatabaseTests.cs (50) : List<SetValue> values = new List<SetValue>() { };
DatabaseTests.cs (51) : SetValue v1 =new SetValue ("Name", "iker");
DatabaseTests.cs (52) : SetValue v2 = new SetValue("Age", "20");
DatabaseTests.cs (53) : SetValue v3 = new SetValue("Height", "1.80");
DatabaseTests.cs (54) : values.Add(v1);
DatabaseTests.cs (55) : values.Add(v2);
DatabaseTests.cs (56) : values.Add(v3);
DatabaseTests.cs (57) : Condition cond = new Condition("Height", "<", "1.60");
DatabaseTests.cs (58) : Condition cond2 = new Condition("Age", "=", "15");
DatabaseTests.cs (61) : Assert.True(DB.Update(Table.TestTableName,values,cond));
DatabaseTests.cs (62) : Assert.Equal("20",DB.TableByName(Table.TestTableName).GetRow(2).GetValue("Age"));
DatabaseTests.cs (64) : Assert.False(DB.Update("tabla1",values, cond));
DatabaseTests.cs (65) : Assert.Equal(DB.LastErrorMessage, Constants.TableDoesNotExistError);
DatabaseTests.cs (67) : Assert.True(DB.Update(Table.TestTableName, values, cond2));
DatabaseTests.cs (68) : Assert.Equal("20", DB.TableByName(Table.TestTableName).GetRow(2).GetValue("Age"));
DatabaseTests.cs (70) : }
DatabaseTests.cs (72) : [Fact]
DatabaseTests.cs (73) : public void TestDelete()
DatabaseTests.cs (74) : {
DatabaseTests.cs (75) : Database DB = Database.CreateTestDatabase();
DatabaseTests.cs (76) : List<string> lista = new List<string> { "Name", "Height", "Age" };
DatabaseTests.cs (77) : Condition cond = new Condition("Height", "<", "1.60");
DatabaseTests.cs (78) : Condition cond1 = new Condition("Height", "<", "1.40");
DatabaseTests.cs (79) : Condition cond2 = new Condition("Name", "=", "Rodolfo");
DatabaseTests.cs (80) : Condition cond3 = new Condition("Age", ">", "52");
DatabaseTests.cs (82) : Assert.True(DB.DeleteWhere(Table.TestTableName,cond));
DatabaseTests.cs (83) : Table tabla1 = DB.Select(Table.TestTableName, lista, null);
DatabaseTests.cs (84) : Assert.Equal(2, DB.TableByName(Table.TestTableName).NumRows());
DatabaseTests.cs (86) : Assert.False(DB.DeleteWhere("tabla1", cond));
DatabaseTests.cs (87) : Assert.Equal(DB.LastErrorMessage, Constants.TableDoesNotExistError);
DatabaseTests.cs (89) : Assert.False(DB.DeleteWhere(Table.TestTableName, null));
DatabaseTests.cs (90) : Assert.Equal(2, DB.TableByName(Table.TestTableName).NumRows());
DatabaseTests.cs (91) : Assert.Equal(DB.LastErrorMessage, Constants.Error);
DatabaseTests.cs (93) : Database DB1 = Database.CreateTestDatabase();
DatabaseTests.cs (95) : Assert.True(DB1.DeleteWhere(Table.TestTableName, cond1));
DatabaseTests.cs (96) : Assert.Equal(3, DB1.TableByName(Table.TestTableName).NumRows());
DatabaseTests.cs (98) : Assert.True(DB1.DeleteWhere(Table.TestTableName, cond2));
DatabaseTests.cs (99) : Assert.Equal(2, DB1.TableByName(Table.TestTableName).NumRows());
DatabaseTests.cs (101) : Assert.True(DB1.DeleteWhere(Table.TestTableName, cond3));
DatabaseTests.cs (102) : Assert.Equal(1, DB1.TableByName(Table.TestTableName).NumRows());
DatabaseTests.cs (104) : }
DatabaseTests.cs (105) : [Fact]
DatabaseTests.cs (106) : public void TestCreate()
DatabaseTests.cs (107) : {
DatabaseTests.cs (108) : Database DB = Database.CreateTestDatabase();
DatabaseTests.cs (109) : List<ColumnDefinition> columna = new List<ColumnDefinition>();
DatabaseTests.cs (110) : ColumnDefinition.DataType tipoString = ColumnDefinition.DataType.String;
DatabaseTests.cs (111) : ColumnDefinition.DataType tipoDouble = ColumnDefinition.DataType.Double;
DatabaseTests.cs (112) : ColumnDefinition.DataType tipoInt = ColumnDefinition.DataType.Int;
DatabaseTests.cs (113) : ColumnDefinition c1 = new ColumnDefinition(tipoString, "Name");
DatabaseTests.cs (114) : ColumnDefinition c2 = new ColumnDefinition(tipoInt, "Age");
DatabaseTests.cs (115) : ColumnDefinition c3 = new ColumnDefinition(tipoDouble, "Height");
DatabaseTests.cs (116) : columna.Add(c1);
DatabaseTests.cs (117) : columna.Add(c2);
DatabaseTests.cs (118) : columna.Add(c3);
DatabaseTests.cs (120) : Assert.True(DB.CreateTable("tabla1",columna));
DatabaseTests.cs (121) : Assert.Equal(DB.LastErrorMessage, Constants.CreateTableSuccess);
DatabaseTests.cs (123) : Assert.False(DB.CreateTable(Table.TestTableName, columna));
DatabaseTests.cs (124) : Assert.Equal(DB.LastErrorMessage,Constants.TableAlreadyExistsError);
DatabaseTests.cs (126) : Assert.False(DB.CreateTable("tabla1", null));
DatabaseTests.cs (127) : Assert.Equal(DB.LastErrorMessage, Constants.TableAlreadyExistsError);
DatabaseTests.cs (129) : Assert.False(DB.CreateTable("tabla2", null));
DatabaseTests.cs (130) : Assert.Equal(DB.LastErrorMessage, Constants.ColumnDoesNotExistError);
DatabaseTests.cs (131) : }
DatabaseTests.cs (133) : [Fact]
DatabaseTests.cs (134) : public void TestSelect()
DatabaseTests.cs (135) : {
DatabaseTests.cs (136) : Database DB = Database.CreateTestDatabase();
DatabaseTests.cs (137) : //Condition cond1 = new Condition("Name", "=", "maider");
DatabaseTests.cs (138) : //Condition cond2 = new Condition("Age", ">", "20");
DatabaseTests.cs (139) : Condition cond = new Condition("Height", "<", "1.65");
DatabaseTests.cs (141) : List<string> listaSelect1 = new List<string> { "Age", "Height" };
DatabaseTests.cs (142) : Table tabla1 = DB.Select(Table.TestTableName, listaSelect1, cond);
DatabaseTests.cs (143) : Assert.Equal("25", tabla1.GetRow(0).GetValue("Age"));
DatabaseTests.cs (144) : Assert.Equal("1.62", tabla1.GetRow(0).GetValue("Height"));
DatabaseTests.cs (145) : Assert.Equal("51", tabla1.GetRow(1).GetValue("Age"));
DatabaseTests.cs (146) : Assert.Equal("1.55", tabla1.GetRow(1).GetValue("Height"));
DatabaseTests.cs (148) : List<string> listaSelect2 = new List<string> { "Age", "Height" };
DatabaseTests.cs (149) : Table tabla2 = DB.Select(Table.TestTableName, listaSelect2, null);
DatabaseTests.cs (150) : Assert.Equal("25", tabla2.GetRow(0).GetValue("Age"));
DatabaseTests.cs (151) : Assert.Equal("1.62", tabla2.GetRow(0).GetValue("Height"));
DatabaseTests.cs (152) : Assert.Equal("67", tabla2.GetRow(1).GetValue("Age"));
DatabaseTests.cs (153) : Assert.Equal("1.55", tabla2.GetRow(2).GetValue("Height"));
DatabaseTests.cs (154) : }
ManagerTests.cs (1) : using DbManager;
ManagerTests.cs (2) : using DbManager.Security;
ManagerTests.cs (4) : namespace OurTests
ManagerTests.cs (5) : {
ManagerTests.cs (6) : public class ManagerTests
ManagerTests.cs (7) : {
ManagerTests.cs (8) : //TODO DEADLINE 1A : Create your own tests for Table
ManagerTests.cs (10) : [Fact]
ManagerTests.cs (11) : public void Save()
ManagerTests.cs (12) : {
ManagerTests.cs (13) : string username = "koldo";
ManagerTests.cs (14) : string password = "1234";
ManagerTests.cs (15) : string dbName = "testDB";
ManagerTests.cs (16) : string username2 = "adri";
ManagerTests.cs (17) : string password2 = "1234";
ManagerTests.cs (19) : Database db = new Database(username, password);
ManagerTests.cs (20) : Profile adminProfile = db.SecurityManager.ProfileByName(Profile.AdminProfileName);
ManagerTests.cs (22) : User user = new User(username2, password2);
ManagerTests.cs (23) : adminProfile.Users.Add(user);
ManagerTests.cs (25) : adminProfile.PrivilegesOn["table1"] = new List<Privilege> {
ManagerTests.cs (26) : Privilege.Delete,
ManagerTests.cs (27) : Privilege.Insert,
ManagerTests.cs (28) : Privilege.Select,
ManagerTests.cs (29) : Privilege.Update
ManagerTests.cs (30) : };
ManagerTests.cs (32) : db.SecurityManager.Save(dbName);
ManagerTests.cs (34) : string profilePath = Path.Combine(Directory.GetCurrentDirectory(), dbName, "profiles.txt");
ManagerTests.cs (35) : Assert.True(File.Exists(profilePath), "El archivo profiles.txt no se ha creado");
ManagerTests.cs (37) : }
ManagerTests.cs (38) : }
ManagerTests.cs (39) : }
RowTests.cs (40) : public void GetValue()
RowTests.cs (41) : {
RowTests.cs (42) : List<ColumnDefinition> colums = new List<ColumnDefinition>()
RowTests.cs (43) : {
RowTests.cs (44) : new ColumnDefinition(ColumnDefinition.DataType.String,"Name"),
RowTests.cs (45) : new ColumnDefinition(ColumnDefinition.DataType.Int,"Age")
RowTests.cs (46) : };
RowTests.cs (47) : List<String> values = new List<String>() { "Jacinto", "27" };
RowTests.cs (49) : Row row = new Row(colums, values);
RowTests.cs (51) : Assert.Equal("27",row.GetValue("Age"));
RowTests.cs (52) : Assert.Equal("Jacinto", row.GetValue("Name"));
RowTests.cs (53) : Assert.Null(row.GetValue("Value"));
RowTests.cs (54) : }
RowTests.cs (55) : [Fact]
RowTests.cs (56) : public void IsTrue()
RowTests.cs (57) : {
RowTests.cs (58) : List<ColumnDefinition> colums = new List<ColumnDefinition>()
RowTests.cs (59) : {
RowTests.cs (60) : new ColumnDefinition(ColumnDefinition.DataType.String,"Name"),
RowTests.cs (61) : new ColumnDefinition(ColumnDefinition.DataType.Int,"Age"),
RowTests.cs (62) : new ColumnDefinition(ColumnDefinition.DataType.Double,"Height")
RowTests.cs (63) : };
RowTests.cs (64) : List<String> values = new List<String>() { "Jacinto", "27","1.80" };
RowTests.cs (66) : Row row = new Row(colums, values);
RowTests.cs (68) : Condition condition1 = new Condition("Name", "=", "Jacinto");
RowTests.cs (69) : Condition condition2 = new Condition("Name", "<", "Amaia");
RowTests.cs (70) : Condition condition3 = new Condition("Value", "<", "Amaia");
RowTests.cs (71) : Condition condition4 = new Condition("Height",">","1.75");
RowTests.cs (72) : Condition condition5 = new Condition(null, "<", "Amaia");
RowTests.cs (74) : Assert.True(row.IsTrue(condition1));
RowTests.cs (75) : Assert.False(row.IsTrue(condition2));
RowTests.cs (76) : Assert.False(row.IsTrue(condition3));
RowTests.cs (77) : Assert.True(row.IsTrue(condition4));
RowTests.cs (78) : Assert.False(row.IsTrue(condition5));
RowTests.cs (79) : }
RowTests.cs (103) : [Fact]
RowTests.cs (104) : public void TestSetValue()
RowTests.cs (105) : {
RowTests.cs (106) : List<ColumnDefinition> colums = new List<ColumnDefinition>()
RowTests.cs (107) : {
RowTests.cs (108) : new ColumnDefinition(ColumnDefinition.DataType.String,"Name"),
RowTests.cs (109) : new ColumnDefinition(ColumnDefinition.DataType.Int,"Age")
RowTests.cs (110) : };
RowTests.cs (111) : List<String> values = new List<String>(){"Asier"};
RowTests.cs (112) : List<String> values1 = new List<String>() { "Jon", "31" };
RowTests.cs (113) : List<String> values3 = new List<String>() { "Asier", "20" };
RowTests.cs (114) : String values2 = "20";
RowTests.cs (116) : Row row = new Row(colums, values);
RowTests.cs (117) : row.SetValue("Age",values2);
RowTests.cs (118) : Assert.Equal("20",row.GetValue("Age"));
RowTests.cs (121) : Row row2 = new Row(colums, values3);
RowTests.cs (122) : row2.SetValue("Age", values2);
RowTests.cs (123) : Assert.Equal("20", row2.GetValue("Age"));
RowTests.cs (125) : Row row1 = new Row(colums, values1);
RowTests.cs (126) : row1.SetValue("Height","1.89");
RowTests.cs (128) : }
TableTests.cs (1) : using System.ComponentModel.DataAnnotations;
TableTests.cs (3) : using DbManager.Parser;
TableTests.cs (90) : List<ColumnDefinition> columnas = new List<ColumnDefinition>() {  };
TableTests.cs (91) : Table table4 = new Table("table", columnas);
TableTests.cs (92) : Assert.Equal("",table4.ToString());
TableTests.cs (94) : [Fact]
TableTests.cs (96) : {
TableTests.cs (101) : ColumnDefinition col1 = new ColumnDefinition(ColumnDefinition.DataType.String, "Name");
TableTests.cs (102) : ColumnDefinition col2 = new ColumnDefinition(ColumnDefinition.DataType.String, "Age");
TableTests.cs (103) : ColumnDefinition col3 = new ColumnDefinition(ColumnDefinition.DataType.String, "Height");
TableTests.cs (105) : List<ColumnDefinition> columnas = new List<ColumnDefinition>() {col1,col2,col3};
TableTests.cs (106) : Table table2 = new Table("table", columnas);
TableTests.cs (108) : Assert.Equal(table2.ColumnByName("Name"), columnas[0]);
TableTests.cs (109) : Assert.Equal(table2.ColumnByName("Height"), columnas[2]);
TableTests.cs (110) : Assert.Equal(table2.ColumnByName("Age"), columnas[1]);
TableTests.cs (111) : Assert.NotEqual(table2.ColumnByName("Age"), columnas[0]);
TableTests.cs (120) : Assert.Null(table.GetColumn(-1));
TableTests.cs (121) : Assert.Null(table.GetColumn(30));
TableTests.cs (123) : Assert.Equal("Name", table.GetColumn(0).Name);
TableTests.cs (132) : Condition condition1 = new Condition("Name", "=", "Rodolfo");
TableTests.cs (133) : Condition condition2 = new Condition("Height", "<", "1.63");
TableTests.cs (141) : Table table2 = Table.CreateTestTable("table");
TableTests.cs (142) : table2.DeleteWhere(condition1);
TableTests.cs (143) : Assert.Equal(2, table2.NumRows());
TableTests.cs (144) : Assert.Equal("Maider", table2.GetRow(0).GetValue("Name"));
TableTests.cs (146) : Table table3 = Table.CreateTestTable("table");
TableTests.cs (147) : table3.DeleteWhere(condition2);
TableTests.cs (148) : Assert.Equal(1, table3.NumRows());
TableTests.cs (149) : Assert.Equal("Maider", table3.GetRow(0).GetValue("Name"));
TableTests.cs (185) : }
TableTests.cs (204) : [Fact]
TableTests.cs (205) : public void TestUpdate()
TableTests.cs (206) : {
TableTests.cs (207) : Table tabla = Table.CreateTestTable("table");
TableTests.cs (208) : SetValue valor= new SetValue("Height", "1.70");
TableTests.cs (209) : SetValue valor2 = new SetValue("Age", "49");
TableTests.cs (210) : List<SetValue> values = new List<SetValue> {valor};
TableTests.cs (211) : values.Add(valor2);
TableTests.cs (212) : Condition condicion1 = new Condition("Height", ">", "1.65");
TableTests.cs (213) : Assert.True(tabla.Update(values, condicion1));
TableTests.cs (214) : Assert.False(tabla.Update(values, null));
TableTests.cs (215) : Assert.Equal("1.70", tabla.GetRow(1).GetValue("Height"));
TableTests.cs (217) : Condition condicion2 = new Condition("Age", "<", "52");
TableTests.cs (218) : Assert.True(tabla.Update(values, condicion2));
TableTests.cs (219) : Assert.Equal("49", tabla.GetRow(0).GetValue("Age"));
TableTests.cs (220) : Assert.Equal("49", tabla.GetRow(2).GetValue("Age"));
TableTests.cs (222) : }
CreateTable.cs (17) : Table = table;
CreateTable.cs (18) : ColumnsParameters = columns;
Delete.cs (15) : Table = table;
Delete.cs (16) : Where = where;
Delete.cs (24) : if(database.TableByName(Table) == null)
Delete.cs (25) : {
Delete.cs (26) : return Constants.TableDoesNotExistError;
Delete.cs (27) : }
Delete.cs (28) : else
Delete.cs (29) : {
Delete.cs (30) : database.DeleteWhere(Table, Where);
Delete.cs (31) : return Constants.DeleteSuccess;
Delete.cs (32) : }
DropTable.cs (15) : Table = table;
DropTable.cs (28) : database.DropTable(Table);
Insert.cs (16) : Table = table;
Insert.cs (17) : Values = values;
Insert.cs (33) : database.Insert(Table, Values);
MiniSQLParser.cs (4) : using System.IO;
MiniSQLParser.cs (16) : const string selectPattern = @"^SELECT\s+(\w+(?:,\w+)*)\s+FROM\s+(\w+)(\s+WHERE\s+(\w+)(<|=|>)('[^']+'))?$";
MiniSQLParser.cs (19) : const string insertPattern = @"INSERT\s+INTO\s+(\w+)\s+VALUES\s+\((.*?)\)";
MiniSQLParser.cs (24) : const string createTablePattern = @"^CREATE\s+TABLE\s+(\w+)\s+\((?:([\w]+\s+\w+(?:,[\w]+\s+\w+)*)?)\)";
MiniSQLParser.cs (26) : const string updateTablePattern = @"UPDATE\s+(\w+)\s+SET\s+(.*?)(\s+WHERE\s+(\w+)(<|=|>)('[^']+'))?$";
MiniSQLParser.cs (28) : const string deletePattern = @"^DELETE\s+FROM\s+(\w+)\s+WHERE\s+(\w+)(<|=|>)('[^']+')$";
MiniSQLParser.cs (50) : Match match;
MiniSQLParser.cs (51) : match = Regex.Match(miniSQLQuery, selectPattern);
MiniSQLParser.cs (52) : if (match.Success)
MiniSQLParser.cs (53) : {
MiniSQLParser.cs (54) : string table= match.Groups[2].Value;
MiniSQLParser.cs (56) : List<string> columns = CommaSeparatedNames(match.Groups[1].Value);
MiniSQLParser.cs (58) : Condition con = new Condition(null, null, null);
MiniSQLParser.cs (59) : if (match.Groups[6].Value.StartsWith("'") && match.Groups[6].Value.EndsWith("'"))
MiniSQLParser.cs (60) : {
MiniSQLParser.cs (61) : string literalVal = match.Groups[6].Value.Trim('\'');
MiniSQLParser.cs (62) : con = new Condition(match.Groups[4].Value, match.Groups[5].Value, literalVal);
MiniSQLParser.cs (63) : }
MiniSQLParser.cs (64) : return new Select(table, columns, con);
MiniSQLParser.cs (66) : /*Match match2 = Regex.Match(miniSQLQuery, insertPattern);
MiniSQLParser.cs (70) : }*/
MiniSQLParser.cs (71) : match = Regex.Match(miniSQLQuery, insertPattern);
MiniSQLParser.cs (72) : if (match.Success)
MiniSQLParser.cs (73) : {
MiniSQLParser.cs (74) : string table = match.Groups[1].Value;
MiniSQLParser.cs (75) : List<string> values = CommaSeparatedNames(match.Groups[2].Value);
MiniSQLParser.cs (76) : for (int i = 0; i < values.Count; i++)
MiniSQLParser.cs (77) : {
MiniSQLParser.cs (78) : if (values[i].StartsWith('\'') && values[i].EndsWith('\''))
MiniSQLParser.cs (79) : {
MiniSQLParser.cs (80) : values[i] = values[i].Trim('\'');
MiniSQLParser.cs (81) : }else
MiniSQLParser.cs (82) : {
MiniSQLParser.cs (83) : return null;
MiniSQLParser.cs (84) : }
MiniSQLParser.cs (86) : }
MiniSQLParser.cs (87) : if (values.Count == 0)
MiniSQLParser.cs (88) : {
MiniSQLParser.cs (89) : return null;
MiniSQLParser.cs (90) : }
MiniSQLParser.cs (91) : return new Insert(table, values);
MiniSQLParser.cs (93) : match = Regex.Match(miniSQLQuery, dropTablePattern);
MiniSQLParser.cs (94) : if (match.Success)
MiniSQLParser.cs (96) : return new DropTable(match.Groups[1].Value);
MiniSQLParser.cs (99) : match = Regex.Match(miniSQLQuery, createTablePattern);
MiniSQLParser.cs (100) : if (match.Success)
MiniSQLParser.cs (102) : List<string> columnStrings = CommaSeparatedNames(match.Groups[2].Value);
MiniSQLParser.cs (107) : String[] parts = Regex.Split(columnStrings[i], "\\s+");
MiniSQLParser.cs (129) : return new CreateTable(match.Groups[1].Value, columns);
MiniSQLParser.cs (132) : match = Regex.Match(miniSQLQuery, updateTablePattern);
MiniSQLParser.cs (133) : if (match.Success)
MiniSQLParser.cs (138) : if(setValues == null)
MiniSQLParser.cs (139) : {
MiniSQLParser.cs (140) : return null;
MiniSQLParser.cs (141) : }
MiniSQLParser.cs (142) : if (match.Groups[6].Value.StartsWith("'") && match.Groups[6].Value.EndsWith("'"))
MiniSQLParser.cs (144) : String cond = match.Groups[6].Value.Trim('\'');
MiniSQLParser.cs (145) : condition = new Condition(match.Groups[4].Value, match.Groups[5].Value, cond);
MiniSQLParser.cs (150) : match = Regex.Match(miniSQLQuery, deletePattern);
MiniSQLParser.cs (151) : if (match.Success)
MiniSQLParser.cs (152) : {
MiniSQLParser.cs (153) : string table = match.Groups[1].Value;
MiniSQLParser.cs (154) : Condition con = new Condition(null,null,null);
MiniSQLParser.cs (155) : if (match.Groups[4].Value.StartsWith("'") && match.Groups[4].Value.EndsWith("'") )
MiniSQLParser.cs (157) : string literalVal = match.Groups[4].Value.Trim('\'');
MiniSQLParser.cs (158) : con = new Condition(match.Groups[2].Value, match.Groups[3].Value, literalVal);
MiniSQLParser.cs (159) : }
MiniSQLParser.cs (161) : return new Delete(table,con );
MiniSQLParser.cs (215) : string[] conditions = Regex.Split(condition, @"(=|<|>)");
MiniSQLParser.cs (219) : for (int i = 0; i < conditions.Length; i++)
MiniSQLParser.cs (220) : {
MiniSQLParser.cs (221) : conditions[i] = conditions[i].Trim(' ', '\'');
MiniSQLParser.cs (222) : }
MiniSQLParser.cs (234) : Match m = Regex.Match(column, @"^(\w+)(=)('[^']+')$");
MiniSQLParser.cs (235) : if(m.Success)
MiniSQLParser.cs (236) : {
MiniSQLParser.cs (237) : if (m.Groups[3].Value.StartsWith("'") && m.Groups[3].Value.EndsWith("'"))
MiniSQLParser.cs (239) : String litVal = m.Groups[3].Value.Trim('\'');
MiniSQLParser.cs (240) : value = new SetValue(m.Groups[1].Value, litVal);
MiniSQLParser.cs (244) : else
MiniSQLParser.cs (245) : {
MiniSQLParser.cs (246) : return null;
MiniSQLParser.cs (247) : }
MiniSQLParser.cs (248) : }
Select.cs (18) : Table = table;
Select.cs (19) : Columns = columns;
Select.cs (20) : Where = condition;
Select.cs (27) : if(database.TableByName(Table) == null)
Select.cs (28) : {
Select.cs (29) : return Constants.TableDoesNotExistError;
Select.cs (30) : }
Select.cs (31) : for (int i = 0; i < Columns.Count; i++)
Select.cs (32) : {
Select.cs (33) : if (database.TableByName(Table).ColumnByName(Columns[i]) == null)
Select.cs (34) : {
Select.cs (35) : return Constants.ColumnDoesNotExistError;
Select.cs (36) : }
Select.cs (38) : }
Select.cs (39) : Table tabla = database.Select(Table, Columns, Where);
Select.cs (40) : return tabla.ToString();
SetValue.cs (17) : ColumnName = column;
SetValue.cs (18) : Value = value;
Update.cs (15) : Table = table;
Update.cs (16) : Columns = columnNames;
Update.cs (17) : Where = where;
Update.cs (25) : Table tabla = database.TableByName(Table);
Update.cs (26) : if (tabla == null)
Update.cs (27) : {
Update.cs (28) : return Constants.TableDoesNotExistError;
Update.cs (29) : }
Update.cs (31) : {
Update.cs (32) : if(tabla.ColumnByName(Columns[i].ColumnName) == null)
Update.cs (33) : {
Update.cs (34) : return Constants.ColumnDoesNotExistError;
Update.cs (35) : }
Update.cs (36) : }
Update.cs (37) : database.Update(Table,Columns,Where);
Update.cs (38) : return Constants.UpdateSuccess;
Manager.cs (142) : try
Manager.cs (143) : {
Manager.cs (144) : string path = Path.Combine(Directory.GetCurrentDirectory(), databaseName);
Manager.cs (145) : if (!Directory.Exists(path))
Manager.cs (146) : {
Manager.cs (147) : Directory.CreateDirectory(path);
Manager.cs (148) : }
Manager.cs (149) : string profileFile = Path.Combine(path, "profiles.txt");
Manager.cs (150) : using (StreamWriter writer = new StreamWriter(profileFile))
Manager.cs (151) : {
Manager.cs (152) : foreach (Profile p in Profiles)
Manager.cs (153) : {
Manager.cs (154) : writer.WriteLine(p.Name);
Manager.cs (155) : foreach (User user in p.Users)
Manager.cs (156) : {
Manager.cs (157) : writer.WriteLine($"{user.Username},{user.EncryptedPassword}");
Manager.cs (158) : }
Manager.cs (159) : foreach (string key in p.PrivilegesOn.Keys)
Manager.cs (160) : {
Manager.cs (161) : List<Privilege> privileges = p.PrivilegesOn[key];
Manager.cs (162) : foreach (Privilege priv in privileges)
Manager.cs (163) : {
Manager.cs (164) : writer.WriteLine($"{key},{priv}");
Manager.cs (165) : }
Manager.cs (166) : }
Manager.cs (167) : writer.WriteLine("#");
Manager.cs (168) : }
Manager.cs (169) : }
Manager.cs (170) : }
Manager.cs (171) : catch (Exception e)
Manager.cs (172) : {
Manager.cs (173) : Console.WriteLine("Error saving profiles: " + e.Message);
Manager.cs (174) : }
CreateTableTests.cs (27) : Assert.Null(query);
DeleteTests.cs (6) : using DbManager;
DeleteTests.cs (7) : using DbManager.Parser;
DeleteTests.cs (9) : namespace OurTests
DeleteTests.cs (11) : public class DeleteTests
DeleteTests.cs (13) : [Fact]
DeleteTests.cs (14) : public void SimpleStringCondition()
DeleteTests.cs (15) : {
DeleteTests.cs (16) : Delete query = MiniSQLParser.Parse("DELETE FROM table WHERE nombre='Miguel'") as Delete;
DeleteTests.cs (17) : Assert.NotNull(query);
DeleteTests.cs (18) : Assert.Equal("table", query.Table);
DeleteTests.cs (19) : Assert.Equal("nombre", query.Where.ColumnName);
DeleteTests.cs (20) : Assert.Equal("=",query.Where.Operator);
DeleteTests.cs (21) : Assert.Equal("Miguel", query.Where.LiteralValue);
DeleteTests.cs (23) : Delete query2 = MiniSQLParser.Parse("DELETE FROM table WHERE nombre      =  'Miguel'") as Delete;
DeleteTests.cs (24) : Assert.Null(query2);
DeleteTests.cs (27) : }
DeleteTests.cs (28) : [Fact]
DeleteTests.cs (29) : public void SimpleIntCondition()
DeleteTests.cs (30) : {
DeleteTests.cs (31) : Delete query = MiniSQLParser.Parse("DELETE FROM table WHERE edad>'21'") as Delete;
DeleteTests.cs (32) : Assert.NotNull(query);
DeleteTests.cs (33) : Assert.Equal("table", query.Table);
DeleteTests.cs (34) : Assert.Equal("edad", query.Where.ColumnName);
DeleteTests.cs (35) : Assert.Equal(">", query.Where.Operator);
DeleteTests.cs (36) : Assert.Equal("21", query.Where.LiteralValue);
DeleteTests.cs (38) : Delete query2 = MiniSQLParser.Parse("DELETE FROM table WHERE edad      <  '21'") as Delete;
DeleteTests.cs (39) : Assert.Null(query2);
DeleteTests.cs (41) : }
DeleteTests.cs (42) : [Fact]
DeleteTests.cs (43) : public void SimpleDoubleCondition()
DeleteTests.cs (44) : {
DeleteTests.cs (45) : Delete query = MiniSQLParser.Parse("DELETE FROM table WHERE height>'1.98'") as Delete;
DeleteTests.cs (46) : Assert.NotNull(query);
DeleteTests.cs (47) : Assert.Equal("table", query.Table);
DeleteTests.cs (48) : Assert.Equal("height", query.Where.ColumnName);
DeleteTests.cs (49) : Assert.Equal(">", query.Where.Operator);
DeleteTests.cs (50) : Assert.Equal("1.98", query.Where.LiteralValue);
DeleteTests.cs (52) : Delete query2 = MiniSQLParser.Parse("DELETE FROM table WHERE height      <  '1.50'") as Delete;
DeleteTests.cs (53) : Assert.Null(query2);
DeleteTests.cs (55) : Delete query3 = MiniSQLParser.Parse("DELETE FROM table WHERE height<1.50'") as Delete;
DeleteTests.cs (56) : Assert.Null(query3);
DeleteTests.cs (57) : }
DeleteTests.cs (59) : [Fact]
DeleteTests.cs (60) : public void ExecuteDeleteWithConditions()
DeleteTests.cs (61) : {
DeleteTests.cs (62) : Database db = Database.CreateTestDatabase();
DeleteTests.cs (63) : Delete query = MiniSQLParser.Parse("DELETE FROM TestTable WHERE Height>'1.65'") as Delete;
DeleteTests.cs (64) : Assert.Equal(query.Execute(db), Constants.DeleteSuccess);
DeleteTests.cs (66) : }
DropTableTests.cs (53) : [Fact]
DropTableTests.cs (54) : public void ExecuteDropTable()
DropTableTests.cs (55) : {
DropTableTests.cs (56) : Database db1 = Database.CreateTestDatabase();
DropTableTests.cs (57) : DropTable query = MiniSQLParser.Parse("DROP TABLE table1") as DropTable;
DropTableTests.cs (58) : Assert.Equal(query.Execute(db1), Constants.TableDoesNotExistError);
DropTableTests.cs (60) : DropTable query2 = MiniSQLParser.Parse("DROP TABLE TestTable") as DropTable;
DropTableTests.cs (61) : Assert.Equal(query2.Execute(db1), Constants.DropTableSuccess);
DropTableTests.cs (62) : }
InsertTests.cs (6) : using DbManager;
InsertTests.cs (9) : namespace OurTests
InsertTests.cs (12) : public class InsertTests
InsertTests.cs (13) : {
InsertTests.cs (14) : [Fact]
InsertTests.cs (15) : public void CorrectStringValues()
InsertTests.cs (17) : Insert query = MiniSQLParser.Parse("INSERT INTO table VALUES ('v1','v2','v3')") as Insert;
InsertTests.cs (18) : Assert.NotNull(query);
InsertTests.cs (19) : Assert.Equal("table",query.Table);
InsertTests.cs (20) : Assert.Equal("v1", query.Values[0]);
InsertTests.cs (21) : Assert.Equal("v2", query.Values[1]);
InsertTests.cs (22) : Assert.Equal("v3", query.Values[2]);
InsertTests.cs (24) : Insert query2 = MiniSQLParser.Parse("INSERT INTO Tablita VALUES ('Hola','que','tAl')") as Insert;
InsertTests.cs (25) : Assert.NotNull(query2);
InsertTests.cs (26) : Assert.Equal("Tablita", query2.Table);
InsertTests.cs (27) : Assert.Equal("Hola", query2.Values[0]);
InsertTests.cs (28) : Assert.Equal("que", query2.Values[1]);
InsertTests.cs (29) : Assert.Equal("tAl", query2.Values[2]);
InsertTests.cs (31) : }
InsertTests.cs (32) : [Fact]
InsertTests.cs (33) : public void CorrectWithSpaces()
InsertTests.cs (34) : {
InsertTests.cs (35) : Insert query = MiniSQLParser.Parse("INSERT        INTO  table  VALUES      ('v1','v2','v3')") as Insert;
InsertTests.cs (36) : Assert.NotNull(query);
InsertTests.cs (37) : Assert.Equal("table", query.Table);
InsertTests.cs (38) : Assert.Equal("v1", query.Values[0]);
InsertTests.cs (39) : Assert.Equal("v2", query.Values[1]);
InsertTests.cs (40) : Assert.Equal("v3", query.Values[2]);
InsertTests.cs (42) : Insert query2 = MiniSQLParser.Parse("INSERT    INTO  Tablita    VALUES    ('Hola','que','tAl')") as Insert;
InsertTests.cs (43) : Assert.NotNull(query2);
InsertTests.cs (44) : Assert.Equal("Tablita", query2.Table);
InsertTests.cs (45) : Assert.Equal("Hola", query2.Values[0]);
InsertTests.cs (46) : Assert.Equal("que", query2.Values[1]);
InsertTests.cs (47) : Assert.Equal("tAl", query2.Values[2]);
InsertTests.cs (48) : }
InsertTests.cs (50) : [Fact]
InsertTests.cs (51) : public void CorrectIntValues()
InsertTests.cs (52) : {
InsertTests.cs (53) : Insert query = MiniSQLParser.Parse("INSERT INTO table VALUES ('1','2','3')") as Insert;
InsertTests.cs (54) : Assert.NotNull(query);
InsertTests.cs (55) : Assert.Equal("table", query.Table);
InsertTests.cs (56) : Assert.Equal("1", query.Values[0]);
InsertTests.cs (57) : Assert.Equal("2", query.Values[1]);
InsertTests.cs (58) : Assert.Equal("3", query.Values[2]);
InsertTests.cs (59) : }
InsertTests.cs (61) : [Fact]
InsertTests.cs (62) : public void IncorrectSpacesOrMissingCommas()
InsertTests.cs (63) : {
InsertTests.cs (64) : Insert query = MiniSQLParser.Parse("INSERT INTO table VALUES (1','2','3')") as Insert;
InsertTests.cs (65) : Assert.Null(query);
InsertTests.cs (67) : query = MiniSQLParser.Parse("INSERT INTO table VALUES ('1','2'    ,'3')") as Insert;
InsertTests.cs (68) : Assert.Null(query);
InsertTests.cs (70) : query = MiniSQLParser.Parse("INSERT INTO table VALUES ('12', '3')") as Insert;
InsertTests.cs (71) : Assert.Null(query);
InsertTests.cs (72) : }
SelectTests.cs (7) : using DbManager;
SelectTests.cs (9) : namespace OurTests
SelectTests.cs (11) : public class SelectTests
SelectTests.cs (13) : [Fact]
SelectTests.cs (14) : public void SelectWithSingleColumn()
SelectTests.cs (15) : {
SelectTests.cs (16) : Select query = MiniSQLParser.Parse("SELECT edad FROM table WHERE nombre='Miguel'") as Select;
SelectTests.cs (17) : Assert.NotNull(query);
SelectTests.cs (18) : Assert.Equal("table", query.Table);
SelectTests.cs (19) : Assert.Equal("nombre", query.Where.ColumnName);
SelectTests.cs (20) : Assert.Equal("=", query.Where.Operator);
SelectTests.cs (21) : Assert.Equal("Miguel", query.Where.LiteralValue);
SelectTests.cs (22) : Assert.Equal("edad", query.Columns[0]);
SelectTests.cs (23) : }
SelectTests.cs (24) : [Fact]
SelectTests.cs (25) : public void SelectWithMultipleColumn()
SelectTests.cs (26) : {
SelectTests.cs (27) : Select query = MiniSQLParser.Parse("SELECT edad,altura FROM table WHERE nombre='Miguel'") as Select;
SelectTests.cs (28) : Assert.NotNull(query);
SelectTests.cs (29) : Assert.Equal("table", query.Table);
SelectTests.cs (30) : Assert.Equal("nombre", query.Where.ColumnName);
SelectTests.cs (31) : Assert.Equal("=", query.Where.Operator);
SelectTests.cs (32) : Assert.Equal("Miguel", query.Where.LiteralValue);
SelectTests.cs (33) : Assert.Equal("edad", query.Columns[0]);
SelectTests.cs (34) : Assert.Equal("altura", query.Columns[1]);
SelectTests.cs (36) : Select query2 = MiniSQLParser.Parse("SELECT edad,altura FROM table") as Select;
SelectTests.cs (37) : Assert.NotNull(query2);
SelectTests.cs (38) : Assert.Equal("table", query2.Table);
SelectTests.cs (39) : Assert.Equal("edad", query2.Columns[0]);
SelectTests.cs (40) : Assert.Equal("altura", query2.Columns[1]);
SelectTests.cs (42) : }
SelectTests.cs (44) : [Fact]
SelectTests.cs (45) : public void SelectWithSingleColumnMultipleSpaces()
SelectTests.cs (46) : {
SelectTests.cs (47) : Select query = MiniSQLParser.Parse("SELECT edad      FROM    table          WHERE    nombre='Miguel'") as Select;
SelectTests.cs (48) : Assert.NotNull(query);
SelectTests.cs (49) : Assert.Equal("table", query.Table);
SelectTests.cs (50) : Assert.Equal("nombre", query.Where.ColumnName);
SelectTests.cs (51) : Assert.Equal("=", query.Where.Operator);
SelectTests.cs (52) : Assert.Equal("Miguel", query.Where.LiteralValue);
SelectTests.cs (53) : Assert.Equal("edad", query.Columns[0]);
SelectTests.cs (55) : }
SelectTests.cs (57) : [Fact]
SelectTests.cs (58) : public void SelectWithMultipleColumnSpaces()
SelectTests.cs (59) : {
SelectTests.cs (60) : Select query = MiniSQLParser.Parse("SELECT edad,altura      FROM    table          WHERE    nombre='Miguel'") as Select;
SelectTests.cs (61) : Assert.NotNull(query);
SelectTests.cs (62) : Assert.Equal("table", query.Table);
SelectTests.cs (63) : Assert.Equal("nombre", query.Where.ColumnName);
SelectTests.cs (64) : Assert.Equal("=", query.Where.Operator);
SelectTests.cs (65) : Assert.Equal("Miguel", query.Where.LiteralValue);
SelectTests.cs (66) : Assert.Equal("edad", query.Columns[0]);
SelectTests.cs (67) : Assert.Equal("altura", query.Columns[1]);
SelectTests.cs (68) : }
SelectTests.cs (70) : [Fact]
SelectTests.cs (71) : public void IncorrectSelectWithTextAfter()
SelectTests.cs (72) : {
SelectTests.cs (73) : Select query = MiniSQLParser.Parse("SELECT edad,altura FROM table WHERE nombre='Miguel' sdaasad") as Select;
SelectTests.cs (74) : Assert.Null(query);
SelectTests.cs (75) : }
UpdateTests.cs (9) : namespace OurTests
UpdateTests.cs (21) : Assert.Null(query);
UpdateTests.cs (23) : Update query2 = MiniSQLParser.Parse("UPDATE table SET nombre='Ana',edad='20' WHERE nombre='Miguel'") as Update;
