Total written by this student: 21% lines / 17% characters

ColumnDefinition.cs (28) : return value.Replace(Delimiter, DelimiterEncoded);
ColumnDefinition.cs (34) : return value.Replace(DelimiterEncoded, Delimiter);
ColumnDefinition.cs (40) : string result = null;
ColumnDefinition.cs (41) : if (Name != null)
ColumnDefinition.cs (42) : {
ColumnDefinition.cs (43) : if (Type == DataType.String)
ColumnDefinition.cs (44) : {
ColumnDefinition.cs (45) : result = Name + Delimiter + "String";
ColumnDefinition.cs (46) : }
ColumnDefinition.cs (47) : if (Type == DataType.Int)
ColumnDefinition.cs (48) : {
ColumnDefinition.cs (49) : result = Name + Delimiter + "Int";
ColumnDefinition.cs (50) : }
ColumnDefinition.cs (51) : if (Type == DataType.Double)
ColumnDefinition.cs (52) : {
ColumnDefinition.cs (53) : result = Name + Delimiter + "Double";
ColumnDefinition.cs (54) : }
ColumnDefinition.cs (55) : }
ColumnDefinition.cs (56) : return Encode(result);
ColumnDefinition.cs (62) : string[] nameThenType = Decode(value).Split(Delimiter);
ColumnDefinition.cs (64) : if (nameThenType.Length != 0)
ColumnDefinition.cs (65) : {
ColumnDefinition.cs (66) : if (nameThenType[1] == "String")
ColumnDefinition.cs (67) : {
ColumnDefinition.cs (68) : return new ColumnDefinition(DataType.String, nameThenType[0]);
ColumnDefinition.cs (69) : }
ColumnDefinition.cs (70) : if (nameThenType[1] == "Int")
ColumnDefinition.cs (71) : {
ColumnDefinition.cs (72) : return new ColumnDefinition(DataType.Int, nameThenType[0]);
ColumnDefinition.cs (73) : }
ColumnDefinition.cs (74) : if (nameThenType[1] == "Double")
ColumnDefinition.cs (75) : {
ColumnDefinition.cs (76) : return new ColumnDefinition(DataType.Double, nameThenType[0]);
ColumnDefinition.cs (77) : }
ColumnDefinition.cs (78) : }
Condition.cs (5) : using System.Windows.Markup;
Condition.cs (19) : ColumnName = column;
Condition.cs (20) : Operator = op;
Condition.cs (21) : LiteralValue = literalValue;
Condition.cs (34) : /* Possible operators:
Condition.cs (35) : * "="
Condition.cs (36) : * "!="
Condition.cs (37) : * "<"
Condition.cs (38) : * "<="
Condition.cs (39) : * ">"
Condition.cs (40) : * ">="
Condition.cs (41) : */
Condition.cs (43) : if (value == null) return false;
Condition.cs (45) : switch (type)
Condition.cs (46) : {
Condition.cs (47) : case ColumnDefinition.DataType.Int :
Condition.cs (48) : int literalValueInt = int.Parse(LiteralValue);
Condition.cs (49) : int valueInt = int.Parse(value);
Condition.cs (51) : if (Operator == Constants.Equal)
Condition.cs (52) : {
Condition.cs (53) : return valueInt == literalValueInt;
Condition.cs (54) : }
Condition.cs (55) : else if (Operator == Constants.NotEqual)
Condition.cs (56) : {
Condition.cs (57) : return valueInt != literalValueInt;
Condition.cs (58) : }
Condition.cs (59) : else if (Operator == Constants.Less)
Condition.cs (60) : {
Condition.cs (61) : return valueInt < literalValueInt;
Condition.cs (62) : }
Condition.cs (63) : else if (Operator == Constants.LessOrEqual)
Condition.cs (64) : {
Condition.cs (65) : return valueInt <= literalValueInt;
Condition.cs (66) : }
Condition.cs (67) : else if (Operator == Constants.Greater)
Condition.cs (68) : {
Condition.cs (69) : return valueInt > literalValueInt;
Condition.cs (70) : }
Condition.cs (71) : else if (Operator == Constants.GreaterOrEqual)
Condition.cs (72) : {
Condition.cs (73) : return valueInt >= literalValueInt;
Condition.cs (74) : }
Condition.cs (75) : break;
Condition.cs (77) : case ColumnDefinition.DataType.Double :
Condition.cs (78) : double literalValueDouble = double.Parse(LiteralValue);
Condition.cs (79) : double valueDouble = double.Parse(value);
Condition.cs (81) : if (Operator == Constants.Equal)
Condition.cs (82) : {
Condition.cs (83) : return valueDouble == literalValueDouble;
Condition.cs (84) : }
Condition.cs (85) : else if (Operator == Constants.NotEqual)
Condition.cs (86) : {
Condition.cs (87) : return valueDouble != literalValueDouble;
Condition.cs (88) : }
Condition.cs (89) : else if (Operator == Constants.Less)
Condition.cs (90) : {
Condition.cs (91) : return valueDouble < literalValueDouble;
Condition.cs (92) : }
Condition.cs (93) : else if (Operator == Constants.LessOrEqual)
Condition.cs (94) : {
Condition.cs (95) : return valueDouble <= literalValueDouble;
Condition.cs (96) : }
Condition.cs (97) : else if (Operator == Constants.Greater)
Condition.cs (98) : {
Condition.cs (99) : return valueDouble > literalValueDouble;
Condition.cs (100) : }
Condition.cs (101) : else if (Operator == Constants.GreaterOrEqual)
Condition.cs (102) : {
Condition.cs (103) : return valueDouble >= literalValueDouble;
Condition.cs (104) : }
Condition.cs (105) : break;
Condition.cs (107) : case ColumnDefinition.DataType.String :
Condition.cs (109) : if (Operator == Constants.Equal)
Condition.cs (110) : {
Condition.cs (111) : return value.CompareTo(LiteralValue) == 0;
Condition.cs (112) : }
Condition.cs (113) : else if (Operator == Constants.NotEqual)
Condition.cs (114) : {
Condition.cs (115) : return value.CompareTo(LiteralValue) != 0;
Condition.cs (116) : }
Condition.cs (117) : else if (Operator == Constants.Less)
Condition.cs (118) : {
Condition.cs (119) : return value.CompareTo(LiteralValue) < 0;
Condition.cs (120) : }
Condition.cs (121) : else if (Operator == Constants.LessOrEqual)
Condition.cs (122) : {
Condition.cs (123) : return value.CompareTo(LiteralValue) <= 0;
Condition.cs (124) : }
Condition.cs (125) : else if (Operator == Constants.Greater)
Condition.cs (126) : {
Condition.cs (127) : return value.CompareTo(LiteralValue) > 0;
Condition.cs (128) : }
Condition.cs (129) : else if (Operator == Constants.GreaterOrEqual)
Condition.cs (130) : {
Condition.cs (131) : return value.CompareTo(LiteralValue) >= 0;
Condition.cs (132) : }
Condition.cs (133) : break;
Condition.cs (134) : }
Constants.cs (41) : //Strings to reuse in the code.
Constants.cs (42) : //Referring to types:
Constants.cs (43) : public const string TypeIntUpper = "INT";
Constants.cs (44) : public const string TypeIntLower = "Int";
Constants.cs (45) : public const string TypeDoubleUpper = "DOUBLE";
Constants.cs (46) : public const string TypeDoubleLower = "Double";
Constants.cs (47) : public const string TypeStringUpper = "STRING";
Constants.cs (48) : public const string TypeStringLower = "String";
Constants.cs (49) : public const string TypeTextUpper = "TEXT";
Constants.cs (50) : public const string TypeTextLower = "Text";
Constants.cs (52) : //Operators:
Constants.cs (53) : public const string Equal = "=";
Constants.cs (54) : public const string NotEqual = "!=";
Constants.cs (55) : public const string Less = "<";
Constants.cs (56) : public const string LessOrEqual = "<=";
Constants.cs (57) : public const string Greater = ">";
Constants.cs (58) : public const string GreaterOrEqual = ">=";
Database.cs (207) : private const string TableFileExtension = ".txt";
Database.cs (212) : string databasePath = Directory.GetCurrentDirectory() + Path.DirectorySeparatorChar.ToString() + databaseName;
Database.cs (214) : if (Directory.Exists(databasePath))
Database.cs (215) : {
Database.cs (216) : LastErrorMessage = Constants.Error + "Database already exists.";
Database.cs (218) : }
Database.cs (219) : else
Database.cs (220) : {
Database.cs (221) : Directory.CreateDirectory(databasePath);
Database.cs (222) : foreach (Table table in Tables)
Database.cs (223) : {
Database.cs (224) : string tablePath = databasePath + Path.DirectorySeparatorChar.ToString() + table.Name + TableFileExtension;
Database.cs (225) : string textToSave = null;
Database.cs (226) : for (int i = 0; i < table.NumColumns(); i++)
Database.cs (227) : {
Database.cs (228) : textToSave = textToSave + table.GetColumn(i).AsText() + "\n";
Database.cs (229) : }
Database.cs (230) : for (int i = 0; i < table.NumRows(); i++)
Database.cs (231) : {
Database.cs (232) : textToSave = textToSave + table.GetRow(i).AsText() + "\n";
Database.cs (233) : }
Database.cs (234) : File.WriteAllText(tablePath, textToSave);
Database.cs (235) : }
Database.cs (236) : return true;
Database.cs (244) : string databasePath = Directory.GetCurrentDirectory() + Path.DirectorySeparatorChar.ToString() + databaseName;
Database.cs (246) : if (!Directory.Exists(databasePath))
Database.cs (247) : {
Database.cs (250) : else
Database.cs (251) : {
Database.cs (252) : Database loadedDatabase = new Database();
Database.cs (253) : foreach (string filePath in Directory.GetFiles(databasePath))
Database.cs (254) : {
Database.cs (255) : string fileName = Path.GetFileNameWithoutExtension(filePath);
Database.cs (256) : string[] fileText = File.ReadAllLines(filePath);
Database.cs (258) : List<ColumnDefinition> columns = new List<ColumnDefinition>();
Database.cs (259) : for (int i = 0; i < fileText.Length; i++)
Database.cs (260) : {
Database.cs (261) : if (fileText[i].Contains("[ARROW]"))
Database.cs (262) : {
Database.cs (263) : columns.Add(ColumnDefinition.Parse(fileText[i]));
Database.cs (264) : }
Database.cs (265) : }
Database.cs (266) : loadedDatabase.CreateTable(fileName, columns);
Database.cs (267) : Table loadedTable = loadedDatabase.TableByName(fileName);
Database.cs (269) : for (int i = 0; i < fileText.Length; i++)
Database.cs (270) : {
Database.cs (271) : if (fileText[i].Contains("[SEPARATOR]"))
Database.cs (272) : {
Database.cs (273) : loadedTable.AddRow(Row.Parse(columns, fileText[i]));
Database.cs (274) : }
Database.cs (275) : }
Database.cs (276) : }
Database.cs (277) : return loadedDatabase;
Database.cs (278) : }
Database.cs (279) : }
Row.cs (26) : int i = ColumnDefinitions.FindIndex(c => c.Name.Equals(columnName));
Row.cs (27) : if (i >= 0)
Row.cs (28) : {
Row.cs (29) : if (i < Values.Count)
Row.cs (30) : {
Row.cs (31) : Values[i] = value;
Row.cs (32) : }
Row.cs (33) : else
Row.cs (34) : {
Row.cs (35) : //In case the list isn't long enough, we have to add a blank space before adding the value.
Row.cs (36) : while (Values.Count <= i)
Row.cs (37) : {
Row.cs (38) : Values.Add(null);
Row.cs (39) : }
Row.cs (40) : Values[i] = value;
Row.cs (41) : }
Row.cs (42) : }
Row.cs (50) : int i = ColumnDefinitions.FindIndex(c => c.Name == columnName);
Row.cs (51) : if (i >= 0 && i < Values.Count)
Row.cs (52) : {
Row.cs (53) : return Values[i];
Row.cs (54) : }
Row.cs (64) : string value = GetValue(condition.ColumnName);
Row.cs (65) : if (value == null) return false;
Row.cs (67) : ColumnDefinition column = ColumnDefinitions.Find(c => c.Name == condition.ColumnName);
Row.cs (68) : if (column == null) return false;
Row.cs (70) : return condition.IsTrue(value, column.Type);
Row.cs (73) : private const string Delimiter = "$";
Row.cs (80) : return value.Replace(Delimiter, DelimiterEncoded);
Row.cs (87) : return value.Replace(DelimiterEncoded, Delimiter);
Row.cs (94) : string result = null;
Row.cs (95) : int i = 0;
Row.cs (96) : if (Values.Count > 0)
Row.cs (97) : {
Row.cs (98) : while (i < Values.Count)
Row.cs (99) : {
Row.cs (100) : if (result != null)
Row.cs (101) : {
Row.cs (102) : result = result + Delimiter;
Row.cs (103) : }
Row.cs (104) : result = result + Values[i];
Row.cs (105) : i++;
Row.cs (106) : }
Row.cs (107) : }
Row.cs (109) : return Encode(result);
Row.cs (116) : List<String> values = Decode(value).Split(Delimiter).ToList();
Row.cs (118) : return new Row(columns, values);
ColumnDefinitionTests.cs (1) : using DbManager;
ColumnDefinitionTests.cs (6) : //TODO DEADLINE 1A : Create your own tests for ColumnDefinitions
ColumnDefinitionTests.cs (8) : [Fact]
ColumnDefinitionTests.cs (9) : public void TestAsText()
ColumnDefinitionTests.cs (10) : {
ColumnDefinitionTests.cs (11) : ColumnDefinition column1 = new ColumnDefinition(ColumnDefinition.DataType.String, "Name");
ColumnDefinitionTests.cs (12) : Assert.Equal("Name[ARROW]String", column1.AsText());
ColumnDefinitionTests.cs (14) : ColumnDefinition column2 = new ColumnDefinition(ColumnDefinition.DataType.Int, "Age");
ColumnDefinitionTests.cs (15) : Assert.Equal("Age[ARROW]Int", column2.AsText());
ColumnDefinitionTests.cs (17) : ColumnDefinition column3 = new ColumnDefinition(ColumnDefinition.DataType.Double, "Price");
ColumnDefinitionTests.cs (18) : Assert.Equal("Price[ARROW]Double", column3.AsText());
ColumnDefinitionTests.cs (19) : }
ColumnDefinitionTests.cs (22) : public void TestParse()
ColumnDefinitionTests.cs (24) : ColumnDefinition expectedColumn = new ColumnDefinition(ColumnDefinition.DataType.String, "Address");
ColumnDefinitionTests.cs (25) : string input = "Address[ARROW]String";
ColumnDefinitionTests.cs (26) : ColumnDefinition resultColumn = ColumnDefinition.Parse(input);
ColumnDefinitionTests.cs (28) : Assert.Equal(expectedColumn.Name, resultColumn.Name);
ColumnDefinitionTests.cs (29) : Assert.Equal(expectedColumn.Type, resultColumn.Type);
ConditionTests.cs (1) : using DbManager;
ConditionTests.cs (10) : public void TestIntCondition()
ConditionTests.cs (12) : Condition condition1 = new Condition("Age", ">", "18");
ConditionTests.cs (13) : Assert.True(condition1.IsTrue("19", ColumnDefinition.DataType.Int));
ConditionTests.cs (14) : Assert.False(condition1.IsTrue("10", ColumnDefinition.DataType.Int));
ConditionTests.cs (16) : Condition condition2 = new Condition("Salary", "!=", "2000");
ConditionTests.cs (17) : Assert.True(condition2.IsTrue("1500", ColumnDefinition.DataType.Int));
ConditionTests.cs (18) : Assert.False(condition2.IsTrue("2000", ColumnDefinition.DataType.Int));
ConditionTests.cs (19) : }
ConditionTests.cs (21) : [Fact]
ConditionTests.cs (22) : public void TestDoubleCondition()
ConditionTests.cs (23) : {
ConditionTests.cs (24) : Condition condition = new Condition("Price", "<=", "29.99");
ConditionTests.cs (25) : Assert.True(condition.IsTrue("29.99", ColumnDefinition.DataType.Double));
ConditionTests.cs (26) : Assert.False(condition.IsTrue("30.00", ColumnDefinition.DataType.Double));
ConditionTests.cs (27) : }
ConditionTests.cs (29) : [Fact]
ConditionTests.cs (30) : public void TestStringCondition()
ConditionTests.cs (31) : {
ConditionTests.cs (32) : Condition condition1 = new Condition("Name", "<", "Pablo");
ConditionTests.cs (33) : Assert.True(condition1.IsTrue("Ander", ColumnDefinition.DataType.String));
ConditionTests.cs (34) : Assert.False(condition1.IsTrue("Saioa", ColumnDefinition.DataType.String));
ConditionTests.cs (36) : Condition condition2 = new Condition("Age", ">", "10");
ConditionTests.cs (37) : Assert.True(condition2.IsTrue("9", ColumnDefinition.DataType.String));
ConditionTests.cs (39) : Condition condition3 = new Condition("Age", "=", "10");
ConditionTests.cs (40) : Assert.True(condition3.IsTrue("10", ColumnDefinition.DataType.String));
ConditionTests.cs (41) : Assert.False(condition3.IsTrue("91", ColumnDefinition.DataType.String));
DatabaseTests.cs (3) : using NuGet.Frameworks;
DatabaseTests.cs (7) : public class DatabaseTests
DatabaseTests.cs (96) : [Fact]
DatabaseTests.cs (97) : public void TestSave()
DatabaseTests.cs (98) : {
DatabaseTests.cs (99) : Database db = Database.CreateTestDatabase();
DatabaseTests.cs (101) : bool dbSaved = db.Save("TestDatabase");
DatabaseTests.cs (102) : Assert.True(dbSaved);
DatabaseTests.cs (104) : string dbPath = Directory.GetCurrentDirectory() + Path.DirectorySeparatorChar.ToString() + "TestDatabase";
DatabaseTests.cs (105) : Assert.True(Directory.Exists(dbPath));
DatabaseTests.cs (107) : string filePath = dbPath + Path.DirectorySeparatorChar.ToString() + "TestTable.txt";
DatabaseTests.cs (108) : Assert.True(File.Exists(filePath));
DatabaseTests.cs (110) : //Cleanup (comment this part if you want to keep the files, but only can be tested once if files not deleted manually)
DatabaseTests.cs (111) : File.Delete(filePath);
DatabaseTests.cs (112) : Directory.Delete(dbPath);
DatabaseTests.cs (113) : }
DatabaseTests.cs (115) : [Fact]
DatabaseTests.cs (116) : public void TestLoad()
DatabaseTests.cs (117) : {
DatabaseTests.cs (118) : //Test for non existent databases.
DatabaseTests.cs (119) : Database notWorkingDb = Database.Load("NonExistentDatabase", "admin", "adminPassword");
DatabaseTests.cs (120) : Assert.Null(notWorkingDb);
DatabaseTests.cs (122) : //Test for existent databases.
DatabaseTests.cs (123) : Database db = Database.CreateTestDatabase();
DatabaseTests.cs (124) : db.Save("TestDatabase");
DatabaseTests.cs (126) : Database dbLoaded = Database.Load("TestDatabase", "admin", "adminPassword");
DatabaseTests.cs (128) : Assert.NotNull(dbLoaded);
DatabaseTests.cs (129) : Table testTable = dbLoaded.TableByName("TestTable");
DatabaseTests.cs (130) : Assert.NotNull(testTable);
DatabaseTests.cs (132) : Assert.Equal("Name", testTable.GetColumn(0).Name);
DatabaseTests.cs (133) : Assert.Equal("67", testTable.GetRow(1).GetValue("Age"));
DatabaseTests.cs (134) : Assert.Equal("Pepe", testTable.GetRow(2).GetValue("Name"));
DatabaseTests.cs (136) : Assert.Equal(3, testTable.NumColumns());
DatabaseTests.cs (137) : Assert.Equal(3, testTable.NumRows());
DatabaseTests.cs (139) : //Cleanup
DatabaseTests.cs (140) : string dbPath = Directory.GetCurrentDirectory() + Path.DirectorySeparatorChar.ToString() + "TestDatabase";
DatabaseTests.cs (141) : string filePath = dbPath + Path.DirectorySeparatorChar.ToString() + "TestTable.txt";
DatabaseTests.cs (142) : File.Delete(filePath);
DatabaseTests.cs (143) : Directory.Delete(dbPath);
DatabaseTests.cs (144) : }
RowTests.cs (16) : List<String> values = new List<String>() { "Juan", "14" };
RowTests.cs (19) : row.SetValue("Name", "Ramiro");
RowTests.cs (22) : Assert.Equal("Ramiro", row.GetValue("Name"));
RowTests.cs (26) : [Fact]
RowTests.cs (27) : public void TestIsTrue()
RowTests.cs (28) : {
RowTests.cs (29) : List<ColumnDefinition> columns = new List<ColumnDefinition>()
RowTests.cs (30) : {
RowTests.cs (31) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
RowTests.cs (32) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name")
RowTests.cs (33) : };
RowTests.cs (34) : List<String> values = new List<string>() { "20", "Pepe" };
RowTests.cs (36) : Row row = new Row(columns, values);
RowTests.cs (38) : Condition condition1 = new Condition("Age", ">", "18");
RowTests.cs (39) : Condition condition2 = new Condition("Age", "<", "18");
RowTests.cs (40) : Condition condition3 = new Condition("Name", "=", "Pepe");
RowTests.cs (42) : Assert.True(row.IsTrue(condition1));
RowTests.cs (43) : Assert.False(row.IsTrue(condition2));
RowTests.cs (44) : Assert.True(row.IsTrue(condition3));
RowTests.cs (45) : }
RowTests.cs (47) : [Fact]
RowTests.cs (48) : public void TestAsText()
RowTests.cs (49) : {
RowTests.cs (50) : List<ColumnDefinition> columns = new List<ColumnDefinition>()
RowTests.cs (51) : {
RowTests.cs (52) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
RowTests.cs (53) : new ColumnDefinition(ColumnDefinition.DataType.String, "Age")
RowTests.cs (54) : };
RowTests.cs (55) : List<String> values = new List<String>() { "Juan", "24" };
RowTests.cs (56) : Row row = new Row(columns, values);
RowTests.cs (58) : Assert.Equal("Juan[SEPARATOR]24", row.AsText());
RowTests.cs (59) : }
RowTests.cs (61) : [Fact]
RowTests.cs (62) : public void TestParse()
RowTests.cs (63) : {
RowTests.cs (64) : List<ColumnDefinition> columns = new List<ColumnDefinition>()
RowTests.cs (65) : {
RowTests.cs (66) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
RowTests.cs (67) : new ColumnDefinition(ColumnDefinition.DataType.String, "Age")
RowTests.cs (68) : };
RowTests.cs (69) : List<String> values = new List<String>() { "Juan", "24" };
RowTests.cs (70) : Row expectedRow = new Row(columns, values);
RowTests.cs (72) : string value = "Juan[SEPARATOR]24";
RowTests.cs (73) : Row resultRow = Row.Parse(columns, value);
RowTests.cs (75) : Assert.Equal("Juan", resultRow.GetValue("Name"));
RowTests.cs (76) : Assert.Equal("24", resultRow.GetValue("Age"));
RowTests.cs (77) : }
TableTests.cs (28) : List<string> values = new List<string>();
TableTests.cs (29) : List<string> values2 = new List<string>();
TableTests.cs (30) : List<string> values3 = new List<string>();
TableTests.cs (36) : Row row2 = new Row(columns, values2);
TableTests.cs (40) : Row row3 = new Row(columns2, values3);
TableTests.cs (142) : [Fact]
TableTests.cs (215) : [Fact]
DataTypeUtils.cs (13) : if (typeName == Constants.TypeIntUpper)
DataTypeUtils.cs (15) : else if (typeName == Constants.TypeDoubleUpper)
DataTypeUtils.cs (17) : else if (typeName == Constants.TypeTextUpper)
DataTypeUtils.cs (24) : if (typeName == Constants.TypeIntLower)
DataTypeUtils.cs (26) : else if (typeName == Constants.TypeDoubleLower)
DataTypeUtils.cs (28) : else if (typeName == Constants.TypeStringLower)
