Constants.cs (31) : public const string UserDoesNotExistError = Error + "User does not exist";
Database.cs (5) : using System.Data.Common;
Database.cs (238) : //Crear directorio para la base de datos. dentro de esto crear carpeta por cada tabla.
Database.cs (239) : // primera fila columnas, siguientes filas cada una una row.
Database.cs (242) : string databasePath = Path.Combine(Directory.GetCurrentDirectory(), databaseName);
Database.cs (244) : if (!Directory.Exists(databasePath))
Database.cs (245) : {
Database.cs (246) : Directory.CreateDirectory(databasePath);
Database.cs (247) : }
Database.cs (249) : foreach(Table table in Tables)
Database.cs (250) : {
Database.cs (251) : string tablePath = Path.Combine(databasePath, table.Name + TableFileExtension);
Database.cs (252) : TextWriter writer = null;
Database.cs (253) : try
Database.cs (254) : {
Database.cs (255) : writer = File.CreateText(tablePath);
Database.cs (256) : List<String> columns = new List<String>();
Database.cs (257) : for(int i = 0; i < table.NumColumns();i++)
Database.cs (258) : {
Database.cs (259) : if(table.GetColumn(i).Type == ColumnDefinition.DataType.String)
Database.cs (260) : {
Database.cs (261) : columns.Add("S)" + table.GetColumn(i).Name);
Database.cs (262) : }
Database.cs (263) : if (table.GetColumn(i).Type == ColumnDefinition.DataType.Int)
Database.cs (264) : {
Database.cs (265) : columns.Add("I)" + table.GetColumn(i).Name);
Database.cs (266) : }
Database.cs (267) : if (table.GetColumn(i).Type == ColumnDefinition.DataType.Double)
Database.cs (268) : {
Database.cs (269) : columns.Add("D)" + table.GetColumn(i).Name);
Database.cs (270) : }
Database.cs (271) : }
Database.cs (273) : for(int i = 0; i < columns.Count; i++)
Database.cs (274) : {
Database.cs (275) : writer.Write(columns[i]);
Database.cs (276) : if(i != columns.Count - 1)
Database.cs (277) : {
Database.cs (278) : writer.Write(",");
Database.cs (279) : }
Database.cs (280) : }
Database.cs (281) : writer.WriteLine();
Database.cs (283) : for (int i = 0; i < table.NumRows(); i++)
Database.cs (284) : {
Database.cs (285) : String row = table.GetRow(i).AsText();
Database.cs (286) : writer.WriteLine(row);
Database.cs (287) : }
Database.cs (288) : }
Database.cs (289) : finally
Database.cs (290) : {
Database.cs (291) : if(writer != null)
Database.cs (292) : {
Database.cs (293) : writer.Close();
Database.cs (294) : }
Database.cs (295) : }
Database.cs (296) : }
Database.cs (297) : SecurityManager.Save(databaseName);
Database.cs (298) : return true;
Database.cs (299) : }
Database.cs (300) : catch (Exception ex)
Database.cs (301) : {
Database.cs (302) : LastErrorMessage = Constants.Error + ": " + ex.Message;
Database.cs (303) : return false;
Database.cs (304) : }
Database.cs (312) : //Solo est�n las columnas, faltan row (default todas tupo String)
Database.cs (313) : //Idea: en save en cada columnas poner antes de cada columna su Type(S, I, D), luego aqui mirarlo y con ifs elegir como ser� cada columna
Database.cs (315) : try {
Database.cs (316) : String databasePath = Path.Combine(Directory.GetCurrentDirectory(), databaseName);
Database.cs (318) : if(!Directory.Exists(databasePath))
Database.cs (319) : {
Database.cs (320) : return null;
Database.cs (321) : }
Database.cs (323) : Database database = new Database();
Database.cs (324) : foreach(String tablePath in Directory.GetFiles(databasePath))
Database.cs (325) : {
Database.cs (326) : string tableName1 = Path.GetFileName(tablePath);
Database.cs (327) : string tableName = tableName1.Substring(0, tableName1.Length - 4);
Database.cs (328) : List<ColumnDefinition> columns = new List<ColumnDefinition>();
Database.cs (329) : List<Row> rows= new List<Row>();
Database.cs (331) : TextReader reader = null;
Database.cs (332) : try
Database.cs (333) : {
Database.cs (334) : reader = File.OpenText(tablePath);
Database.cs (335) : string column = reader.ReadLine();
Database.cs (336) : if(column == null)
Database.cs (337) : {
Database.cs (338) : continue;
Database.cs (339) : }
Database.cs (341) : string[] columnNames = column.Split(",");
Database.cs (342) : foreach(String columnName in columnNames)
Database.cs (343) : {
Database.cs (344) : string[] columnPart = columnName.Split(")");
Database.cs (345) : if (columnPart[0] == "S") //S, Name
Database.cs (346) : {
Database.cs (347) : ColumnDefinition column1 = new ColumnDefinition(ColumnDefinition.DataType.String, columnPart[1]);
Database.cs (348) : columns.Add(column1);
Database.cs (349) : }
Database.cs (350) : if (columnPart[0] == "I") //I, Age
Database.cs (351) : {
Database.cs (352) : ColumnDefinition column1 = new ColumnDefinition(ColumnDefinition.DataType.Int, columnPart[1]);
Database.cs (353) : columns.Add(column1);
Database.cs (354) : }
Database.cs (355) : if (columnPart[0] == "D") //D, Height
Database.cs (356) : {
Database.cs (357) : ColumnDefinition column1 = new ColumnDefinition(ColumnDefinition.DataType.Double, columnPart[1]);
Database.cs (358) : columns.Add(column1);
Database.cs (359) : }
Database.cs (360) : }
Database.cs (362) : string rowLine;
Database.cs (363) : while((rowLine = reader.ReadLine()) != null)
Database.cs (364) : {
Database.cs (365) : Row parsedRow = Row.Parse(columns, rowLine);
Database.cs (366) : if(parsedRow != null)
Database.cs (367) : {
Database.cs (368) : rows.Add(parsedRow);
Database.cs (369) : }
Database.cs (370) : }
Database.cs (371) : }
Database.cs (372) : finally
Database.cs (373) : {
Database.cs (374) : if(reader != null)
Database.cs (375) : {
Database.cs (376) : reader.Close();
Database.cs (377) : }
Database.cs (378) : }
Database.cs (380) : Table table = new Table(tableName, columns);
Database.cs (381) : foreach(Row row in rows)
Database.cs (382) : {
Database.cs (383) : table.AddRow(row);
Database.cs (384) : }
Database.cs (385) : database.AddTable(table);
Database.cs (386) : }
Database.cs (387) : database.SecurityManager = Manager.Load(databaseName, username);
Database.cs (388) : return database;
Database.cs (389) : }
Database.cs (390) : catch (Exception ex)
Database.cs (391) : {
Database.cs (392) : Console.WriteLine(Constants.Error + ": " + ex.Message);
Database.cs (396) : }
Row.cs (128) : result += Encode(s);
Table.cs (133) : if (NumColumns() == j + 1)
Table.cs (179) : result.Sort((a, b) => b.CompareTo(a));
Table.cs (190) : List<ColumnDefinition> selectedColumns = new List<ColumnDefinition>();
Table.cs (193) : ColumnDefinition column = ColumnByName(columnName);
Table.cs (194) : if (column != null)
Table.cs (195) : {
Table.cs (196) : selectedColumns.Add(column);
Table.cs (197) : }
Table.cs (198) : }
Table.cs (200) : Table Result = new Table("Result", selectedColumns);
Table.cs (203) : if(condition == null || r.IsTrue(condition))
Table.cs (205) : List<String> values = new List<String>();
Table.cs (206) : foreach (string columnName in columnNames)
Table.cs (208) : string value = r.GetValue(columnName);
Table.cs (209) : values.Add(value);
Table.cs (211) : Result.Insert(values);
DatabaseTests.cs (156) : [Fact]
DatabaseTests.cs (157) : public void TestSaveAndLoad()
DatabaseTests.cs (158) : {
DatabaseTests.cs (159) : Database DB = Database.CreateTestDatabase();
DatabaseTests.cs (160) : DB.Save("TestDB");
DatabaseTests.cs (161) : Database loadedDB = Database.Load("TestDB", "admin", "password");
DatabaseTests.cs (162) : Assert.NotNull(loadedDB);
DatabaseTests.cs (164) : Assert.Equal(DB.TableByName(Table.TestTableName).NumRows(), loadedDB.TableByName(Table.TestTableName).NumRows());
DatabaseTests.cs (165) : Assert.Equal(DB.TableByName(Table.TestTableName).NumColumns(), loadedDB.TableByName(Table.TestTableName).NumColumns());
DatabaseTests.cs (166) : //Prueba valor por valor
DatabaseTests.cs (167) : for(int i = 0; i < DB.TableByName(Table.TestTableName).NumRows(); i++) //rows
DatabaseTests.cs (168) : {
DatabaseTests.cs (169) : for(int j = 0; j < DB.TableByName(Table.TestTableName).NumColumns(); j++) //columns
DatabaseTests.cs (170) : {
DatabaseTests.cs (171) : String columnName = DB.TableByName(Table.TestTableName).GetColumn(j).Name;
DatabaseTests.cs (172) : String DBValue = DB.TableByName(Table.TestTableName).GetRow(i).GetValue(columnName);
DatabaseTests.cs (173) : String loadedDBValue = loadedDB.TableByName(Table.TestTableName).GetRow(i).GetValue(columnName);
DatabaseTests.cs (174) : Assert.Equal(DBValue, loadedDBValue);
DatabaseTests.cs (175) : }
DatabaseTests.cs (176) : }
DatabaseTests.cs (178) : Database delimitedDB = Database.CreateTestDatabase();
DatabaseTests.cs (179) : List<String> values = new List<string>();
DatabaseTests.cs (180) : values.Add(":Iker:");
DatabaseTests.cs (181) : values.Add("1:25");
DatabaseTests.cs (182) : values.Add("2:7");
DatabaseTests.cs (183) : delimitedDB.TableByName(Table.TestTableName).Insert(values);
DatabaseTests.cs (184) : delimitedDB.Save("TestDelimitedDB");
DatabaseTests.cs (185) : Database loadedDelimitedDB = Database.Load("TestDelimitedDB", "admin", "password");
DatabaseTests.cs (186) : Assert.NotNull(loadedDelimitedDB);
DatabaseTests.cs (187) : for (int k = 0; k < delimitedDB.TableByName(Table.TestTableName).NumColumns(); k++) //columns
DatabaseTests.cs (188) : {
DatabaseTests.cs (189) : for (int l = 0; l < delimitedDB.TableByName(Table.TestTableName).NumRows(); l++) //rows
DatabaseTests.cs (190) : {
DatabaseTests.cs (191) : String columnName = delimitedDB.TableByName(Table.TestTableName).GetColumn(k).Name;
DatabaseTests.cs (192) : String delimitedDBValue = delimitedDB.TableByName(Table.TestTableName).GetRow(l).GetValue(columnName);
DatabaseTests.cs (193) : String loadedDelimitedDBValue = loadedDelimitedDB.TableByName(Table.TestTableName).GetRow(l).GetValue(columnName);
DatabaseTests.cs (194) : Assert.Equal(delimitedDBValue, loadedDelimitedDBValue);
DatabaseTests.cs (195) : }
DatabaseTests.cs (196) : }
DatabaseTests.cs (197) : }
ManagerTests.cs (11) : public void SaveAndLoad()
ManagerTests.cs (13) : //SAVE
ManagerTests.cs (38) : //LOAD
ManagerTests.cs (40) : Manager loadedManager = Manager.Load(dbName, username);
ManagerTests.cs (41) : Assert.NotNull(loadedManager);
ManagerTests.cs (43) : Profile loadedAdminProfile = loadedManager.ProfileByName(Profile.AdminProfileName);
ManagerTests.cs (44) : Assert.NotNull(loadedAdminProfile);
ManagerTests.cs (45) : Assert.True(loadedAdminProfile.PrivilegesOn.ContainsKey("table1"), "No se encontr� la tabla 'table1' en los privilegios");
ManagerTests.cs (47) : List<Privilege> loadedPrivileges = loadedAdminProfile.PrivilegesOn["table1"];
ManagerTests.cs (48) : Assert.Contains(Privilege.Delete, loadedPrivileges);
ManagerTests.cs (49) : Assert.Contains(Privilege.Insert, loadedPrivileges);
ManagerTests.cs (50) : Assert.Contains(Privilege.Select, loadedPrivileges);
ManagerTests.cs (51) : Assert.Contains(Privilege.Update, loadedPrivileges);
TableTests.cs (45) : Table table = Table.CreateTestTable("table");
TableTests.cs (46) : Assert.Equal(1, table.ColumnIndexByName("Height"));
TableTests.cs (52) : Table table = Table.CreateTestTable("table");
TableTests.cs (53) : Row row1 = table.GetRow(1);
TableTests.cs (54) : table.DeleteIthRow(0);
TableTests.cs (55) : Assert.Equal(row1,table.GetRow(0));
TableTests.cs (74) : [Fact]
TableTests.cs (75) : public void TestToString()
TableTests.cs (76) : {
TableTests.cs (77) : List<ColumnDefinition> columns = new List<ColumnDefinition>();
TableTests.cs (78) : Table table1 = Table.CreateTestTable("table");
TableTests.cs (79) : Table table2 = new Table("table2", columns);
TableTests.cs (80) : Table table3 = Table.CreateTestTable();
TableTests.cs (82) : table3.DeleteIthRow(2);
TableTests.cs (83) : table3.DeleteIthRow(1);
TableTests.cs (84) : table3.DeleteIthRow(0);
TableTests.cs (86) : Assert.Equal("['Name','Height','Age']{'Rodolfo','1.62','25'}{'Maider','1.67','67'}{'Pepe','1.55','51'}", table1.ToString());
TableTests.cs (88) : Assert.Equal("['Name','Height','Age']", table3.ToString());
TableTests.cs (93) : }
TableTests.cs (95) : public void TestColumnByName()
TableTests.cs (97) : Table table = Table.CreateTestTable("table");
TableTests.cs (98) : Assert.Equal( "Height",table.ColumnByName("Height").Name);
TableTests.cs (99) : Assert.Null(table.ColumnByName("MCO"));
TableTests.cs (112) : }
TableTests.cs (114) : [Fact]
TableTests.cs (115) : public void TestGetColumn()
TableTests.cs (116) : {
TableTests.cs (117) : Table table = Table.CreateTestTable();
TableTests.cs (118) : ColumnDefinition column = table.GetColumn(1);
TableTests.cs (119) : Assert.Equal("Height", column.Name);
TableTests.cs (124) : }
TableTests.cs (127) : [Fact]
TableTests.cs (128) : public void TestDeleteWhere()
TableTests.cs (129) : {
TableTests.cs (130) : Table table = Table.CreateTestTable("table");
TableTests.cs (131) : Condition condition = new Condition("Age", ">", "30");
TableTests.cs (135) : table.DeleteWhere(condition);
TableTests.cs (137) : Assert.Equal(1, table.NumRows());
TableTests.cs (138) : Assert.Equal("Rodolfo", table.GetRow(0).GetValue("Name"));
TableTests.cs (139) : Assert.Equal("25", table.GetRow(0).GetValue("Age"));
TableTests.cs (150) : }
TableTests.cs (152) : [Fact]
TableTests.cs (153) : public void TestSelect1()
TableTests.cs (154) : {
TableTests.cs (155) : Table table = Table.CreateTestTable("table");
TableTests.cs (156) : List<string> columns = new List<string> { "Name", "Age" };
TableTests.cs (157) : Condition condition = new Condition("Age", "=", "25");
TableTests.cs (158) : Condition condition2 = new Condition("Age", ">", "30");
TableTests.cs (159) : Table resultTable = table.Select(columns, condition);
TableTests.cs (160) : Table resultTable2 = table.Select(columns, condition2);
TableTests.cs (161) : Assert.Equal(1, resultTable.NumRows());
TableTests.cs (162) : Assert.Equal("Rodolfo", resultTable.GetRow(0).GetValue("Name"));
TableTests.cs (163) : Assert.Equal(2, resultTable2.NumRows());
TableTests.cs (164) : Assert.Equal("Maider", resultTable2.GetRow(0).GetValue("Name"));
TableTests.cs (165) : Assert.Equal("67", resultTable2.GetRow(0).GetValue("Age"));
TableTests.cs (166) : Assert.Equal("Pepe", resultTable2.GetRow(1).GetValue("Name"));
TableTests.cs (167) : Assert.Equal("51", resultTable2.GetRow(1).GetValue("Age"));
TableTests.cs (168) : }
TableTests.cs (170) : [Fact]
TableTests.cs (171) : public void TestSelect2()
TableTests.cs (172) : {
TableTests.cs (173) : Table table = Table.CreateTestTable("table");
TableTests.cs (174) : List<string> columns = new List<string> { "Name", "Age" };
TableTests.cs (176) : Table resultTable = table.Select(columns, null);
TableTests.cs (178) : Assert.Equal(3, resultTable.NumRows());
TableTests.cs (179) : Assert.Equal("Rodolfo", resultTable.GetRow(0).GetValue("Name"));
TableTests.cs (180) : Assert.Equal("25", resultTable.GetRow(0).GetValue("Age"));
TableTests.cs (181) : Assert.Equal("Maider", resultTable.GetRow(1).GetValue("Name"));
TableTests.cs (182) : Assert.Equal("67", resultTable.GetRow(1).GetValue("Age"));
TableTests.cs (183) : Assert.Equal("Pepe", resultTable.GetRow(2).GetValue("Name"));
TableTests.cs (184) : Assert.Equal("51", resultTable.GetRow(2).GetValue("Age"));
AddUser.cs (31) : if (profile != null)
AddUser.cs (32) : {
AddUser.cs (33) : foreach ( Security.User user1 in profile.Users)
AddUser.cs (34) : {
AddUser.cs (35) : if (user1.Username.Equals(Username))
AddUser.cs (36) : {
AddUser.cs (37) : return Constants.Error;
AddUser.cs (38) : }
AddUser.cs (39) : }
AddUser.cs (41) : Security.User newUser = new Security.User(Username,Password);
AddUser.cs (42) : profile.Users.Add(newUser);
CreateSecurityProfile.cs (31) : } else
CreateSecurityProfile.cs (32) : {
Grant.cs (29) : if (database.IsUserAdmin() && database.SecurityManager != null)
Grant.cs (31) : Profile profile = database.SecurityManager.ProfileByName(ProfileName);
Grant.cs (32) : if (profile != null)
Grant.cs (51) : if (!profile.IsGrantedPrivilege(TableName, privilege))
Grant.cs (53) : profile.GrantPrivilege(TableName,privilege);
MiniSQLParser.cs (36) : const string grantPattern = @"^GRANT\s+([A-Z]+)\s+ON\s+(\w+)\s+TO\s+([A-Za-z]+)$";
MiniSQLParser.cs (40) : const string addUserPattern = @"^ADD\s+USER\s+\(([A-Za-z]+),(\w+),(\w+)\)$";
MiniSQLParser.cs (216) : Condition condition1 = null;
MiniSQLParser.cs (217) : if (conditions[2].Trim().StartsWith("'") && conditions[2].Trim().EndsWith("'"))
MiniSQLParser.cs (218) : {
MiniSQLParser.cs (223) : condition1 = new Condition(conditions[0], conditions[1], conditions[2]);
MiniSQLParser.cs (224) : }
Revoke.cs (5) : using DbManager.Security;
Revoke.cs (31) : Profile profile = database.SecurityManager.ProfileByName(ProfileName);
Revoke.cs (32) : if (profile!=null)
Revoke.cs (51) : if(profile.IsGrantedPrivilege(TableName, Privilege))
Revoke.cs (52) : {
Revoke.cs (57) : {
Revoke.cs (58) : return Constants.PrivilegeDoesNotExistError;
Revoke.cs (59) : }
Revoke.cs (60) : }
Revoke.cs (61) : else
Manager.cs (127) : string path = Path.Combine(Directory.GetCurrentDirectory(), databaseName);
Manager.cs (128) : string profileFile = Path.Combine(path, "profiles.txt");
Manager.cs (129) : Manager manager = new Manager(username);
Manager.cs (133) : if (!File.Exists(profileFile))
Manager.cs (134) : {
Manager.cs (135) : return manager;
Manager.cs (136) : }
Manager.cs (138) : using(StreamReader reader = new StreamReader(profileFile))
Manager.cs (139) : {
Manager.cs (140) : string line;
Manager.cs (141) : while((line = reader.ReadLine()) != null)
Manager.cs (142) : {
Manager.cs (143) : //Primera linea es siempre el nombre del perfil
Manager.cs (144) : Profile profile = new Profile();
Manager.cs (145) : profile.Name = line.Trim();
Manager.cs (147) : while((line = reader.ReadLine()) != null && line.Trim() != "#")
Manager.cs (148) : {
Manager.cs (149) : string[] parts = line.Split(',');
Manager.cs (150) : string idPart = parts[0].Trim();
Manager.cs (151) : string firstPart = parts[1].Trim(); //username o table
Manager.cs (152) : string secondPart = parts[2].Trim();//password o privilegio
Manager.cs (156) : User user = new User();
Manager.cs (157) : user.Username = firstPart;
Manager.cs (158) : user.EncryptedPassword = secondPart;
Manager.cs (159) : profile.Users.Add(user);
Manager.cs (160) : }
Manager.cs (163) : Privilege parsedPrivilege;
Manager.cs (164) : bool parsed = true;
Manager.cs (165) : switch(secondPart)
Manager.cs (166) : {
Manager.cs (167) : case "Delete":
Manager.cs (168) : parsedPrivilege = Privilege.Delete;
Manager.cs (169) : break;
Manager.cs (170) : case "Insert":
Manager.cs (171) : parsedPrivilege = Privilege.Insert;
Manager.cs (172) : break;
Manager.cs (173) : case "Select":
Manager.cs (174) : parsedPrivilege = Privilege.Select;
Manager.cs (175) : break;
Manager.cs (176) : case "Update":
Manager.cs (177) : parsedPrivilege = Privilege.Update;
Manager.cs (178) : break;
Manager.cs (179) : default:
Manager.cs (180) : parsed = false;
Manager.cs (181) : parsedPrivilege = default;
Manager.cs (182) : break;
Manager.cs (183) : }
Manager.cs (184) : if(parsed)
Manager.cs (185) : {
Manager.cs (186) : if (profile.PrivilegesOn.ContainsKey(firstPart))
Manager.cs (187) : {
Manager.cs (188) : profile.PrivilegesOn[firstPart].Add(parsedPrivilege);
Manager.cs (189) : }
Manager.cs (190) : else
Manager.cs (191) : {
Manager.cs (192) : profile.PrivilegesOn[firstPart] = new List<Privilege> { parsedPrivilege };
Manager.cs (193) : }
Manager.cs (194) : }
Manager.cs (195) : }
Manager.cs (196) : }
Manager.cs (197) : manager.AddProfile(profile);
Manager.cs (198) : }
Manager.cs (199) : }
Manager.cs (200) : return manager;
Manager.cs (221) : writer.WriteLine($"U,{user.Username},{user.EncryptedPassword}");
Manager.cs (228) : writer.WriteLine($"P,{key},{priv}");
UpdateTests.cs (40) : Update query = MiniSQLParser.Parse("UPDATE table SET edad='42' WHERE edad>'21'") as Update;
UpdateTests.cs (49) : Update query2 = MiniSQLParser.Parse("UPDATE table SET edad='42' WHERE edad<'21'") as Update;
UpdateTests.cs (69) : Update query = MiniSQLParser.Parse("UPDATE table SET edad='42' WHERE height>'1.98'") as Update;
AddUserTests.cs (73) : [Fact]
AddUserTests.cs (74) : public void AddUser()
AddUserTests.cs (75) : {
AddUserTests.cs (76) : var db = new Database("user1", "password"); //Se crea perfil con nombre "Admin" y se mete dentro el user1
AddUserTests.cs (77) : var result = db.ExecuteMiniSQLQuery("ADD USER (user,password,Admin)"); //No deja poner user con un numero
AddUserTests.cs (78) : Assert.Equal(Constants.AddUserSuccess, result);
AddUserTests.cs (79) : }
AddUserTests.cs (81) : [Fact]
AddUserTests.cs (82) : public void AddAsNonAdmin()
AddUserTests.cs (83) : {
AddUserTests.cs (84) : //Creo db user1 = Admin, creo nuevo perfil no admin
AddUserTests.cs (85) : var db = new Database("user1", "password");
AddUserTests.cs (86) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE profileNonAdmin");
AddUserTests.cs (87) : db.ExecuteMiniSQLQuery("ADD USER (userNonAdmin,password,profileNonAdmin)");
AddUserTests.cs (88) : //Guardo y cargo la db con el perfil no admin.
AddUserTests.cs (89) : db.Save("TestAddDB");
AddUserTests.cs (90) : Database dbNonAdmin = Database.Load("TestAddDB", "userNonAdmin", "password");
AddUserTests.cs (91) : var result = dbNonAdmin.ExecuteMiniSQLQuery("ADD USER (user,password,profileNonAdmin)");
AddUserTests.cs (92) : Assert.Equal(Constants.UsersProfileIsNotGrantedRequiredPrivilege, result);
AddUserTests.cs (93) : }
AddUserTests.cs (95) : [Fact]
AddUserTests.cs (96) : public void AddNonExistentProfile()
AddUserTests.cs (97) : {
AddUserTests.cs (98) : var db = new Database("user1", "password");
AddUserTests.cs (99) : var result = db.ExecuteMiniSQLQuery("ADD USER (user,password,NonExistentProfile)");
AddUserTests.cs (100) : Assert.Equal(Constants.SecurityProfileDoesNotExistError, result);
AddUserTests.cs (101) : }
AddUserTests.cs (103) : [Fact]
AddUserTests.cs (104) : public void AddExistentUser()
AddUserTests.cs (105) : {
AddUserTests.cs (106) : var db = new Database("user1", "pass");
AddUserTests.cs (108) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE testProfile");
AddUserTests.cs (109) : db.ExecuteMiniSQLQuery("ADD USER (existingUser,pass123,testProfile)");
AddUserTests.cs (110) : var result = db.ExecuteMiniSQLQuery("ADD USER (existingUser,pass123,testProfile)");
AddUserTests.cs (111) : Assert.Equal(Constants.Error, result);
AddUserTests.cs (112) : }
CreateSecurityProfileTests.cs (9) : using System.IO;
CreateSecurityProfileTests.cs (65) : [Fact]
CreateSecurityProfileTests.cs (66) : public void CreateProfileNotBeingAdminShouldDoNothing()
CreateSecurityProfileTests.cs (67) : {
CreateSecurityProfileTests.cs (68) : var db = new Database("admin", "pass");
CreateSecurityProfileTests.cs (69) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE userProfile");
CreateSecurityProfileTests.cs (70) : db.ExecuteMiniSQLQuery("ADD USER (user,pass,userProfile)");
CreateSecurityProfileTests.cs (71) : db.Save("TestDB");
CreateSecurityProfileTests.cs (73) : var nonAdminDb = Database.Load("TestDB", "user", "pass");
CreateSecurityProfileTests.cs (75) : var result = nonAdminDb.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE newProfile");
CreateSecurityProfileTests.cs (77) : Assert.Equal(Constants.UsersProfileIsNotGrantedRequiredPrivilege, result);
CreateSecurityProfileTests.cs (78) : }
DeleteUserTests.cs (65) : [Fact]
DeleteUserTests.cs (66) : public void DeleteUser()
DeleteUserTests.cs (67) : {
DeleteUserTests.cs (68) : var db = new Database("user1", "password");
DeleteUserTests.cs (69) : db.ExecuteMiniSQLQuery("ADD USER (user,password,Admin)");
DeleteUserTests.cs (70) : var result = db.ExecuteMiniSQLQuery("DELETE USER user");
DeleteUserTests.cs (71) : Assert.Equal(Constants.DeleteUserSuccess, result);
DeleteUserTests.cs (72) : }
DeleteUserTests.cs (74) : [Fact]
DeleteUserTests.cs (75) : public void DeleteAsNonAdmin()
DeleteUserTests.cs (76) : {
DeleteUserTests.cs (77) : //Creo db user1 = Admin, creo nuevo perfil no admin
DeleteUserTests.cs (78) : var db = new Database("user1", "password");
DeleteUserTests.cs (79) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE profileNonAdmin");
DeleteUserTests.cs (80) : db.ExecuteMiniSQLQuery("ADD USER (user,password,Admin)");
DeleteUserTests.cs (81) : db.ExecuteMiniSQLQuery("ADD USER (userNonAdmin,password,profileNonAdmin)");
DeleteUserTests.cs (82) : //Guardo y cargo la db con el perfil no admin.
DeleteUserTests.cs (83) : db.Save("TestAddDB");
DeleteUserTests.cs (84) : Database dbNonAdmin = Database.Load("TestAddDB", "userNonAdmin", "password");
DeleteUserTests.cs (85) : var result = dbNonAdmin.ExecuteMiniSQLQuery("DELETE USER user");
DeleteUserTests.cs (86) : Assert.Equal(Constants.UsersProfileIsNotGrantedRequiredPrivilege, result);
DeleteUserTests.cs (87) : }
DeleteUserTests.cs (89) : [Fact]
DeleteUserTests.cs (90) : public void DeleteNonExistentUser()
DeleteUserTests.cs (91) : {
DeleteUserTests.cs (92) : var db = new Database("user1", "password");
DeleteUserTests.cs (93) : var result = db.ExecuteMiniSQLQuery("DELETE USER user");
DeleteUserTests.cs (94) : Assert.Equal(Constants.UserDoesNotExistError, result);
DeleteUserTests.cs (95) : }
DropSecurityProfileTests.cs (9) : using System.IO;
DropSecurityProfileTests.cs (65) : [Fact]
DropSecurityProfileTests.cs (66) : public void RemoveProfileNotBeingAdminShouldDoNothing()
DropSecurityProfileTests.cs (67) : {
DropSecurityProfileTests.cs (68) : var db = new Database("admin", "pass");
DropSecurityProfileTests.cs (69) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE userProfile");
DropSecurityProfileTests.cs (70) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE profileToRemove");
DropSecurityProfileTests.cs (71) : db.ExecuteMiniSQLQuery("ADD USER (user,pass,userProfile)");
DropSecurityProfileTests.cs (72) : db.Save("TestDB");
DropSecurityProfileTests.cs (74) : var nonAdminDb = Database.Load("TestDB", "user", "pass");
DropSecurityProfileTests.cs (76) : var result = nonAdminDb.ExecuteMiniSQLQuery("DROP SECURITY PROFILE profileToRemove");
DropSecurityProfileTests.cs (78) : Assert.Equal(Constants.UsersProfileIsNotGrantedRequiredPrivilege, result);
DropSecurityProfileTests.cs (79) : }
GrantTests.cs (9) : using System.IO;
GrantTests.cs (96) : public void IncorrectWithoutOnePart()
GrantTests.cs (98) : Grant query = MiniSQLParser.Parse("GRANT ON Table TO User") as Grant;
GrantTests.cs (101) : query = MiniSQLParser.Parse("GRANT SELECT ON TO User") as Grant;
GrantTests.cs (104) : query = MiniSQLParser.Parse("GRANT SELECT TO User") as Grant;
GrantTests.cs (107) : query = MiniSQLParser.Parse("GRANT SELECT ON Table TO") as Grant;
GrantTests.cs (112) : public void GrantIncorrectPrivileges()
GrantTests.cs (114) : var db = new Database("admin", "password");
GrantTests.cs (115) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE User");
GrantTests.cs (116) : var result = db.ExecuteMiniSQLQuery("GRANT REMOVE ON Table TO User");
GrantTests.cs (117) : var result2 = db.ExecuteMiniSQLQuery("GRANT UPGRADE ON Table TO User");
GrantTests.cs (119) : Assert.Equal(result, Constants.PrivilegeDoesNotExistError);
GrantTests.cs (120) : Assert.Equal(result2, Constants.PrivilegeDoesNotExistError);
GrantTests.cs (124) : [Fact]
GrantTests.cs (125) : public void GrantPrivilegeNotBeingAdminShouldDoNothing()
GrantTests.cs (126) : {
GrantTests.cs (127) : var db = new Database("admin", "pass");
GrantTests.cs (128) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE userProfile");
GrantTests.cs (129) : db.ExecuteMiniSQLQuery("ADD USER (user,pass,userProfile)");
GrantTests.cs (130) : db.Save("TestDB");
GrantTests.cs (132) : var nonAdminDb = Database.Load("TestDB", "user", "pass");
GrantTests.cs (134) : var result = nonAdminDb.ExecuteMiniSQLQuery("GRANT SELECT ON TestTable TO userProfile");
GrantTests.cs (136) : Assert.Equal(Constants.UsersProfileIsNotGrantedRequiredPrivilege, result);
GrantTests.cs (137) : }
GrantTests.cs (139) : [Fact]
GrantTests.cs (140) : public void AdminCanGrantPrivilege()
GrantTests.cs (141) : {
GrantTests.cs (142) : var db = new Database("user1", "password");
GrantTests.cs (143) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE profileNonAdmin");
GrantTests.cs (144) : db.ExecuteMiniSQLQuery("ADD USER (userNonAdmin,password,profileNonAdmin)");
GrantTests.cs (145) : var result = db.ExecuteMiniSQLQuery("GRANT SELECT ON table1 TO profileNonAdmin");
GrantTests.cs (146) : Assert.NotNull(result);
GrantTests.cs (147) : Assert.Equal(Constants.GrantPrivilegeSuccess, result);
GrantTests.cs (148) : }
GrantTests.cs (150) : [Fact]
GrantTests.cs (151) : public void GrantAlreadyGrantedPrivilege()
GrantTests.cs (152) : {
GrantTests.cs (153) : var db = new Database("user1", "password");
GrantTests.cs (154) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE profileNonAdmin");
GrantTests.cs (155) : db.ExecuteMiniSQLQuery("ADD USER (userNonAdmin,password,profileNonAdmin)");
GrantTests.cs (156) : db.ExecuteMiniSQLQuery("GRANT SELECT ON table1 TO profileNonAdmin");
GrantTests.cs (157) : var result = db.ExecuteMiniSQLQuery("GRANT SELECT ON table1 TO profileNonAdmin");
GrantTests.cs (158) : Assert.NotNull(result);
GrantTests.cs (159) : Assert.Equal(Constants.ProfileAlreadyHasPrivilege, result);
GrantTests.cs (160) : }
GrantTests.cs (162) : [Fact]
GrantTests.cs (163) : public void GrantAsNonAdmin()
GrantTests.cs (164) : {
GrantTests.cs (165) : var db = new Database("user1", "password");
GrantTests.cs (166) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE profileNonAdmin");
GrantTests.cs (167) : db.ExecuteMiniSQLQuery("ADD USER (userNonAdmin,password,profileNonAdmin)");
GrantTests.cs (168) : db.Save("TestGrantDB");
GrantTests.cs (170) : Database dbNonAdmin = Database.Load("TestGrantDB", "userNonAdmin", "password");
GrantTests.cs (171) : var result = dbNonAdmin.ExecuteMiniSQLQuery("GRANT SELECT ON table1 TO profileNonAdmin");
GrantTests.cs (172) : Assert.Equal(Constants.UsersProfileIsNotGrantedRequiredPrivilege, result);
GrantTests.cs (173) : }
GrantTests.cs (175) : [Fact]
GrantTests.cs (176) : public void GrantNonExistentProfile()
GrantTests.cs (177) : {
GrantTests.cs (178) : var db = new Database("user1", "password");
GrantTests.cs (179) : var result = db.ExecuteMiniSQLQuery("GRANT SELECT ON table1 TO NonExistentProfile");
GrantTests.cs (181) : Assert.Equal(Constants.SecurityProfileDoesNotExistError, result);
GrantTests.cs (182) : }
GrantTests.cs (184) : [Fact]
GrantTests.cs (185) : public void GrantNonExistentPrivilege()
GrantTests.cs (186) : {
GrantTests.cs (187) : var db = new Database("user1", "password");
GrantTests.cs (188) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE userProfile");
GrantTests.cs (189) : var result = db.ExecuteMiniSQLQuery("GRANT INVALID ON table1 TO userProfile");
GrantTests.cs (191) : Assert.Equal(Constants.PrivilegeDoesNotExistError, result);
GrantTests.cs (192) : }
RevokeTests.cs (126) : [Fact]
RevokeTests.cs (127) : public void AdminCanRevokePrivilege()
RevokeTests.cs (128) : {
RevokeTests.cs (129) : var db = new Database("user1", "password");
RevokeTests.cs (130) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE profileNonAdmin");
RevokeTests.cs (131) : db.ExecuteMiniSQLQuery("ADD USER (userNonAdmin,password,profileNonAdmin)");
RevokeTests.cs (132) : db.ExecuteMiniSQLQuery("GRANT SELECT ON table1 TO profileNonAdmin");
RevokeTests.cs (133) : var result = db.ExecuteMiniSQLQuery("REVOKE SELECT ON table1 TO profileNonAdmin");
RevokeTests.cs (134) : Assert.NotNull(result);
RevokeTests.cs (135) : Assert.Equal(Constants.RevokePrivilegeSuccess, result);
RevokeTests.cs (136) : }
RevokeTests.cs (138) : [Fact]
RevokeTests.cs (139) : public void RevokeNonGrantedPrivilege()
RevokeTests.cs (140) : {
RevokeTests.cs (141) : var db = new Database("user1", "password");
RevokeTests.cs (142) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE profileNonAdmin");
RevokeTests.cs (143) : db.ExecuteMiniSQLQuery("ADD USER (userNonAdmin,password,profileNonAdmin)");
RevokeTests.cs (144) : var result = db.ExecuteMiniSQLQuery("REVOKE SELECT ON table1 TO profileNonAdmin");
RevokeTests.cs (145) : Assert.NotNull(result);
RevokeTests.cs (146) : Assert.Equal(Constants.PrivilegeDoesNotExistError, result);
RevokeTests.cs (147) : }
RevokeTests.cs (149) : [Fact]
RevokeTests.cs (150) : public void RevokeAsNonAdmin()
RevokeTests.cs (151) : {
RevokeTests.cs (152) : var db = new Database("user1", "password");
RevokeTests.cs (153) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE profileNonAdmin");
RevokeTests.cs (154) : db.ExecuteMiniSQLQuery("ADD USER (userNonAdmin,password,profileNonAdmin)");
RevokeTests.cs (155) : db.ExecuteMiniSQLQuery("GRANT SELECT ON table1 TO profileNonAdmin");
RevokeTests.cs (156) : db.Save("TestDB");
RevokeTests.cs (158) : Database dbNonAdmin = Database.Load("TestDB", "userNonAdmin", "password");
RevokeTests.cs (159) : var result = dbNonAdmin.ExecuteMiniSQLQuery("REVOKE SELECT ON table1 TO profileNonAdmin");
RevokeTests.cs (160) : Assert.Equal(Constants.UsersProfileIsNotGrantedRequiredPrivilege, result);
RevokeTests.cs (161) : }
RevokeTests.cs (163) : [Fact]
RevokeTests.cs (164) : public void RevokeNonExistentProfile()
RevokeTests.cs (165) : {
RevokeTests.cs (166) : var db = new Database("user1", "password");
RevokeTests.cs (167) : var result = db.ExecuteMiniSQLQuery("REVOKE SELECT ON table1 TO NonExistentProfile");
RevokeTests.cs (169) : Assert.Equal(Constants.SecurityProfileDoesNotExistError, result);
RevokeTests.cs (170) : }
