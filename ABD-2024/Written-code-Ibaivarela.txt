Condition.cs (32) : String mayorQue = ">";
Condition.cs (33) : String menorQue = "<";
Condition.cs (34) : String igualQue = "=";
Condition.cs (37) : if (Operator == menorQue)
Condition.cs (45) : else if (Operator == mayorQue)
Condition.cs (53) : else if (Operator == igualQue)
Database.cs (92) : return false;
Database.cs (296) : using (StreamWriter w = new StreamWriter(file))
Database.cs (297) : {
Database.cs (308) : for (int c = 0; c < t.NumColumns(); c++)
Database.cs (309) : {
Database.cs (310) : ColumnDefinition col = t.GetColumn(c);
Database.cs (311) : w.WriteLine(col.ToString());
Database.cs (312) : }
Database.cs (321) : string value = r.Values[j];
Database.cs (323) : if (value.Contains(",") || value.Contains("\""))
Database.cs (324) : {
Database.cs (325) : value = "\"" + value.Replace("\"", "\"\"") + "\"";
Database.cs (326) : }
Database.cs (328) : rowInfo += value;
Database.cs (339) : }
Database.cs (342) : catch
Database.cs (353) : string file = databaseName + TableFileExtension;
Database.cs (354) : if (file == null)
Database.cs (355) : return null;
Database.cs (357) : try
Database.cs (358) : {
Database.cs (359) : using (StreamReader r = new StreamReader(file))
Database.cs (360) : {
Database.cs (361) : string fileUser = r.ReadLine();
Database.cs (362) : string filePass = r.ReadLine();
Database.cs (363) : int tableCount = int.Parse(r.ReadLine());
Database.cs (365) : Database db = new Database();
Database.cs (366) : db.m_username = fileUser;
Database.cs (367) : db.m_password = filePass;
Database.cs (369) : for (int i = 0; i < tableCount; i++)
Database.cs (370) : {
Database.cs (371) : string tableName = r.ReadLine();
Database.cs (372) : int columnCount = int.Parse(r.ReadLine());
Database.cs (373) : int rowCount = int.Parse(r.ReadLine());
Database.cs (375) : List<ColumnDefinition> columns = new List<ColumnDefinition>();
Database.cs (376) : for (int j = 0; j < columnCount; j++)
Database.cs (377) : {
Database.cs (378) : string columnData = r.ReadLine();
Database.cs (379) : columns.Add(ColumnDefinition.Parse(columnData));
Database.cs (380) : }
Database.cs (382) : Table table = new Table(tableName, columns);
Database.cs (384) : for (int k = 0; k < rowCount; k++)
Database.cs (385) : {
Database.cs (386) : string line = r.ReadLine();
Database.cs (387) : List<string> values = new List<string>();
Database.cs (388) : bool inQuotes = false;
Database.cs (389) : string current = "";
Database.cs (391) : for (int pos = 0; pos < line.Length; pos++)
Database.cs (392) : {
Database.cs (393) : char c = line[pos];
Database.cs (395) : if (inQuotes)
Database.cs (396) : {
Database.cs (397) : if (c == '"')
Database.cs (398) : {
Database.cs (399) : if (pos + 1 < line.Length && line[pos + 1] == '"')
Database.cs (400) : {
Database.cs (401) : current += '"';
Database.cs (402) : pos++;
Database.cs (403) : }
Database.cs (404) : else
Database.cs (405) : {
Database.cs (406) : inQuotes = false;
Database.cs (407) : }
Database.cs (408) : }
Database.cs (409) : else
Database.cs (410) : {
Database.cs (411) : current += c;
Database.cs (412) : }
Database.cs (413) : }
Database.cs (414) : else
Database.cs (415) : {
Database.cs (416) : if (c == ',')
Database.cs (417) : {
Database.cs (418) : values.Add(current);
Database.cs (419) : current = "";
Database.cs (420) : }
Database.cs (421) : else if (c == '"')
Database.cs (422) : {
Database.cs (423) : inQuotes = true;
Database.cs (424) : }
Database.cs (425) : else
Database.cs (426) : {
Database.cs (427) : current += c;
Database.cs (428) : }
Database.cs (429) : }
Database.cs (430) : }
Database.cs (432) : values.Add(current);
Database.cs (433) : table.Insert(values);
Database.cs (434) : }
Database.cs (436) : db.Tables.Add(table);
Database.cs (437) : }
Database.cs (439) : return db;
Database.cs (440) : }
Database.cs (441) : }
Database.cs (442) : catch
Database.cs (443) : {
Database.cs (446) : }
Row.cs (159) : if ( value == null || columns == null || columns.Count == 0)
Row.cs (166) : Row r = new Row(columns, new List<string>(values));
Row.cs (171) : return r;
Table.cs (164) : for (int j = 0; j < r.Values.Count; j++)
Table.cs (288) : int columnToChange = ColumnIndexByName(s.ColumnName);
Table.cs (289) : if(columnToChange != -1)
Table.cs (291) : Rows[i].SetValue(s.ColumnName, s.Value);
DatabaseTests.cs (4) : using System.Reflection.Metadata;
DatabaseTests.cs (83) : Assert.False(db.CreateTable("Players", null));
DatabaseTests.cs (389) : List<ColumnDefinition> columns2 = new List<ColumnDefinition>()
DatabaseTests.cs (390) : {
DatabaseTests.cs (391) : new ColumnDefinition(ColumnDefinition.DataType.String, "Height"),
DatabaseTests.cs (392) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Weight"),
DatabaseTests.cs (394) : };
DatabaseTests.cs (400) : db.AddTable(new Table("TestTable2", columns2));
DatabaseTests.cs (424) : w.WriteLine("Mikel;Gonzalez,22");
DatabaseTests.cs (430) : String TestDatabase2 = "TestDatabase2";
DatabaseTests.cs (432) : StreamWriter w2 = new StreamWriter(TestDatabase2 + ".tbl");
DatabaseTests.cs (433) : w2.WriteLine("admin2");
DatabaseTests.cs (434) : w2.WriteLine("password2");
DatabaseTests.cs (435) : w2.WriteLine(1);
DatabaseTests.cs (437) : w2.WriteLine("users2");
DatabaseTests.cs (438) : w2.WriteLine(2);
DatabaseTests.cs (439) : w2.WriteLine(2);
DatabaseTests.cs (441) : w2.WriteLine("Double->Height");
DatabaseTests.cs (442) : w2.WriteLine("Double->Weight");
DatabaseTests.cs (444) : w2.WriteLine("1.79,70");
DatabaseTests.cs (445) : w2.WriteLine("1.86,90");
DatabaseTests.cs (447) : w2.Close();
DatabaseTests.cs (452) : Database db3 = Database.Load(TestDatabase2, "admin2", "password2");
DatabaseTests.cs (455) : Assert.NotNull(db3);
DatabaseTests.cs (476) : Assert.Equal("Mikel;Gonzalez", first.GetValue("Name"));
DatabaseTests.cs (482) : //
DatabaseTests.cs (483) : //
DatabaseTests.cs (484) : Table usersTable2 = db3.TableByName("users2");
DatabaseTests.cs (485) : Assert.NotNull(usersTable2);
DatabaseTests.cs (486) : Assert.Equal(2, usersTable2.NumColumns());
DatabaseTests.cs (487) : Assert.Equal(2, usersTable2.NumRows());
DatabaseTests.cs (489) : ColumnDefinition HeightColumn = usersTable2.ColumnByName("Height");
DatabaseTests.cs (490) : Assert.NotNull(HeightColumn);
DatabaseTests.cs (491) : Assert.Equal(ColumnDefinition.DataType.Double, HeightColumn.Type);
DatabaseTests.cs (493) : ColumnDefinition WeightColumn = usersTable2.ColumnByName("Weight");
DatabaseTests.cs (494) : Assert.NotNull(WeightColumn);
DatabaseTests.cs (495) : Assert.Equal(ColumnDefinition.DataType.Double, WeightColumn.Type);
DatabaseTests.cs (499) : Row second = usersTable2.GetRow(0);
DatabaseTests.cs (500) : Assert.Equal("1.79", second.GetValue("Height"));
DatabaseTests.cs (501) : Assert.Equal("70", second.GetValue("Weight"));
DatabaseTests.cs (503) : Database dbNull2 = Database.Load("dbNull", " admin2", "password2");
DatabaseTests.cs (505) : Assert.Null(dbNull2);
DeleteTest.cs (1) : using DbManager;
DeleteTest.cs (2) : using DbManager.Parser;
DeleteTest.cs (3) : using DbManager.Security;
DeleteTest.cs (5) : namespace OurTests
DeleteTest.cs (6) : {
DeleteTest.cs (7) : public class DeleteTest
DeleteTest.cs (8) : {
DeleteTest.cs (10) : [Fact]
DeleteTest.cs (11) : public void Delete()
DeleteTest.cs (12) : {
DeleteTest.cs (13) : DbManager.Parser.Delete query = MiniSQLParser.Parse("DELETE FROM PLAYERS WHERE name='Mikel'") as DbManager.Parser.Delete;
DeleteTest.cs (14) : Assert.NotNull(query);
DeleteTest.cs (15) : query = MiniSQLParser.Parse("DELETE FROM PLAYERS WHERE HEIGHT='9.89'") as DbManager.Parser.Delete;
DeleteTest.cs (16) : Assert.NotNull(query);
DeleteTest.cs (17) : query = MiniSQLParser.Parse("DELETE FROM PLAYERS WHERE AGE='99'") as DbManager.Parser.Delete;
DeleteTest.cs (18) : Assert.NotNull(query);
DeleteTest.cs (19) : query = MiniSQLParser.Parse("delete from players where dni=99999999") as DbManager.Parser.Delete;
DeleteTest.cs (20) : Assert.Null(query);
DeleteTest.cs (21) : query = MiniSQLParser.Parse("DELETE FROM PLAYERS WHERE name=Mikel") as DbManager.Parser.Delete;
DeleteTest.cs (22) : Assert.Null(query);
DeleteTest.cs (23) : query = MiniSQLParser.Parse("DELETE FROM PLAYERS WHERE HEIGHT=9.89") as DbManager.Parser.Delete;
DeleteTest.cs (24) : Assert.Null(query);
DeleteTest.cs (25) : query = MiniSQLParser.Parse("delete FROM PLAYERS WHERE name='Mikel'") as DbManager.Parser.Delete;
DeleteTest.cs (26) : Assert.Null(query);
DeleteTest.cs (27) : query = MiniSQLParser.Parse("DELETE FROM PLAYERS WHERE AGE=99") as DbManager.Parser.Delete;
DeleteTest.cs (28) : Assert.Null(query);
DeleteTest.cs (29) : query = MiniSQLParser.Parse("DELETE FROM USERS WHERE") as DbManager.Parser.Delete;
DeleteTest.cs (30) : Assert.Null(query);
DeleteTest.cs (31) : query = MiniSQLParser.Parse("delete from users where name=Mikel") as DbManager.Parser.Delete;
DeleteTest.cs (32) : Assert.Null(query);
DeleteTest.cs (33) : query = MiniSQLParser.Parse("DELETE FROM") as DbManager.Parser.Delete;
DeleteTest.cs (34) : Assert.Null(query);
DeleteTest.cs (35) : query = MiniSQLParser.Parse("DELETE FROM PLAYERS WHERE name ='Mikel'") as DbManager.Parser.Delete;
DeleteTest.cs (36) : Assert.Null(query);
DeleteTest.cs (37) : query = MiniSQLParser.Parse("DELETE   FROM  PLAYERS   WHERE  name= 'Mikel'") as DbManager.Parser.Delete;
DeleteTest.cs (38) : Assert.Null(query);
DeleteTest.cs (41) : }
DeleteTest.cs (43) : [Fact]
DeleteTest.cs (45) : public void executeDelete()
DeleteTest.cs (46) : {
DeleteTest.cs (47) : Database db = new Database("admin", "1234");
DeleteTest.cs (48) : List<ColumnDefinition> columns = new List<ColumnDefinition>()
DeleteTest.cs (49) : {
DeleteTest.cs (50) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
DeleteTest.cs (51) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
DeleteTest.cs (52) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height"),
DeleteTest.cs (53) : };
DeleteTest.cs (54) : List<String> values = new List<String>() { "Mikel", "67", "1.78" };
DeleteTest.cs (55) : List<String> values2 = new List<String>() { "Julen", "22", "1.67" };
DeleteTest.cs (56) : List<String> values3 = new List<String>() { "Anne", "33", "1.71" };
DeleteTest.cs (57) : List<String> values4 = new List<String>() { "Mikel", "22", "1.90" };
DeleteTest.cs (58) : List<String> values5 = new List<String>() { "Julen", "54", "1.87" };
DeleteTest.cs (59) : List<String> values6 = new List<String>() { "Anne", "67", "1.84" };
DeleteTest.cs (61) : Table table = new Table("TestTable", columns);
DeleteTest.cs (63) : Row row = new Row(columns, values);
DeleteTest.cs (64) : Row row2 = new Row(columns, values2);
DeleteTest.cs (65) : Row row3 = new Row(columns, values3);
DeleteTest.cs (66) : Row row4 = new Row(columns, values4);
DeleteTest.cs (67) : Row row5 = new Row(columns, values5);
DeleteTest.cs (68) : Row row6 = new Row(columns, values6);
DeleteTest.cs (70) : table.AddRow(row);
DeleteTest.cs (71) : table.AddRow(row2);
DeleteTest.cs (72) : table.AddRow(row3);
DeleteTest.cs (73) : table.AddRow(row4);
DeleteTest.cs (74) : table.AddRow(row5);
DeleteTest.cs (75) : table.AddRow(row6);
DeleteTest.cs (77) : db.AddTable(table);
DeleteTest.cs (79) : Condition condition2 = new Condition("Age", "<", "20");
DeleteTest.cs (80) : DbManager.Parser.Delete deleteQuery2 = new DbManager.Parser.Delete("TestTable", condition2);
DeleteTest.cs (82) : String result2 = deleteQuery2.Execute(db);
DeleteTest.cs (84) : Assert.Equal(6, table.NumRows());
DeleteTest.cs (87) : Condition condition = new Condition("Age", "<", "23");
DeleteTest.cs (88) : DbManager.Parser.Delete deleteQuery = new DbManager.Parser.Delete("TestTable", condition);
DeleteTest.cs (90) : String result = deleteQuery.Execute(db);
DeleteTest.cs (92) : Assert.Equal(4, table.NumRows());
DeleteTest.cs (110) : }
DeleteTest.cs (113) : }
DeleteTest.cs (114) : }
ManagerTests.cs (8) : [Fact]
ManagerTests.cs (9) : public void ProfileByUser()
ManagerTests.cs (10) : {
ManagerTests.cs (11) : Manager manager = new Manager("Admin");
ManagerTests.cs (13) : Profile profile1 = new Profile { Name = "First" };
ManagerTests.cs (14) : Profile profile2 = new Profile { Name = "Second" };
ManagerTests.cs (16) : User user1 = new User("Mikel", "1111");
ManagerTests.cs (17) : User user2 = new User("Ander", "2222");
ManagerTests.cs (18) : User user3 = new User("Julen", "3333");
ManagerTests.cs (20) : profile1.Users.Add(user1);
ManagerTests.cs (21) : profile1.Users.Add(user2);
ManagerTests.cs (22) : profile2.Users.Add(user3);
ManagerTests.cs (24) : manager.AddProfile(profile1);
ManagerTests.cs (25) : manager.AddProfile(profile2);
ManagerTests.cs (27) : Assert.Equal(profile1, manager.ProfileByUser("Mikel"));
ManagerTests.cs (28) : Assert.Equal(profile1, manager.ProfileByUser("Ander"));
ManagerTests.cs (29) : Assert.Equal(profile2, manager.ProfileByUser("Julen"));
ManagerTests.cs (30) : Assert.Null(manager.ProfileByUser("Aitor"));
ManagerTests.cs (31) : Assert.Null(manager.ProfileByUser(null));
ManagerTests.cs (34) : }
ManagerTests.cs (35) : [Fact]
ManagerTests.cs (36) : public void AddProfile()
ManagerTests.cs (37) : {
ManagerTests.cs (39) : Manager manager = new Manager("Admin");
ManagerTests.cs (41) : Profile profile = new Profile { Name = "First" };
ManagerTests.cs (42) : Profile profile2 = new Profile { Name = "Second"};
ManagerTests.cs (44) : Assert.Empty(manager.Profiles);
ManagerTests.cs (46) : manager.AddProfile(profile);
ManagerTests.cs (47) : Assert.Equal(1, manager.Profiles.Count);
ManagerTests.cs (48) : Assert.Equal("First", manager.Profiles[0].Name);
ManagerTests.cs (50) : manager.AddProfile(profile2);
ManagerTests.cs (51) : Assert.Equal(2, manager.Profiles.Count);
ManagerTests.cs (52) : Assert.Equal("Second", manager.Profiles[1].Name);
ManagerTests.cs (53) : }
RowTests.cs (88) : [Fact]
RowTests.cs (89) : public void TestParse()
RowTests.cs (90) : {
RowTests.cs (91) : List<ColumnDefinition> columns = new List<ColumnDefinition>()
RowTests.cs (92) : {
RowTests.cs (93) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
RowTests.cs (94) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
RowTests.cs (95) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height")
RowTests.cs (96) : };
RowTests.cs (98) : String Result1 = "Ramiro:27:1.87";
RowTests.cs (99) : String Result2 = "Angel:20:1.75";
RowTests.cs (100) : String Result3 = "Marta:22:1.77";
RowTests.cs (102) : Row row1 = Row.Parse(columns, Result1);
RowTests.cs (103) : Row row2 = Row.Parse(columns, Result2);
RowTests.cs (104) : Row row3 = Row.Parse(columns, Result3);
RowTests.cs (106) : Assert.NotNull(row1);
RowTests.cs (107) : Assert.NotNull(row2);
RowTests.cs (108) : Assert.NotNull(row3);
RowTests.cs (109) : Assert.Equal("Ramiro", row1.GetValue("Name"));
RowTests.cs (110) : Assert.Equal("20", row2.GetValue("Age"));
RowTests.cs (111) : Assert.Equal("1.77", row3.GetValue("Height"));
RowTests.cs (113) : }
SelectTest.cs (12) : Select query = MiniSQLParser.Parse("SELECT DNI FROM PLAYERS WHERE EDAD>'18'") as Select;
SelectTest.cs (13) : Assert.NotNull(query);
SelectTest.cs (14) : query = MiniSQLParser.Parse("SELECT DNI FROM PLAYERS WHERE EDAD='15'") as Select;
SelectTest.cs (15) : Assert.NotNull(query);
SelectTest.cs (16) : query = MiniSQLParser.Parse("SELECT DNI FROM PLAYERS") as Select;
SelectTest.cs (17) : Assert.NotNull(query);
SelectTest.cs (18) : query = MiniSQLParser.Parse("SELECT dni,name FROM PLAYERS WHERE AGE='20'") as Select;
SelectTest.cs (19) : Assert.NotNull(query);
SelectTest.cs (20) : query = MiniSQLParser.Parse("select name from players") as Select;
SelectTest.cs (21) : Assert.Null(query);
SelectTest.cs (22) : query = MiniSQLParser.Parse("SELECT DNI FROM PLAYERS WHERE EDAD < '18'") as Select;
SelectTest.cs (23) : Assert.Null(query);
SelectTest.cs (24) : query = MiniSQLParser.Parse("SELECT DNI FROM PLAYERS WHERE EDAD=15") as Select;
SelectTest.cs (25) : Assert.Null(query);
SelectTest.cs (26) : query = MiniSQLParser.Parse("SELECT dni, name FROM PLAYERS WHERE AGE='20'") as Select;
SelectTest.cs (27) : Assert.Null(query);
SelectTest.cs (28) : query = MiniSQLParser.Parse("SELECT dni ,name FROM PLAYERS WHERE AGE='20'") as Select;
SelectTest.cs (29) : Assert.Null(query);
SelectTest.cs (30) : query = MiniSQLParser.Parse("SELECT FROM PLAYERS") as Select;
SelectTest.cs (31) : Assert.Null(query);
SelectTest.cs (32) : query = MiniSQLParser.Parse("SELECT DNI FROM PLAYERS WHERE EDAD<'18' ") as Select;
SelectTest.cs (33) : Assert.Null(query);
SelectTest.cs (35) : }
SelectTest.cs (36) : [Fact]
SelectTest.cs (37) : public void SelectExecute()
SelectTest.cs (38) : {
SelectTest.cs (39) : List<ColumnDefinition> columns = new List<ColumnDefinition>()
SelectTest.cs (40) : {
SelectTest.cs (41) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
SelectTest.cs (42) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
SelectTest.cs (43) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height"),
SelectTest.cs (44) : };
SelectTest.cs (45) : List<String> values = new List<String>() { "Mikel", "67", "1.78" };
SelectTest.cs (46) : List<String> values2 = new List<String>() { "Julen", "22", "1.67" };
SelectTest.cs (47) : List<String> values3 = new List<String>() { "Anne", "33", "1.71" };
SelectTest.cs (48) : List<String> values4 = new List<String>() { "Mikel", "22", "1.90" };
SelectTest.cs (49) : List<String> values5 = new List<String>() { "Julen", "54", "1.87" };
SelectTest.cs (50) : List<String> values6 = new List<String>() { "Anne", "59", "1.84" };
SelectTest.cs (52) : Table table = new Table("TestTable", columns);
SelectTest.cs (54) : Row row = new Row(columns, values);
SelectTest.cs (55) : Row row2 = new Row(columns, values2);
SelectTest.cs (56) : Row row3 = new Row(columns, values3);
SelectTest.cs (57) : Row row4 = new Row(columns, values4);
SelectTest.cs (58) : Row row5 = new Row(columns, values5);
SelectTest.cs (59) : Row row6 = new Row(columns, values6);
SelectTest.cs (61) : table.AddRow(row);
SelectTest.cs (62) : table.AddRow(row2);
SelectTest.cs (63) : table.AddRow(row3);
SelectTest.cs (64) : table.AddRow(row4);
SelectTest.cs (65) : table.AddRow(row5);
SelectTest.cs (66) : table.AddRow(row6);
SelectTest.cs (68) : Database db = new Database("admin", "password");
SelectTest.cs (70) : db.AddTable(table);
SelectTest.cs (72) : Condition Condition1 = new Condition("Age", ">", "60");
SelectTest.cs (73) : List<string> columnNames = new List<String> { "Name", "Age", "Height" };
SelectTest.cs (74) : Table result = table.Select(columnNames, Condition1);
SelectTest.cs (75) : DbManager.Select SelCond = new DbManager.Select("TestTable", columnNames, Condition1);
SelectTest.cs (76) : String result1 = SelCond.Execute(db);
SelectTest.cs (77) : String Comparing = "['Name','Age','Height']{'Mikel','67','1.78'}";
SelectTest.cs (78) : Assert.Equal(result1, Comparing);
SelectTest.cs (81) : Condition Condition2 = new Condition("Age", "<", "20");
SelectTest.cs (82) : List<string> columnNames2 = new List<String> { "Name", "Age" };
SelectTest.cs (83) : Table result2 = table.Select(columnNames2, Condition2);
SelectTest.cs (84) : DbManager.Select SelCond2 = new DbManager.Select("TestTable", columnNames2, Condition2);
SelectTest.cs (85) : String result3 = SelCond2.Execute(db);
SelectTest.cs (86) : String Comparing2 = "['Name','Age']";
SelectTest.cs (87) : Assert.Equal(result3, Comparing2);
SelectTest.cs (89) : DbManager.Select Selcond3 = new DbManager.Select("table", columnNames2, Condition2);
SelectTest.cs (90) : String result4 = Selcond3.Execute(db);
TableTests.cs (2) : using DbManager.Parser;
TableTests.cs (12) : [Fact]
TableTests.cs (13) : public void TestSelect()
TableTests.cs (14) : {
TableTests.cs (15) : List<ColumnDefinition> columns = new List<ColumnDefinition>()
TableTests.cs (16) : {
TableTests.cs (17) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (18) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
TableTests.cs (19) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height"),
TableTests.cs (20) : };
TableTests.cs (21) : List<String> values = new List<String>() { "Mikel", "67", "1.78" };
TableTests.cs (22) : List<String> values2 = new List<String>() { "Julen", "22", "1.67" };
TableTests.cs (23) : List<String> values3 = new List<String>() { "Anne", "33", "1.71" };
TableTests.cs (24) : List<String> values4 = new List<String>() { "Mikel", "22", "1.90" };
TableTests.cs (25) : List<String> values5 = new List<String>() { "Julen", "54", "1.87" };
TableTests.cs (26) : List<String> values6 = new List<String>() { "Anne", "67", "1.84" };
TableTests.cs (28) : Table table = new Table("TestTable", columns);
TableTests.cs (30) : Row row = new Row(columns, values);
TableTests.cs (31) : Row row2 = new Row(columns, values2);
TableTests.cs (32) : Row row3 = new Row(columns, values3);
TableTests.cs (33) : Row row4 = new Row(columns, values4);
TableTests.cs (34) : Row row5 = new Row(columns, values5);
TableTests.cs (35) : Row row6 = new Row(columns, values6);
TableTests.cs (37) : table.AddRow(row);
TableTests.cs (38) : table.AddRow(row2);
TableTests.cs (39) : table.AddRow(row3);
TableTests.cs (40) : table.AddRow(row4);
TableTests.cs (41) : table.AddRow(row5);
TableTests.cs (42) : table.AddRow(row6);
TableTests.cs (44) : Condition Condition1 = new Condition("Age", ">", "30");
TableTests.cs (46) : List<string> columnNames = new List<String> {"Name","Age", "Height"};
TableTests.cs (48) : Table result = table.Select(columnNames, Condition1);
TableTests.cs (50) : Assert.Equal(4, result.NumRows());
TableTests.cs (51) : Assert.Equal(3, result.NumColumns());
TableTests.cs (57) : List<string> columnNames2 = new List<String> { "Name", "Age", "Height" };
TableTests.cs (61) : Assert.Equal(6, result2.NumRows());
TableTests.cs (62) : Assert.Equal(3, result2.NumColumns());
TableTests.cs (74) : }
TableTests.cs (77) : public void TestUpdate()
TableTests.cs (78) : {
TableTests.cs (79) : List<ColumnDefinition> columns = new List<ColumnDefinition>()
TableTests.cs (81) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (82) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age")
TableTests.cs (83) : };
TableTests.cs (84) : List<String> values = new List<String>() { "Mikel", "67" };
TableTests.cs (85) : List<String> values2 = new List<String>() { "Julen", "22" };
TableTests.cs (86) : List<String> values3 = new List<String>() { "Anne", "30" };
TableTests.cs (87) : List<String> values4 = new List<String>() { "Mikel", "22" };
TableTests.cs (88) : List<String> values5 = new List<String>() { "Julen", "54" };
TableTests.cs (89) : List<String> values6 = new List<String>() { "Anne", "67" };
TableTests.cs (91) : Table table = new Table("TestTable", columns);
TableTests.cs (93) : Row row = new Row(columns, values);
TableTests.cs (94) : Row row2 = new Row(columns, values2);
TableTests.cs (95) : Row row3 = new Row(columns, values3);
TableTests.cs (96) : Row row4 = new Row(columns, values4);
TableTests.cs (97) : Row row5 = new Row(columns, values5);
TableTests.cs (98) : Row row6 = new Row(columns, values6);
TableTests.cs (100) : table.AddRow(row);
TableTests.cs (101) : table.AddRow(row2);
TableTests.cs (102) : table.AddRow(row3);
TableTests.cs (103) : table.AddRow(row4);
TableTests.cs (104) : table.AddRow(row5);
TableTests.cs (105) : table.AddRow(row6);
TableTests.cs (107) : List<SetValue> setValues = new List<SetValue>() {new SetValue("Name","Marta")};
TableTests.cs (108) : Condition Condition1 = new Condition("Age", "=", "30");
TableTests.cs (109) : Assert.True(table.Update(setValues, Condition1));
TableTests.cs (110) : Assert.Equal("Marta", table.GetRow(2).Values[0]);
TableTests.cs (112) : [Fact]
TableTests.cs (113) : public void TestToString()
TableTests.cs (114) : {
TableTests.cs (116) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (117) : {
TableTests.cs (118) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (119) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
TableTests.cs (120) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height")
TableTests.cs (121) : };
TableTests.cs (122) : List<ColumnDefinition> columns2 = new List<ColumnDefinition>
TableTests.cs (123) : {
TableTests.cs (125) : };
TableTests.cs (126) : List<String> values = new List<String>() { "Mikel", "67", "1.85" };
TableTests.cs (127) : List<String> values2 = new List<String>() { "Julen", "22", "1.73" };
TableTests.cs (128) : List<String> values3 = new List<String>() { "Anne", "30", "1.79" };
TableTests.cs (131) : Table table = new Table("TestTable", columns);
TableTests.cs (132) : Table table2 = new Table("TestTable2", columns2);
TableTests.cs (134) : Row row = new Row(columns, values);
TableTests.cs (135) : Row row2 = new Row(columns, values2);
TableTests.cs (136) : Row row3 = new Row(columns, values3);
TableTests.cs (139) : table.AddRow(row);
TableTests.cs (140) : table.AddRow(row2);
TableTests.cs (141) : table.AddRow(row3);
TableTests.cs (147) : }
TableTests.cs (149) : [Fact]
TableTests.cs (150) : public void TestColumnIndexByName()
TableTests.cs (151) : {
TableTests.cs (153) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (154) : {
TableTests.cs (155) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (156) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
TableTests.cs (157) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height")
TableTests.cs (158) : };
TableTests.cs (159) : Table table = new Table("TestTable", columns);
TableTests.cs (161) : Assert.Equal(0, table.ColumnIndexByName("Name"));
TableTests.cs (162) : Assert.Equal(2, table.ColumnIndexByName("Height"));
TableTests.cs (164) : Assert.Null(table.ColumnByName("City"));
TableTests.cs (165) : }
TableTests.cs (168) : [Fact]
TableTests.cs (169) : public void TestColumnByNamne()
TableTests.cs (170) : {
TableTests.cs (172) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (173) : {
TableTests.cs (174) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (175) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
TableTests.cs (176) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height")
TableTests.cs (177) : };
TableTests.cs (178) : Table table = new Table("TestTable", columns);
TableTests.cs (180) : Assert.Equal(columns[0], table.ColumnByName("Name"));
TableTests.cs (181) : Assert.Equal(columns[2], table.ColumnByName("Height"));
TableTests.cs (183) : Assert.Null(table.ColumnByName("City"));
TableTests.cs (184) : }
TableTests.cs (187) : [Fact]
TableTests.cs (188) : public void TestGetColumn()
TableTests.cs (189) : {
TableTests.cs (191) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (192) : {
TableTests.cs (193) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (194) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
TableTests.cs (195) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height")
TableTests.cs (196) : };
TableTests.cs (197) : Table table = new Table("TestTable", columns);
TableTests.cs (199) : Assert.Equal(columns[0], table.GetColumn(0));
TableTests.cs (200) : Assert.Equal(columns[2], table.GetColumn(2));
TableTests.cs (202) : Assert.Null(table.GetColumn(3));
TableTests.cs (203) : }
TableTests.cs (225) : [Fact]
TableTests.cs (226) : public void TestNumRows()
TableTests.cs (227) : {
TableTests.cs (228) : List<ColumnDefinition> columns = new List<ColumnDefinition>()
TableTests.cs (229) : {
TableTests.cs (230) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (231) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age")
TableTests.cs (232) : };
TableTests.cs (233) : List<String> values = new List<String>() { "Mikel", "67" };
TableTests.cs (234) : List<String> values2 = new List<String>() { "Julen", "22" };
TableTests.cs (235) : List<String> values3 = new List<String>() { "Anne", "30" };
TableTests.cs (237) : Table table = new Table("TestTable", columns);
TableTests.cs (239) : Row row = new Row(columns, values);
TableTests.cs (240) : Row row2 = new Row(columns, values2);
TableTests.cs (241) : Row row3 = new Row(columns, values3);
TableTests.cs (243) : table.AddRow(row);
TableTests.cs (244) : table.AddRow(row2);
TableTests.cs (245) : table.AddRow(row3);
TableTests.cs (247) : Assert.Equal(3, table.NumRows());
TableTests.cs (249) : }
TableTests.cs (277) : // Arrange: Crear columnas y filas
TableTests.cs (278) : List<ColumnDefinition> columns = new List<ColumnDefinition>()
TableTests.cs (279) : {
TableTests.cs (280) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (281) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age")
TableTests.cs (282) : };
TableTests.cs (284) : Table table = new Table("TestTable", columns);
TableTests.cs (286) : Row row1 = new Row(columns, new List<string>() { "Alice", "30" });
TableTests.cs (287) : Row row2 = new Row(columns, new List<string>() { "Bob", "25" });
TableTests.cs (289) : table.AddRow(row1);
TableTests.cs (290) : table.AddRow(row2);
TableTests.cs (292) : // Act & Assert:
TableTests.cs (293) : // Caso 1: Recuperar una fila existente
TableTests.cs (294) : Assert.Equal(row1, table.GetRow(0));
TableTests.cs (295) : Assert.Equal(row2, table.GetRow(1));
TableTests.cs (297) : // Caso 2: �ndice fuera del rango (debe devolver null)
TableTests.cs (298) : Assert.Null(table.GetRow(2));
TableTests.cs (300) : // Caso 3: �ndice negativo (debe devolver null)
TableTests.cs (301) : Assert.Null(table.GetRow(-1));
UpdateTableTests.cs (35) : query = MiniSQLParser.Parse("UPDATE T SET name='Unai' ") as Update;
UpdateTableTests.cs (36) : Assert.Null(query);
UpdateTableTests.cs (73) : query = MiniSQLParser.Parse("UPDATE alumnos   SET   Name='Javier'  WHERE   Age='20'") as Update;
UpdateTableTests.cs (81) : query = MiniSQLParser.Parse("UPDATE alumnos SET Name='Javier'WHERE Age='34'") as Update;
UpdateTableTests.cs (82) : Assert.Null(query);
Delete.cs (15) : Table = table;
Delete.cs (16) : Where = where;
Delete.cs (25) : if (database.DeleteWhere(Table, Where)== true)
Delete.cs (26) : {
Delete.cs (27) : return Constants.DeleteSuccess;
Delete.cs (28) : }
Delete.cs (29) : else
Delete.cs (30) : {
Delete.cs (31) : return database.LastErrorMessage;
Delete.cs (32) : }
DropSecurityProfile.cs (16) : ProfileName = profileName;
MiniSQLParser.cs (3) : using System.Linq;
MiniSQLParser.cs (21) : const string updateTablePattern = @"UPDATE\s+([a-zA-Z][a-zA-Z0-9]*)\s+SET\s+((?:[a-zA-Z][a-zA-Z0-9]*='[^']*')(?:,[a-zA-Z][a-zA-Z0-9]*='[^']*')*)(?:\s+WHERE\s+([a-zA-Z_]+)(=|!=|<|>)('[^']*'))?$";
MiniSQLParser.cs (30) : const string dropSecurityProfilePattern = @"DROP\s+SECURITY\s+PROFILE\s+([a-zA-Z]+)$";
MiniSQLParser.cs (49) : Match matchDropSecurityProfile = Regex.Match(miniSQLQuery, dropSecurityProfilePattern);
MiniSQLParser.cs (50) : if (matchDropSecurityProfile.Success)
MiniSQLParser.cs (51) : {
MiniSQLParser.cs (52) : string profileName = matchDropSecurityProfile.Groups[1].Value.Trim();
MiniSQLParser.cs (53) : if (string.IsNullOrEmpty(profileName))
MiniSQLParser.cs (54) : {
MiniSQLParser.cs (55) : return null;
MiniSQLParser.cs (56) : }
MiniSQLParser.cs (58) : return new DropSecurityProfile(profileName);
MiniSQLParser.cs (60) : }
MiniSQLParser.cs (67) : string tableName = matchSelect.Groups[2].Value.Trim();
MiniSQLParser.cs (69) : if(columns.Count == 0 || string.IsNullOrWhiteSpace(tableName))
MiniSQLParser.cs (82) : string columnName = matchSelect.Groups[3].Value.Trim();
MiniSQLParser.cs (83) : string symbol = matchSelect.Groups[4].Value.Trim();
MiniSQLParser.cs (84) : string comparingWith = matchSelect.Groups[5].Value.Trim();
MiniSQLParser.cs (86) : condition = new Condition(columnName, symbol, comparingWith);
MiniSQLParser.cs (91) : Select select = new Select(tableName, columns, condition);
MiniSQLParser.cs (92) : return select;
MiniSQLParser.cs (217) : Match matchDelete = Regex.Match(miniSQLQuery, deletePattern);
MiniSQLParser.cs (218) : if (matchDelete.Success)
MiniSQLParser.cs (219) : {
MiniSQLParser.cs (220) : string tableName = matchDelete.Groups[1].Value.Trim();
MiniSQLParser.cs (221) : string columnName = matchDelete.Groups[2].Value.Trim();
MiniSQLParser.cs (222) : string symbol = matchDelete.Groups[3].Value.Trim();
MiniSQLParser.cs (223) : string comparingWith = matchDelete.Groups[4].Value.Trim();
MiniSQLParser.cs (225) : if (string.IsNullOrEmpty(tableName) || string.IsNullOrEmpty(columnName) || string.IsNullOrEmpty(symbol) || string.IsNullOrEmpty(comparingWith))
MiniSQLParser.cs (226) : {
MiniSQLParser.cs (227) : return null;
MiniSQLParser.cs (228) : }
MiniSQLParser.cs (231) : Condition deleteCondition = new Condition(columnName, symbol, comparingWith);
MiniSQLParser.cs (232) : return new Parser.Delete(tableName, deleteCondition);
MiniSQLParser.cs (233) : }
Select.cs (15) : public Select(string table, List<string> columns, Condition condition)
Select.cs (30) : {
Select.cs (32) : }
SetValue.cs (17) : ColumnName = column;
SetValue.cs (18) : Value = value;
Manager.cs (126) : {
Manager.cs (127) : Profiles.Add(profile);
Manager.cs (128) : }
Manager.cs (177) : if (string.IsNullOrWhiteSpace(username))
Manager.cs (178) : {
Manager.cs (179) : return null;
Manager.cs (180) : }
Manager.cs (181) : foreach(var profile in Profiles)
Manager.cs (182) : {
Manager.cs (183) : foreach(var user in profile.Users)
Manager.cs (184) : {
Manager.cs (185) : if(string.Equals(user.Username, username))
Manager.cs (186) : {
Manager.cs (187) : return profile;
Manager.cs (188) : }
Manager.cs (189) : }
Manager.cs (190) : }
DropSecurityProfileTests.cs (38) : DropSecurityProfile query = MiniSQLParser.Parse("Drop SECURITY PROFILE profile") as DropSecurityProfile;
DropSecurityProfileTests.cs (41) : query = MiniSQLParser.Parse("drop security profile OtherProfile") as DropSecurityProfile;
