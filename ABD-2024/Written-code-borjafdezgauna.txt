Constants.cs (1) : ï»¿using System;
Constants.cs (36) : public const string IncorrectLogin = Error + "Incorrect login or non-existing database";
Constants.cs (37) : public const string CouldNotCreateDatabase = Error + "Could not create database";
Constants.cs (38) : public const string NoDatabaseOpen = Error + "This operation cannot be done because there is no open database";
Client.cs (1) : using DbManager;
Client.cs (2) : using System;
Client.cs (3) : using System.Collections;
Client.cs (4) : using System.Collections.Generic;
Client.cs (6) : using System.Linq;
Client.cs (7) : using System.Net.Sockets;
Client.cs (8) : using System.Text;
Client.cs (9) : using System.Threading.Tasks;
Client.cs (11) : namespace DbManager.Network
Client.cs (12) : {
Client.cs (13) : public class Client
Client.cs (14) : {
Client.cs (15) : TcpClient m_tcpClient;
Client.cs (16) : public Client()
Client.cs (17) : {
Client.cs (20) : m_tcpClient = new TcpClient();
Client.cs (21) : }
Client.cs (22) : public bool Connect(string ipAddress, int port)
Client.cs (23) : {
Client.cs (24) : //DEADLINE 6: Connect the tcp client to the given ip/port
Client.cs (25) : //Return false if something goes wrong, true otherwise (try/catch)
Client.cs (36) : return false;
Client.cs (39) : }
Client.cs (41) : private string SendString(string message)
Client.cs (42) : {
Client.cs (43) : //DEADLINE 6: Send a string to the server, read the answer and return it.
Client.cs (44) : //Here, we do not do any Xml formatting, we just send the string as it comes and return the string as it comes
Client.cs (45) : //This private method should be used from Open/SendQuery/Close
Client.cs (46) : //Have a look at the project ClientConsole to see how we can use the TcpClient class
Client.cs (61) : }
Client.cs (63) : public bool Open(string database, string username, string password, out string error)
Client.cs (64) : {
Client.cs (65) : //DEADLINE 6: Send an Open command to the server using SendString
Client.cs (70) : error = null;
Client.cs (74) : return false;
Client.cs (76) : }
Client.cs (93) : public string SendQuery(string query)
Client.cs (94) : {
Client.cs (95) : //DEADLINE 6: Send a Query command to the server using SendString
Client.cs (104) : }
Client.cs (106) : public void Close()
Client.cs (107) : {
Client.cs (108) : //DEADLINE 6: Send a Close command to the server using SendString and close the connection to the server
Client.cs (112) : }
Client.cs (113) : }
Client.cs (114) : }
Server.cs (1) : using System;
Server.cs (2) : using System.Collections.Generic;
Server.cs (3) : using System.Linq;
Server.cs (4) : using System.Net.Sockets;
Server.cs (5) : using System.Net;
Server.cs (6) : using System.Text;
Server.cs (7) : using System.Threading.Tasks;
Server.cs (8) : using DbManager;
Server.cs (9) : using System.IO.Pipes;
Server.cs (10) : using System.Xml;
Server.cs (13) : namespace DbManager.Network
Server.cs (14) : {
Server.cs (15) : public class Server
Server.cs (16) : {
Server.cs (17) : public void Listen(int port)
Server.cs (18) : {
Server.cs (19) : //DEADLINE 6: Implement the server as specified (eGela)
Server.cs (20) : //Have a look at the project ServerConsole to see how a TcpListener is used
Server.cs (21) : //Use XmlSerializer to create Xml commands
Server.cs (121) : }
Server.cs (122) : }
Server.cs (123) : }
XmlDeserializer.cs (1) : using DbManager;
XmlDeserializer.cs (2) : using System;
XmlDeserializer.cs (3) : using System.Collections.Generic;
XmlDeserializer.cs (5) : using System.Linq;
XmlDeserializer.cs (6) : using System.Text;
XmlDeserializer.cs (7) : using System.Text.RegularExpressions;
XmlDeserializer.cs (8) : using System.Threading.Tasks;
XmlDeserializer.cs (10) : namespace DbManager.Network
XmlDeserializer.cs (11) : {
XmlDeserializer.cs (12) : public static class XmlDeserializer
XmlDeserializer.cs (13) : {
XmlDeserializer.cs (14) : public static bool ParseOpen(string command, out string database, out string username, out string password)
XmlDeserializer.cs (15) : {
XmlDeserializer.cs (16) : //TODO DEADLINE 6: Try to parse the xml command using the specified xml format (eGela)
XmlDeserializer.cs (17) : //Return true if 'command' is an Open statement, false otherwise. If true, set the value of database, username and password
XmlDeserializer.cs (19) : database = null;
XmlDeserializer.cs (20) : username = null;
XmlDeserializer.cs (21) : password = null;
XmlDeserializer.cs (33) : return false;
XmlDeserializer.cs (34) : }
XmlDeserializer.cs (36) : public static bool ParseOpenCreateAnswer(string answer, out string error)
XmlDeserializer.cs (37) : {
XmlDeserializer.cs (38) : //TODO DEADLINE 6: Try to parse the answer to an Open/Create command.
XmlDeserializer.cs (39) : //Return true if 'command' is equal to XmlSerializer.OpenCreateSuccess
XmlDeserializer.cs (40) : //If it is an error (<Error>...</Error>), return false and set 'error' with the error message
XmlDeserializer.cs (53) : error = null;
XmlDeserializer.cs (54) : return false;
XmlDeserializer.cs (55) : }
XmlDeserializer.cs (57) : public static bool ParseCreate(string command, out string database, out string username, out string password)
XmlDeserializer.cs (58) : {
XmlDeserializer.cs (59) : //TODO DEADLINE 6: Try to parse a Create xml command using the specified xml format (eGela)
XmlDeserializer.cs (60) : //Return true if 'command' is a Create statement, false otherwise. If true, set the value of database, username and password
XmlDeserializer.cs (62) : database = null;
XmlDeserializer.cs (63) : username = null;
XmlDeserializer.cs (64) : password = null;
XmlDeserializer.cs (76) : }
XmlDeserializer.cs (80) : public static bool ParseQuery(string answer, out string query)
XmlDeserializer.cs (81) : {
XmlDeserializer.cs (82) : //TODO DEADLINE 6: Try to parse a Query xml command using the specified xml format (eGela)
XmlDeserializer.cs (83) : //Return true if 'command' is a Query statement, false otherwise. If true, set the value of query with the content of the command
XmlDeserializer.cs (85) : query = null;
XmlDeserializer.cs (95) : return false;
XmlDeserializer.cs (96) : }
XmlDeserializer.cs (98) : public static bool ParseQueryAnswer(string answer, out string answerContent)
XmlDeserializer.cs (99) : {
XmlDeserializer.cs (100) : //TODO DEADLINE 6: Try to parse the answer to a Query command.
XmlDeserializer.cs (101) : //Return true if 'command' does not contain an error inside (<Error>...</Error>)
XmlDeserializer.cs (102) : //If it is an error (<Error>...</Error>), return false and set 'answerContent' with the error message
XmlDeserializer.cs (104) : answerContent = null;
XmlDeserializer.cs (120) : return false;
XmlDeserializer.cs (121) : }
XmlDeserializer.cs (123) : public static bool IsCloseCommand(string command)
XmlDeserializer.cs (124) : {
XmlDeserializer.cs (125) : return command == XmlSerializer.CloseConnection;
XmlDeserializer.cs (126) : }
XmlDeserializer.cs (127) : }
XmlDeserializer.cs (128) : }
XmlSerializer.cs (1) : using System;
XmlSerializer.cs (2) : using System.Collections.Generic;
XmlSerializer.cs (3) : using System.Linq;
XmlSerializer.cs (4) : using System.Text;
XmlSerializer.cs (5) : using System.Threading.Tasks;
XmlSerializer.cs (7) : namespace DbManager.Network
XmlSerializer.cs (8) : {
XmlSerializer.cs (9) : public static class XmlSerializer
XmlSerializer.cs (10) : {
XmlSerializer.cs (11) : public static string OpenDatabase(string database, string username, string password)
XmlSerializer.cs (12) : {
XmlSerializer.cs (14) : return $"<Open Database=\"{database}\" User=\"{username}\" Password=\"{password}\"/>";
XmlSerializer.cs (15) : }
XmlSerializer.cs (18) : public static string OpenCreateSuccess = "<Success/>";
XmlSerializer.cs (19) : public static string OpenCreateError(string error)
XmlSerializer.cs (20) : {
XmlSerializer.cs (21) : return $"<Error>{error}</Error>";
XmlSerializer.cs (22) : }
XmlSerializer.cs (24) : public static string CreateDatabase(string database, string username, string password)
XmlSerializer.cs (25) : {
XmlSerializer.cs (26) : return $"<Create Database=\"{database}\" User=\"{username}\" Password=\"{password}\"/>";
XmlSerializer.cs (27) : }
XmlSerializer.cs (29) : public static string CreateSuccess = "<Success/>";
XmlSerializer.cs (30) : public static string CreateError(string error)
XmlSerializer.cs (31) : {
XmlSerializer.cs (32) : return $"<Error>{error}</Error>";
XmlSerializer.cs (33) : }
XmlSerializer.cs (35) : public static string Query(string query)
XmlSerializer.cs (36) : {
XmlSerializer.cs (37) : return $"<Query>{query}</Query>";
XmlSerializer.cs (38) : }
XmlSerializer.cs (40) : public static string SucessfulAnswer(string answer)
XmlSerializer.cs (41) : {
XmlSerializer.cs (42) : return $"<Answer>{answer}</Answer>";
XmlSerializer.cs (43) : }
XmlSerializer.cs (45) : public static string ErrorAnswer(string error)
XmlSerializer.cs (46) : {
XmlSerializer.cs (47) : return $"<Answer><Error>{error}</Error></Answer>";
XmlSerializer.cs (48) : }
XmlSerializer.cs (50) : public static string CloseConnection = "<Close/>";
XmlSerializer.cs (51) : }
XmlSerializer.cs (52) : }
