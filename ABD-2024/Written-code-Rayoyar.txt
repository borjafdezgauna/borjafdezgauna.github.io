Database.cs (8) : using System.Runtime.CompilerServices;
Database.cs (72) : {
Database.cs (74) : {
Database.cs (75) : Table tabla = new Table(tableName, ColumnDefinition);
Database.cs (77) : LastErrorMessage = Constants.CreateTableSuccess;
Database.cs (78) : return true;
Database.cs (81) : {
Database.cs (82) : LastErrorMessage = Constants.ColumnDoesNotExistError;
Database.cs (84) : }
Database.cs (87) : {
Database.cs (88) : LastErrorMessage = Constants.TableAlreadyExistsError;
Database.cs (89) : return false;
Database.cs (90) : }
Database.cs (100) : Tables.Remove(TableByName(tableName));
Database.cs (101) : LastErrorMessage = Constants.DropTableSuccess;
Database.cs (102) : return true;
Database.cs (103) : }
Database.cs (104) : LastErrorMessage = Constants.TableDoesNotExistError;
Database.cs (172) : Table table = TableByName(tableName);
Database.cs (175) : if (columnCondition != null)
Database.cs (178) : {
Database.cs (179) : table.DeleteWhere(columnCondition);
Database.cs (181) : return true;
Database.cs (182) : }
Database.cs (186) : else
Database.cs (187) : {
Database.cs (188) : LastErrorMessage = Constants.Error;
Database.cs (189) : return false;
Database.cs (190) : }
Database.cs (191) : }
Database.cs (192) : LastErrorMessage = Constants.TableDoesNotExistError;
Database.cs (201) : Table t = TableByName(tableName);
Database.cs (203) : {
Database.cs (207) : {
Database.cs (211) : return false;
Database.cs (212) : }
Database.cs (213) : }
Row.cs (80) : /*String result = "";
Row.cs (83) : if(c.Equals(Delimiter))
Row.cs (84) : {
Row.cs (85) : result += DelimiterEncoded;
Row.cs (86) : }
Row.cs (87) : else
Row.cs (88) : {
Row.cs (89) : result += c;
Row.cs (90) : }
Row.cs (91) : }
Row.cs (92) : return result;*/
Row.cs (93) : return value.Replace(Delimiter, DelimiterEncoded);
Row.cs (99) : /*String result = "";
Row.cs (100) : foreach (Char c in value)
Row.cs (101) : {
Row.cs (102) : if (c.Equals(DelimiterEncoded))
Row.cs (103) : {
Row.cs (104) : result += Delimiter;
Row.cs (105) : }
Row.cs (106) : else
Row.cs (107) : {
Row.cs (108) : result += c;
Row.cs (109) : }
Row.cs (110) : }
Row.cs (111) : return result;*/
Row.cs (112) : return value.Replace(DelimiterEncoded, Delimiter);
Row.cs (118) : String result = "";
Row.cs (119) : int i = 1;
Row.cs (120) : foreach(String s in  Values)
Row.cs (121) : {
Row.cs (122) : if (i != Values.Count)
Row.cs (123) : {
Row.cs (124) : result += Encode(s) + Delimiter;
Row.cs (125) : }
Row.cs (126) : else
Row.cs (127) : {
Row.cs (129) : }
Row.cs (130) : i++;
Row.cs (131) : }
Row.cs (132) : return result;
Row.cs (138) : string[] values = value.Split(Delimiter);
Row.cs (139) : List<string> values1 = new List<string>();
Row.cs (140) : int j = 1;
Row.cs (141) : string result = "";
Row.cs (142) : foreach(string v in values)
Row.cs (143) : {
Row.cs (144) : values1.Add(Decode(v));
Row.cs (145) : }
Row.cs (146) : Row row = new Row(columns,values1);
Row.cs (147) : /*foreach (Char c in value)
Row.cs (148) : {
Row.cs (149) : if (c.Equals(Delimiter))
Row.cs (150) : {
Row.cs (151) : values[i] += result;
Row.cs (152) : i++;
Row.cs (153) : result = "";
Row.cs (154) : }
Row.cs (155) : else
Row.cs (156) : {
Row.cs (157) : result += c;
Row.cs (158) : }
Row.cs (159) : }*/
Row.cs (161) : return row;
Table.cs (158) : public List<int> RowIndicesWhereConditionIsTrue(Condition condition)
Table.cs (169) : i++;
Table.cs (226) : Rows.Add(new Row(ColumnDefinitions,values));
Table.cs (227) : //Rows.Insert(Rows.Count+1,new Row(ColumnDefinitions,values));
Table.cs (238) : foreach(int i in RowIndicesWhereConditionIsTrue(condition))
Table.cs (240) : foreach(SetValue setValue in setValues)
Table.cs (242) : Rows[i].SetValue(setValue.ColumnName, setValue.Value);
Table.cs (243) : }
DatabaseTests.cs (2) : using DbManager;
DatabaseTests.cs (18) : public void TestCreateTable()
DatabaseTests.cs (19) : {
DatabaseTests.cs (20) : Database DB = Database.CreateTestDatabase();
DatabaseTests.cs (21) : List<ColumnDefinition> columns = new List<ColumnDefinition> { };
DatabaseTests.cs (25) : [Fact]
RowTests.cs (39) : [Fact]
RowTests.cs (81) : [Fact]
RowTests.cs (82) : public void TestParse()
RowTests.cs (83) : {
RowTests.cs (84) : List<ColumnDefinition> colums = new List<ColumnDefinition>()
RowTests.cs (85) : {
RowTests.cs (86) : new ColumnDefinition(ColumnDefinition.DataType.String,"Name"),
RowTests.cs (87) : new ColumnDefinition(ColumnDefinition.DataType.Int,"Age")
RowTests.cs (88) : };
RowTests.cs (89) : List<String> values = new List<String>() { "Juan", "29" };
RowTests.cs (90) : List<String> values1 = new List<String>() { "Jon", "31" };
RowTests.cs (91) : Row row2 = new Row(colums, values1);
RowTests.cs (92) : Row row = new Row(colums, values);
RowTests.cs (93) : row = Row.Parse(colums, row2.AsText());
RowTests.cs (94) : Row row1 = new Row(colums, values1);
RowTests.cs (95) : Assert.Equal(row1.GetValue("Name"), row.GetValue("Name"));
RowTests.cs (96) : Assert.Equal(row1.GetValue("Age"), row.GetValue("Age"));
RowTests.cs (98) : row = Row.Parse(colums, "Jon 31: ");
RowTests.cs (99) : Assert.NotEqual(row1.GetValue("Name"), row.GetValue("Name"));
RowTests.cs (100) : Assert.NotEqual(row1.GetValue("Age"), row.GetValue("Age"));
RowTests.cs (101) : }
TableTests.cs (2) : using DbManager;
TableTests.cs (35) : [Fact]
TableTests.cs (36) : public void TestNumRows()
TableTests.cs (37) : {
TableTests.cs (38) : Table table = Table.CreateTestTable("table");
TableTests.cs (39) : Assert.Equal(3, table.NumRows());
TableTests.cs (40) : }
TableTests.cs (43) : public void TestColumnIndexByName()
TableTests.cs (47) : }
TableTests.cs (49) : [Fact]
TableTests.cs (50) : public void TestDeleteIthRow()
TableTests.cs (51) : {
TableTests.cs (57) : }
TableTests.cs (59) : [Fact]
TableTests.cs (60) : public void TestRowIndicesWhereConditionIsTrue()
TableTests.cs (61) : {
TableTests.cs (62) : Table tabla = Table.CreateTestTable("tabla");
TableTests.cs (63) : Condition condicion1 = new Condition("Height", "<", "1.63");
TableTests.cs (64) : List<int> rows1 = tabla.RowIndicesWhereConditionIsTrue(condicion1);
TableTests.cs (65) : Assert.Equal(2, rows1.Count);
TableTests.cs (66) : Condition condicion2 = new Condition("Age", ">", "40");
TableTests.cs (67) : List<int> rows2 = tabla.RowIndicesWhereConditionIsTrue(condicion2);
TableTests.cs (68) : Assert.Equal(2, rows2.Count);
TableTests.cs (69) : Condition condicion3 = new Condition("Name", "<", "Noa");
TableTests.cs (70) : List<int> rows3 = tabla.RowIndicesWhereConditionIsTrue(condicion3);
TableTests.cs (71) : Assert.Equal(1, rows3.Count);
TableTests.cs (187) : [Fact]
TableTests.cs (188) : public void TestInsert()
TableTests.cs (189) : {
TableTests.cs (190) : Table table = Table.CreateTestTable("table");
TableTests.cs (191) : List<string> values1 = new List<string>();
TableTests.cs (192) : values1.Add("value1");
TableTests.cs (193) : values1.Add("value2");
TableTests.cs (194) : values1.Add("value3");
TableTests.cs (195) : List<string> values2 = new List<string>();
TableTests.cs (196) : values2.Add("value1");
TableTests.cs (197) : values2.Add("value2");
TableTests.cs (198) : Assert.True(table.Insert(values1));
TableTests.cs (199) : Assert.False(table.Insert(values2));
TableTests.cs (200) : Assert.Equal("value1",table.GetRow(3).GetValue("Name"));
TableTests.cs (201) : Assert.Equal("value2", table.GetRow(3).GetValue("Height"));
TableTests.cs (202) : Assert.Equal("value3", table.GetRow(3).GetValue("Age"));
TableTests.cs (203) : }
AddUser.cs (28) : if (database.IsUserAdmin())
AddUser.cs (29) : {
AddUser.cs (30) : Security.Profile profile = database.SecurityManager.ProfileByName(ProfileName);
AddUser.cs (43) : return Constants.AddUserSuccess;
AddUser.cs (44) : }
AddUser.cs (45) : else
AddUser.cs (46) : {
AddUser.cs (47) : return Constants.SecurityProfileDoesNotExistError;
AddUser.cs (48) : }
AddUser.cs (49) : }
AddUser.cs (50) : else
AddUser.cs (51) : {
AddUser.cs (52) : return Constants.UsersProfileIsNotGrantedRequiredPrivilege;
AddUser.cs (53) : }
CreateSecurityProfile.cs (4) : using System.Text.RegularExpressions;
CreateSecurityProfile.cs (6) : using DbManager.Security;
CreateSecurityProfile.cs (25) : if (database.IsUserAdmin())
CreateSecurityProfile.cs (26) : {
CreateSecurityProfile.cs (27) : Profile profile = new Profile();
CreateSecurityProfile.cs (28) : profile.Name = ProfileName;
CreateSecurityProfile.cs (29) : database.SecurityManager.AddProfile(profile);
CreateSecurityProfile.cs (30) : return Constants.CreateSecurityProfileSuccess;
CreateSecurityProfile.cs (33) : return Constants.UsersProfileIsNotGrantedRequiredPrivilege;
CreateSecurityProfile.cs (34) : }
CreateTable.cs (24) : if(database.TableByName(Table)==null)
CreateTable.cs (25) : {
CreateTable.cs (26) : if(ColumnsParameters.Count == 0)
CreateTable.cs (27) : {
CreateTable.cs (28) : return Constants.DatabaseCreatedWithoutColumnsError;
CreateTable.cs (29) : }
CreateTable.cs (30) : else
CreateTable.cs (31) : {
CreateTable.cs (32) : database.CreateTable(Table,ColumnsParameters);
CreateTable.cs (33) : return Constants.CreateTableSuccess;
CreateTable.cs (34) : }
CreateTable.cs (35) : }
CreateTable.cs (36) : else
CreateTable.cs (37) : {
CreateTable.cs (38) : return Constants.TableAlreadyExistsError;
CreateTable.cs (39) : }
DeleteUser.cs (5) : using DbManager.Security;
DeleteUser.cs (24) : if (database.IsUserAdmin())
DeleteUser.cs (25) : {
DeleteUser.cs (26) : Profile profile = database.SecurityManager.ProfileByUser(Username);
DeleteUser.cs (27) : User user = database.SecurityManager.UserByName(Username);
DeleteUser.cs (28) : if (user != null)
DeleteUser.cs (29) : {
DeleteUser.cs (30) : if(profile != null)
DeleteUser.cs (31) : {
DeleteUser.cs (32) : profile.Users.Remove(user);
DeleteUser.cs (33) : return Constants.DeleteUserSuccess;
DeleteUser.cs (34) : }
DeleteUser.cs (35) : else
DeleteUser.cs (36) : {
DeleteUser.cs (37) : return Constants.SecurityProfileDoesNotExistError;
DeleteUser.cs (38) : }
DeleteUser.cs (39) : }
DeleteUser.cs (40) : else
DeleteUser.cs (41) : {
DeleteUser.cs (42) : return Constants.UserDoesNotExistError;
DeleteUser.cs (43) : }
DeleteUser.cs (44) : }
DeleteUser.cs (45) : else
DeleteUser.cs (46) : {
DeleteUser.cs (47) : return Constants.UsersProfileIsNotGrantedRequiredPrivilege;
DeleteUser.cs (48) : }
DropSecurityProfile.cs (23) : if(database.IsUserAdmin())
DropSecurityProfile.cs (24) : {
DropSecurityProfile.cs (25) : if(database.SecurityManager.ProfileByName(ProfileName) != null)
DropSecurityProfile.cs (26) : {
DropSecurityProfile.cs (27) : database.SecurityManager.RemoveProfile(ProfileName);
DropSecurityProfile.cs (28) : return Constants.DropSecurityProfileSuccess;
DropSecurityProfile.cs (29) : }
DropSecurityProfile.cs (30) : else
DropSecurityProfile.cs (31) : {
DropSecurityProfile.cs (32) : return Constants.SecurityProfileDoesNotExistError;
DropSecurityProfile.cs (33) : }
DropSecurityProfile.cs (34) : }
DropSecurityProfile.cs (35) : else
DropSecurityProfile.cs (36) : {
DropSecurityProfile.cs (37) : return Constants.UsersProfileIsNotGrantedRequiredPrivilege;
DropSecurityProfile.cs (38) : }
DropTable.cs (22) : if (database.TableByName(Table) == null)
DropTable.cs (23) : {
DropTable.cs (24) : return Constants.TableDoesNotExistError;
DropTable.cs (25) : }
DropTable.cs (26) : else
DropTable.cs (27) : {
DropTable.cs (29) : return Constants.DropTableSuccess;
DropTable.cs (30) : }
Insert.cs (25) : if (database.TableByName(Table) != null)
Insert.cs (26) : {
Insert.cs (27) : if (database.TableByName(Table).NumColumns() != Values.Count)
Insert.cs (28) : {
Insert.cs (29) : return Constants.SyntaxError;
Insert.cs (30) : }
Insert.cs (31) : else
Insert.cs (32) : {
Insert.cs (34) : return Constants.InsertSuccess;
Insert.cs (35) : }
Insert.cs (36) : }
Insert.cs (37) : else
Insert.cs (38) : {
Insert.cs (39) : return Constants.TableDoesNotExistError;
Insert.cs (40) : }
MiniSQLParser.cs (2) : using System;
MiniSQLParser.cs (5) : using System.Linq;
MiniSQLParser.cs (7) : using System.Xml.Schema;
MiniSQLParser.cs (32) : const string createSecurityProfilePattern = @"^CREATE\s+SECURITY\s+PROFILE\s+([A-Za-z]+)$";
MiniSQLParser.cs (34) : const string dropSecurityProfilePattern = @"^DROP\s+SECURITY\s+PROFILE\s+([A-Za-z]+)$";
MiniSQLParser.cs (38) : const string revokePattern = @"^REVOKE\s+(DELETE|INSERT|SELECT|UPDATE)\s+ON\s+(\w+)\s+TO\s+([A-Za-z]+)$";
MiniSQLParser.cs (42) : const string deleteUserPattern = @"^DELETE\s+USER\s+([A-Za-z]+)$";
MiniSQLParser.cs (65) : }
MiniSQLParser.cs (68) : {
MiniSQLParser.cs (92) : }
MiniSQLParser.cs (101) : {
MiniSQLParser.cs (130) : }
MiniSQLParser.cs (134) : {
MiniSQLParser.cs (135) : string table = match.Groups[1].Value;
MiniSQLParser.cs (136) : List<SetValue> setValues = createSetValuesList(CommaSeparatedNames(match.Groups[2].Value));
MiniSQLParser.cs (137) : Condition condition = null;
MiniSQLParser.cs (143) : {
MiniSQLParser.cs (146) : }
MiniSQLParser.cs (147) : return new Update(table, setValues, condition);
MiniSQLParser.cs (148) : }
MiniSQLParser.cs (156) : {
MiniSQLParser.cs (162) : }
MiniSQLParser.cs (165) : match = Regex.Match(miniSQLQuery, createSecurityProfilePattern);
MiniSQLParser.cs (166) : if (match.Success)
MiniSQLParser.cs (167) : {
MiniSQLParser.cs (168) : string securityProfile = match.Groups[1].Value;
MiniSQLParser.cs (169) : return new CreateSecurityProfile(securityProfile);
MiniSQLParser.cs (170) : }
MiniSQLParser.cs (172) : match = Regex.Match(miniSQLQuery, dropSecurityProfilePattern);
MiniSQLParser.cs (173) : if (match.Success)
MiniSQLParser.cs (174) : {
MiniSQLParser.cs (175) : string securityProfile = match.Groups[1].Value;
MiniSQLParser.cs (176) : return new DropSecurityProfile(securityProfile);
MiniSQLParser.cs (177) : }
MiniSQLParser.cs (179) : match = Regex.Match(miniSQLQuery, grantPattern);
MiniSQLParser.cs (180) : if (match.Success)
MiniSQLParser.cs (181) : {
MiniSQLParser.cs (182) : string privilegeName = match.Groups[1].Value;
MiniSQLParser.cs (183) : string tableName = match.Groups[2].Value;
MiniSQLParser.cs (184) : string securityProfile = match.Groups[3].Value;
MiniSQLParser.cs (185) : return new Grant(privilegeName, tableName, securityProfile);
MiniSQLParser.cs (186) : }
MiniSQLParser.cs (210) : return null;
MiniSQLParser.cs (213) : static Condition createCondition(string condition)
MiniSQLParser.cs (214) : {
MiniSQLParser.cs (225) : return condition1;
MiniSQLParser.cs (226) : }
MiniSQLParser.cs (228) : static List<SetValue> createSetValuesList(List<string> columns)
MiniSQLParser.cs (229) : {
MiniSQLParser.cs (230) : List<SetValue> setValues = new List<SetValue>();
MiniSQLParser.cs (231) : SetValue value = null;
MiniSQLParser.cs (232) : foreach (string column in columns)
MiniSQLParser.cs (233) : {
MiniSQLParser.cs (238) : {
MiniSQLParser.cs (241) : }
MiniSQLParser.cs (242) : setValues.Add(value);
MiniSQLParser.cs (243) : }
MiniSQLParser.cs (249) : return setValues;
MiniSQLParser.cs (250) : }
MiniSQLParser.cs (253) : static List<ColumnDefinition> createColumnsList(List<string> columns)
MiniSQLParser.cs (254) : {
MiniSQLParser.cs (255) : List<ColumnDefinition> columnDefinitions = new List<ColumnDefinition>();
MiniSQLParser.cs (313) : return null;
MiniSQLParser.cs (314) : }
Revoke.cs (28) : Security.Privilege Privilege = new Security.Privilege();
Revoke.cs (29) : if (database.IsUserAdmin())
Revoke.cs (30) : {
Revoke.cs (33) : {
Revoke.cs (34) : switch (PrivilegeName)
Revoke.cs (35) : {
Revoke.cs (36) : case "DELETE":
Revoke.cs (37) : Privilege = Security.Privilege.Delete;
Revoke.cs (38) : break;
Revoke.cs (39) : case "INSERT":
Revoke.cs (40) : Privilege = Security.Privilege.Insert;
Revoke.cs (41) : break;
Revoke.cs (42) : case "SELECT":
Revoke.cs (43) : Privilege = Security.Privilege.Select;
Revoke.cs (44) : break;
Revoke.cs (45) : case "UPDATE":
Revoke.cs (46) : Privilege = Security.Privilege.Update;
Revoke.cs (47) : break;
Revoke.cs (48) : default:
Revoke.cs (53) : database.SecurityManager.RevokePrivilege(ProfileName, TableName, Privilege);
Revoke.cs (54) : return Constants.RevokePrivilegeSuccess;
Revoke.cs (55) : }
Revoke.cs (56) : else
Revoke.cs (62) : {
Revoke.cs (63) : return Constants.SecurityProfileDoesNotExistError;
Revoke.cs (64) : }
Revoke.cs (65) : }
Revoke.cs (66) : else
Revoke.cs (67) : {
Revoke.cs (68) : return Constants.UsersProfileIsNotGrantedRequiredPrivilege;
Revoke.cs (69) : }
Revoke.cs (70) : }
Update.cs (30) : for (int i = 0;i < Columns.Count; i++)
Manager.cs (24) : Profile u = ProfileByUser(m_username);
Manager.cs (25) : if(u != null)
Manager.cs (26) : {
Manager.cs (27) : if(u.Name==Profile.AdminProfileName)
Manager.cs (28) : {
Manager.cs (29) : return true;
Manager.cs (30) : }
Manager.cs (31) : }
Manager.cs (38) : User user = UserByName(username);
Manager.cs (39) : if (user != null)
Manager.cs (40) : {
Manager.cs (41) : if (user.EncryptedPassword==Encryption.Encrypt(password))
Manager.cs (42) : {
Manager.cs (43) : return true;
Manager.cs (44) : }
Manager.cs (45) : }
Manager.cs (54) : Profile p = ProfileByName(profileName);
Manager.cs (55) : if(p != null)
Manager.cs (56) : {
Manager.cs (57) : p.GrantPrivilege(table, privilege);
Manager.cs (58) : }
Manager.cs (65) : Profile p = ProfileByName(profileName);
Manager.cs (66) : if (p != null)
Manager.cs (67) : {
Manager.cs (68) : p.RevokePrivilege(table, privilege);
Manager.cs (69) : }
Manager.cs (75) : Profile p = ProfileByUser(username);
Manager.cs (76) : if (p != null)
Manager.cs (77) : {
Manager.cs (78) : p.IsGrantedPrivilege(table, privilege);
Manager.cs (79) : }
Manager.cs (87) : Profiles.Add(profile);
Manager.cs (94) : return Profiles.SelectMany(p => p.Users).FirstOrDefault(u => u.Username == username);
Manager.cs (101) : return Profiles.FirstOrDefault(p => p.Name == profileName); ;
Manager.cs (109) : return Profiles.FirstOrDefault(p => p.Users.Any(u => u.Username == username)); ;
Manager.cs (116) : if (ProfileByName(profileName) == null)
Manager.cs (117) : {
Manager.cs (120) : Profiles.Remove(ProfileByName(profileName));
Manager.cs (121) : return true;
Manager.cs (122) : }
Profile.cs (6) : using System.Windows.Markup;
Profile.cs (24) : {
Profile.cs (26) : }
Profile.cs (29) : PrivilegesOn[table].Add(privilege);
Profile.cs (41) : {
Profile.cs (42) : PrivilegesOn[table].Remove(privilege);
Profile.cs (47) : return true;
Profile.cs (48) : }
Profile.cs (50) : return false;
Profile.cs (51) : }
Profile.cs (56) : if (!PrivilegesOn.ContainsKey(table))
Profile.cs (57) : {
Profile.cs (60) : return PrivilegesOn[table].Contains(privilege);
Profile.cs (61) : }
User.cs (16) : Username= username;
User.cs (17) : EncryptedPassword= Encryption.Encrypt(password);
CreateTableTests.cs (4) : using System.Collections.Generic;
CreateTableTests.cs (5) : using System.Linq;
CreateTableTests.cs (6) : using System.Text;
CreateTableTests.cs (7) : using System.Threading.Tasks;
CreateTableTests.cs (10) : {
CreateTableTests.cs (12) : {
CreateTableTests.cs (46) : }
CreateTableTests.cs (47) : }
DeleteTests.cs (1) : ﻿using System;
DeleteTests.cs (2) : using System.Collections.Generic;
DeleteTests.cs (3) : using System.Linq;
DeleteTests.cs (4) : using System.Text;
DeleteTests.cs (5) : using System.Threading.Tasks;
DeleteTests.cs (10) : {
DeleteTests.cs (12) : {
DeleteTests.cs (68) : }
DeleteTests.cs (69) : }
DropTableTests.cs (40) : [Fact]
DropTableTests.cs (41) : public void DropTableExecuteTest()
DropTableTests.cs (42) : {
DropTableTests.cs (43) : Database d1 = Database.CreateTestDatabase();
DropTableTests.cs (44) : DropTable query = null;
DropTableTests.cs (46) : query = MiniSQLParser.Parse("DROP TABLE table1") as DropTable;
DropTableTests.cs (47) : Assert.Equal(query.Execute(d1), Constants.TableDoesNotExistError);
DropTableTests.cs (49) : query = MiniSQLParser.Parse("DROP TABLE TestTable") as DropTable;
DropTableTests.cs (50) : Assert.Equal(query.Execute(d1),Constants.DropTableSuccess);
DropTableTests.cs (51) : }
InsertTests.cs (1) : ﻿using System;
InsertTests.cs (2) : using System.Collections.Generic;
InsertTests.cs (3) : using System.Linq;
InsertTests.cs (4) : using System.Text;
InsertTests.cs (5) : using System.Threading.Tasks;
InsertTests.cs (10) : {
InsertTests.cs (16) : {
InsertTests.cs (74) : [Fact]
InsertTests.cs (75) : public void ExecuteTests()
InsertTests.cs (76) : {
InsertTests.cs (77) : Insert query = null;
InsertTests.cs (78) : Database d1 = Database.CreateTestDatabase();
InsertTests.cs (80) : query = MiniSQLParser.Parse("INSERT        INTO  TestTable  VALUES      ('v1','v2','v3')") as Insert;
InsertTests.cs (81) : Assert.Equal(query.Execute(d1), Constants.InsertSuccess);
InsertTests.cs (83) : query = MiniSQLParser.Parse("INSERT        INTO  Table  VALUES      ('v1','v2','v3')") as Insert;
InsertTests.cs (84) : Assert.Equal(query.Execute(d1), Constants.TableDoesNotExistError);
InsertTests.cs (86) : query = MiniSQLParser.Parse("INSERT        INTO  TestTable  VALUES      ('v2','v3')") as Insert;
InsertTests.cs (87) : Assert.Equal(query.Execute(d1), Constants.SyntaxError);
InsertTests.cs (88) : }
InsertTests.cs (89) : }
InsertTests.cs (90) : }
SelectTests.cs (1) : ﻿using DbManager;
SelectTests.cs (2) : using System;
SelectTests.cs (3) : using System.Collections.Generic;
SelectTests.cs (4) : using System.Linq;
SelectTests.cs (5) : using System.Text;
SelectTests.cs (6) : using System.Threading.Tasks;
SelectTests.cs (10) : {
SelectTests.cs (12) : {
SelectTests.cs (76) : }
SelectTests.cs (77) : }
UpdateTests.cs (1) : ﻿using DbManager.Parser;
UpdateTests.cs (2) : using DbManager;
UpdateTests.cs (3) : using System;
UpdateTests.cs (4) : using System.Collections.Generic;
UpdateTests.cs (5) : using System.Linq;
UpdateTests.cs (6) : using System.Text;
UpdateTests.cs (7) : using System.Threading.Tasks;
UpdateTests.cs (10) : {
UpdateTests.cs (11) : public class UpdateTests
UpdateTests.cs (12) : {
UpdateTests.cs (13) : [Fact]
UpdateTests.cs (14) : public void SimpleStringValue()
UpdateTests.cs (15) : {
UpdateTests.cs (16) : List<SetValue> setValues = new List<SetValue>();
UpdateTests.cs (17) : SetValue value = new SetValue("nombre", "Ana");
UpdateTests.cs (18) : setValues.Add(value);
UpdateTests.cs (20) : Update query = MiniSQLParser.Parse("UPDATE table SET nombre    = 'Ana' WHERE nombre='Miguel'") as Update;
UpdateTests.cs (24) : Assert.NotNull(query2);
UpdateTests.cs (25) : Assert.Equal("table", query2.Table);
UpdateTests.cs (26) : Assert.Equal(setValues[0].ColumnName, query2.Columns[0].ColumnName);
UpdateTests.cs (27) : Assert.Equal(setValues[0].Value, query2.Columns[0].Value);
UpdateTests.cs (28) : Assert.Equal("nombre", query2.Where.ColumnName);
UpdateTests.cs (29) : Assert.Equal("=", query2.Where.Operator);
UpdateTests.cs (30) : Assert.Equal("Miguel", query2.Where.LiteralValue);
UpdateTests.cs (32) : }
UpdateTests.cs (33) : [Fact]
UpdateTests.cs (34) : public void SimpleIntValue()
UpdateTests.cs (35) : {
UpdateTests.cs (36) : List<SetValue> setValues = new List<SetValue>();
UpdateTests.cs (37) : SetValue value = new SetValue("edad", "42");
UpdateTests.cs (38) : setValues.Add(value);
UpdateTests.cs (41) : Assert.NotNull(query);
UpdateTests.cs (42) : Assert.Equal("table", query.Table);
UpdateTests.cs (43) : Assert.Equal(setValues[0].ColumnName, query.Columns[0].ColumnName);
UpdateTests.cs (44) : Assert.Equal(setValues[0].Value, query.Columns[0].Value);
UpdateTests.cs (45) : Assert.Equal("edad", query.Where.ColumnName);
UpdateTests.cs (46) : Assert.Equal(">", query.Where.Operator);
UpdateTests.cs (47) : Assert.Equal("21", query.Where.LiteralValue);
UpdateTests.cs (50) : Assert.NotNull(query2);
UpdateTests.cs (51) : Assert.Equal("table", query2.Table);
UpdateTests.cs (52) : Assert.Equal(setValues[0].ColumnName, query2.Columns[0].ColumnName);
UpdateTests.cs (53) : Assert.Equal(setValues[0].Value, query2.Columns[0].Value);
UpdateTests.cs (54) : Assert.Equal("edad", query2.Where.ColumnName);
UpdateTests.cs (55) : Assert.Equal("<", query2.Where.Operator);
UpdateTests.cs (56) : Assert.Equal("21", query2.Where.LiteralValue);
UpdateTests.cs (57) : }
UpdateTests.cs (58) : [Fact]
UpdateTests.cs (59) : public void SimpleDoubleValue()
UpdateTests.cs (60) : {
UpdateTests.cs (61) : List<SetValue> setValues = new List<SetValue>();
UpdateTests.cs (62) : SetValue value = new SetValue("edad", "42");
UpdateTests.cs (63) : setValues.Add(value);
UpdateTests.cs (64) : List<SetValue> setValues2 = new List<SetValue>();
UpdateTests.cs (65) : SetValue value2 = new SetValue("nombre", "Ana");
UpdateTests.cs (66) : setValues2.Add(value2);
UpdateTests.cs (70) : Assert.NotNull(query);
UpdateTests.cs (71) : Assert.Equal("table", query.Table);
UpdateTests.cs (72) : Assert.Equal(setValues[0].ColumnName, query.Columns[0].ColumnName);
UpdateTests.cs (73) : Assert.Equal(setValues[0].Value, query.Columns[0].Value);
UpdateTests.cs (74) : Assert.Equal("height", query.Where.ColumnName);
UpdateTests.cs (75) : Assert.Equal(">", query.Where.Operator);
UpdateTests.cs (76) : Assert.Equal("1.98", query.Where.LiteralValue);
UpdateTests.cs (78) : Update query2 = MiniSQLParser.Parse("UPDATE table SET nombre='Ana' WHERE height<'1.50'") as Update;
UpdateTests.cs (79) : Assert.NotNull(query2);
UpdateTests.cs (80) : Assert.Equal("table", query2.Table);
UpdateTests.cs (81) : Assert.Equal(setValues2[0].ColumnName, query2.Columns[0].ColumnName);
UpdateTests.cs (82) : Assert.Equal(setValues2[0].Value, query2.Columns[0].Value);
UpdateTests.cs (83) : Assert.Equal("height", query2.Where.ColumnName);
UpdateTests.cs (84) : Assert.Equal("<", query2.Where.Operator);
UpdateTests.cs (85) : Assert.Equal("1.50", query2.Where.LiteralValue);
UpdateTests.cs (86) : }
UpdateTests.cs (87) : }
UpdateTests.cs (88) : }
AddUserTests.cs (14) : [Fact]
AddUserTests.cs (15) : public void Correct()
AddUserTests.cs (16) : {
AddUserTests.cs (17) : AddUser query = MiniSQLParser.Parse("ADD USER (user,password,profile)") as AddUser;
AddUserTests.cs (18) : Assert.Equal("user", query.Username);
AddUserTests.cs (20) : query = MiniSQLParser.Parse("ADD USER (User,Password,Profile)") as AddUser;
AddUserTests.cs (21) : Assert.Equal("User", query.Username);
AddUserTests.cs (22) : }
AddUserTests.cs (24) : [Fact]
AddUserTests.cs (25) : public void CorrectWithSpaces()
AddUserTests.cs (26) : {
AddUserTests.cs (27) : AddUser query = MiniSQLParser.Parse("ADD     USER      (user,password,profile)") as AddUser;
AddUserTests.cs (28) : Assert.Equal("user", query.Username);
AddUserTests.cs (30) : query = MiniSQLParser.Parse("ADD USER     (OtherUser,password,profile)") as AddUser;
AddUserTests.cs (31) : Assert.Equal("OtherUser", query.Username);
AddUserTests.cs (32) : }
AddUserTests.cs (34) : [Fact]
AddUserTests.cs (35) : public void IncorrectCapitalization()
AddUserTests.cs (36) : {
AddUserTests.cs (37) : AddUser query = MiniSQLParser.Parse("ADD USER (user,password,profile)") as AddUser;
AddUserTests.cs (38) : Assert.NotNull(query);
AddUserTests.cs (40) : query = MiniSQLParser.Parse("Add User (user,password,profile)") as AddUser;
AddUserTests.cs (41) : Assert.Null(query);
AddUserTests.cs (43) : query = MiniSQLParser.Parse("add user (user,password,profile)") as AddUser;
AddUserTests.cs (44) : Assert.Null(query);
AddUserTests.cs (45) : }
AddUserTests.cs (47) : [Fact]
AddUserTests.cs (48) : public void IncorrectUserWithForbiddenChars()
AddUserTests.cs (49) : {
AddUserTests.cs (50) : AddUser query = MiniSQLParser.Parse("ADD USER (user,password,profile)") as AddUser;
AddUserTests.cs (51) : Assert.NotNull(query);
AddUserTests.cs (53) : query = MiniSQLParser.Parse("ADD USER (user_1,password,profile)") as AddUser;
AddUserTests.cs (54) : Assert.Null(query);
AddUserTests.cs (56) : query = MiniSQLParser.Parse("ADD USER (user 1,password,profile)") as AddUser;
AddUserTests.cs (57) : Assert.Null(query);
AddUserTests.cs (58) : }
AddUserTests.cs (60) : [Fact]
AddUserTests.cs (61) : public void IncorrectWithoutProfile()
AddUserTests.cs (62) : {
AddUserTests.cs (63) : AddUser query = MiniSQLParser.Parse("ADD USER (user,password,profile)") as AddUser;
AddUserTests.cs (64) : Assert.NotNull(query);
AddUserTests.cs (66) : query = MiniSQLParser.Parse("ADD USER ()") as AddUser;
AddUserTests.cs (67) : Assert.Null(query);
AddUserTests.cs (69) : query = MiniSQLParser.Parse("ADD USER (,,)") as AddUser;
AddUserTests.cs (70) : Assert.Null(query);
AddUserTests.cs (71) : }
CreateSecurityProfileTests.cs (15) : [Fact]
CreateSecurityProfileTests.cs (16) : public void Correct()
CreateSecurityProfileTests.cs (17) : {
CreateSecurityProfileTests.cs (18) : CreateSecurityProfile query = MiniSQLParser.Parse("CREATE SECURITY PROFILE profile") as CreateSecurityProfile;
CreateSecurityProfileTests.cs (19) : Assert.Equal("profile", query.ProfileName);
CreateSecurityProfileTests.cs (21) : query = MiniSQLParser.Parse("CREATE SECURITY PROFILE OtherProfile") as CreateSecurityProfile;
CreateSecurityProfileTests.cs (22) : Assert.Equal("OtherProfile", query.ProfileName);
CreateSecurityProfileTests.cs (23) : }
CreateSecurityProfileTests.cs (25) : [Fact]
CreateSecurityProfileTests.cs (26) : public void CorrectWithSpaces()
CreateSecurityProfileTests.cs (27) : {
CreateSecurityProfileTests.cs (28) : CreateSecurityProfile query = MiniSQLParser.Parse("CREATE     SECURITY PROFILE      profile") as CreateSecurityProfile;
CreateSecurityProfileTests.cs (29) : Assert.Equal("profile", query.ProfileName);
CreateSecurityProfileTests.cs (31) : query = MiniSQLParser.Parse("CREATE SECURITY     PROFILE OtherProfile") as CreateSecurityProfile;
CreateSecurityProfileTests.cs (32) : Assert.Equal("OtherProfile", query.ProfileName);
CreateSecurityProfileTests.cs (33) : }
CreateSecurityProfileTests.cs (35) : [Fact]
CreateSecurityProfileTests.cs (36) : public void IncorrectCapitalization()
CreateSecurityProfileTests.cs (37) : {
CreateSecurityProfileTests.cs (38) : CreateSecurityProfile query = MiniSQLParser.Parse("Create SECURITY PROFILE profile") as CreateSecurityProfile;
CreateSecurityProfileTests.cs (39) : Assert.Null(query);
CreateSecurityProfileTests.cs (41) : query = MiniSQLParser.Parse("create security profile OtherProfile") as CreateSecurityProfile;
CreateSecurityProfileTests.cs (42) : Assert.Null(query);
CreateSecurityProfileTests.cs (43) : }
CreateSecurityProfileTests.cs (45) : [Fact]
CreateSecurityProfileTests.cs (46) : public void IncorrectProfileWithForbiddenChars()
CreateSecurityProfileTests.cs (47) : {
CreateSecurityProfileTests.cs (48) : CreateSecurityProfile query = MiniSQLParser.Parse("CREATE SECURITY PROFILE pro-file") as CreateSecurityProfile;
CreateSecurityProfileTests.cs (49) : Assert.Null(query);
CreateSecurityProfileTests.cs (51) : query = MiniSQLParser.Parse("CREATE SECURITY PROFILE Pro file") as CreateSecurityProfile;
CreateSecurityProfileTests.cs (52) : Assert.Null(query);
CreateSecurityProfileTests.cs (53) : }
CreateSecurityProfileTests.cs (55) : [Fact]
CreateSecurityProfileTests.cs (56) : public void IncorrectWithoutProfile()
CreateSecurityProfileTests.cs (57) : {
CreateSecurityProfileTests.cs (58) : CreateSecurityProfile query = MiniSQLParser.Parse("CREATE SECURITY PROFILE ") as CreateSecurityProfile;
CreateSecurityProfileTests.cs (59) : Assert.Null(query);
CreateSecurityProfileTests.cs (61) : query = MiniSQLParser.Parse("CREATE SECURITY PROFILE") as CreateSecurityProfile;
CreateSecurityProfileTests.cs (62) : Assert.Null(query);
CreateSecurityProfileTests.cs (63) : }
DeleteUserTests.cs (14) : [Fact]
DeleteUserTests.cs (15) : public void Correct()
DeleteUserTests.cs (16) : {
DeleteUserTests.cs (17) : DeleteUser query = MiniSQLParser.Parse("DELETE USER user") as DeleteUser;
DeleteUserTests.cs (18) : Assert.Equal("user", query.Username);
DeleteUserTests.cs (20) : query = MiniSQLParser.Parse("DELETE USER OtherUser") as DeleteUser;
DeleteUserTests.cs (21) : Assert.Equal("OtherUser", query.Username);
DeleteUserTests.cs (22) : }
DeleteUserTests.cs (24) : [Fact]
DeleteUserTests.cs (25) : public void CorrectWithSpaces()
DeleteUserTests.cs (26) : {
DeleteUserTests.cs (27) : DeleteUser query = MiniSQLParser.Parse("DELETE     USER      USER") as DeleteUser;
DeleteUserTests.cs (28) : Assert.Equal("USER", query.Username);
DeleteUserTests.cs (30) : query = MiniSQLParser.Parse("DELETE USER    OtherUser") as DeleteUser;
DeleteUserTests.cs (31) : Assert.Equal("OtherUser", query.Username);
DeleteUserTests.cs (32) : }
DeleteUserTests.cs (34) : [Fact]
DeleteUserTests.cs (35) : public void IncorrectCapitalization()
DeleteUserTests.cs (36) : {
DeleteUserTests.cs (37) : DeleteUser query = MiniSQLParser.Parse("Delete User User") as DeleteUser;
DeleteUserTests.cs (38) : Assert.Null(query);
DeleteUserTests.cs (40) : query = MiniSQLParser.Parse("delete user User") as DeleteUser;
DeleteUserTests.cs (41) : Assert.Null(query);
DeleteUserTests.cs (42) : }
DeleteUserTests.cs (44) : [Fact]
DeleteUserTests.cs (45) : public void IncorrectUserWithForbiddenChars()
DeleteUserTests.cs (46) : {
DeleteUserTests.cs (47) : DeleteUser query = MiniSQLParser.Parse("DELETE USER User_1") as DeleteUser;
DeleteUserTests.cs (48) : Assert.Null(query);
DeleteUserTests.cs (50) : query = MiniSQLParser.Parse("DELETE USER User 1") as DeleteUser;
DeleteUserTests.cs (51) : Assert.Null(query);
DeleteUserTests.cs (52) : }
DeleteUserTests.cs (54) : [Fact]
DeleteUserTests.cs (55) : public void IncorrectWithoutProfile()
DeleteUserTests.cs (56) : {
DeleteUserTests.cs (57) : DeleteUser query = MiniSQLParser.Parse("DELETE USER") as DeleteUser;
DeleteUserTests.cs (58) : Assert.Null(query);
DeleteUserTests.cs (60) : query = MiniSQLParser.Parse("DELETE USER ") as DeleteUser;
DeleteUserTests.cs (61) : Assert.Null(query);
DeleteUserTests.cs (62) : }
DropSecurityProfileTests.cs (15) : [Fact]
DropSecurityProfileTests.cs (16) : public void Correct()
DropSecurityProfileTests.cs (17) : {
DropSecurityProfileTests.cs (18) : DropSecurityProfile query = MiniSQLParser.Parse("DROP SECURITY PROFILE profile") as DropSecurityProfile;
DropSecurityProfileTests.cs (19) : Assert.Equal("profile", query.ProfileName);
DropSecurityProfileTests.cs (21) : query = MiniSQLParser.Parse("DROP SECURITY PROFILE OtherProfile") as DropSecurityProfile;
DropSecurityProfileTests.cs (22) : Assert.Equal("OtherProfile", query.ProfileName);
DropSecurityProfileTests.cs (23) : }
DropSecurityProfileTests.cs (25) : [Fact]
DropSecurityProfileTests.cs (26) : public void CorrectWithSpaces()
DropSecurityProfileTests.cs (27) : {
DropSecurityProfileTests.cs (28) : DropSecurityProfile query = MiniSQLParser.Parse("DROP     SECURITY PROFILE      profile") as DropSecurityProfile;
DropSecurityProfileTests.cs (29) : Assert.Equal("profile", query.ProfileName);
DropSecurityProfileTests.cs (31) : query = MiniSQLParser.Parse("DROP SECURITY     PROFILE OtherProfile") as DropSecurityProfile;
DropSecurityProfileTests.cs (32) : Assert.Equal("OtherProfile", query.ProfileName);
DropSecurityProfileTests.cs (33) : }
DropSecurityProfileTests.cs (35) : [Fact]
DropSecurityProfileTests.cs (36) : public void IncorrectCapitalization()
DropSecurityProfileTests.cs (37) : {
DropSecurityProfileTests.cs (38) : DropSecurityProfile query = MiniSQLParser.Parse("Create SECURITY PROFILE profile") as DropSecurityProfile;
DropSecurityProfileTests.cs (39) : Assert.Null(query);
DropSecurityProfileTests.cs (41) : query = MiniSQLParser.Parse("create security profile OtherProfile") as DropSecurityProfile;
DropSecurityProfileTests.cs (42) : Assert.Null(query);
DropSecurityProfileTests.cs (43) : }
DropSecurityProfileTests.cs (45) : [Fact]
DropSecurityProfileTests.cs (46) : public void IncorrectProfileWithForbiddenChars()
DropSecurityProfileTests.cs (47) : {
DropSecurityProfileTests.cs (48) : DropSecurityProfile query = MiniSQLParser.Parse("DROP SECURITY PROFILE pro-file") as DropSecurityProfile;
DropSecurityProfileTests.cs (49) : Assert.Null(query);
DropSecurityProfileTests.cs (51) : query = MiniSQLParser.Parse("DROP SECURITY PROFILE Pro file") as DropSecurityProfile;
DropSecurityProfileTests.cs (52) : Assert.Null(query);
DropSecurityProfileTests.cs (53) : }
DropSecurityProfileTests.cs (55) : [Fact]
DropSecurityProfileTests.cs (56) : public void IncorrectWithoutProfile()
DropSecurityProfileTests.cs (57) : {
DropSecurityProfileTests.cs (58) : DropSecurityProfile query = MiniSQLParser.Parse("DROP SECURITY PROFILE ") as DropSecurityProfile;
DropSecurityProfileTests.cs (59) : Assert.Null(query);
DropSecurityProfileTests.cs (61) : query = MiniSQLParser.Parse("DROP SECURITY PROFILE") as DropSecurityProfile;
DropSecurityProfileTests.cs (62) : Assert.Null(query);
DropSecurityProfileTests.cs (63) : }
GrantTests.cs (15) : [Fact]
GrantTests.cs (16) : public void Correct()
GrantTests.cs (17) : {
GrantTests.cs (18) : Grant query = MiniSQLParser.Parse("GRANT DELETE ON Table TO User") as Grant;
GrantTests.cs (19) : Assert.Equal("DELETE", query.PrivilegeName);
GrantTests.cs (20) : Assert.Equal("Table", query.TableName);
GrantTests.cs (21) : Assert.Equal("User", query.ProfileName);
GrantTests.cs (23) : query = MiniSQLParser.Parse("GRANT INSERT ON Table TO User") as Grant;
GrantTests.cs (24) : Assert.Equal("INSERT", query.PrivilegeName);
GrantTests.cs (25) : Assert.Equal("Table", query.TableName);
GrantTests.cs (26) : Assert.Equal("User", query.ProfileName);
GrantTests.cs (28) : query = MiniSQLParser.Parse("GRANT SELECT ON Table TO User") as Grant;
GrantTests.cs (29) : Assert.Equal("SELECT", query.PrivilegeName);
GrantTests.cs (30) : Assert.Equal("Table", query.TableName);
GrantTests.cs (31) : Assert.Equal("User", query.ProfileName);
GrantTests.cs (33) : query = MiniSQLParser.Parse("GRANT UPDATE ON Table TO User") as Grant;
GrantTests.cs (34) : Assert.Equal("UPDATE", query.PrivilegeName);
GrantTests.cs (35) : Assert.Equal("Table", query.TableName);
GrantTests.cs (36) : Assert.Equal("User", query.ProfileName);
GrantTests.cs (37) : }
GrantTests.cs (39) : [Fact]
GrantTests.cs (40) : public void CorrectWithSpaces()
GrantTests.cs (41) : {
GrantTests.cs (42) : Grant query = MiniSQLParser.Parse("GRANT DELETE    ON Table TO User") as Grant;
GrantTests.cs (43) : Assert.Equal("DELETE", query.PrivilegeName);
GrantTests.cs (44) : Assert.Equal("Table", query.TableName);
GrantTests.cs (45) : Assert.Equal("User", query.ProfileName);
GrantTests.cs (47) : query = MiniSQLParser.Parse("GRANT INSERT ON Table    TO User") as Grant;
GrantTests.cs (48) : Assert.Equal("INSERT", query.PrivilegeName);
GrantTests.cs (49) : Assert.Equal("Table", query.TableName);
GrantTests.cs (50) : Assert.Equal("User", query.ProfileName);
GrantTests.cs (52) : query = MiniSQLParser.Parse("GRANT SELECT ON Table TO     User") as Grant;
GrantTests.cs (53) : Assert.Equal("SELECT", query.PrivilegeName);
GrantTests.cs (54) : Assert.Equal("Table", query.TableName);
GrantTests.cs (55) : Assert.Equal("User", query.ProfileName);
GrantTests.cs (57) : query = MiniSQLParser.Parse("GRANT    UPDATE     ON    Table    TO     User") as Grant;
GrantTests.cs (58) : Assert.Equal("UPDATE", query.PrivilegeName);
GrantTests.cs (59) : Assert.Equal("Table", query.TableName);
GrantTests.cs (60) : Assert.Equal("User", query.ProfileName);
GrantTests.cs (61) : }
GrantTests.cs (63) : [Fact]
GrantTests.cs (64) : public void IncorrectCapitalization()
GrantTests.cs (65) : {
GrantTests.cs (66) : Grant query = MiniSQLParser.Parse("Grant DELETE ON Table TO User") as Grant;
GrantTests.cs (67) : Assert.Null(query);
GrantTests.cs (69) : query = MiniSQLParser.Parse("GRANT Insert ON Table TO User") as Grant;
GrantTests.cs (70) : Assert.Null(query);
GrantTests.cs (72) : query = MiniSQLParser.Parse("GRANT SELECT on Table TO User") as Grant;
GrantTests.cs (73) : Assert.Null(query);
GrantTests.cs (75) : query = MiniSQLParser.Parse("GRANT UPDATE ON Table To User") as Grant;
GrantTests.cs (76) : Assert.Null(query);
GrantTests.cs (77) : }
GrantTests.cs (79) : [Fact]
GrantTests.cs (80) : public void IncorrectProfileWithForbiddenChars()
GrantTests.cs (81) : {
GrantTests.cs (82) : Grant query = MiniSQLParser.Parse("GRANT DELETE ON Table TO User 1") as Grant;
GrantTests.cs (83) : Assert.Null(query);
GrantTests.cs (85) : query = MiniSQLParser.Parse("GRANT INSERT ON Table TO Us er") as Grant;
GrantTests.cs (86) : Assert.Null(query);
GrantTests.cs (88) : query = MiniSQLParser.Parse("GRANT SELECT ON Table TO User-1") as Grant;
GrantTests.cs (89) : Assert.Null(query);
GrantTests.cs (91) : query = MiniSQLParser.Parse("GRANT UPDATE ON Table To User_2") as Grant;
GrantTests.cs (92) : Assert.Null(query);
GrantTests.cs (93) : }
GrantTests.cs (95) : [Fact]
GrantTests.cs (97) : {
GrantTests.cs (99) : Assert.Null(query);
GrantTests.cs (102) : Assert.Null(query);
GrantTests.cs (105) : Assert.Null(query);
GrantTests.cs (108) : Assert.Null(query);
GrantTests.cs (109) : }
GrantTests.cs (111) : [Fact]
GrantTests.cs (113) : {
GrantTests.cs (122) : }
RevokeTests.cs (14) : [Fact]
RevokeTests.cs (15) : public void Correct()
RevokeTests.cs (16) : {
RevokeTests.cs (17) : Revoke query = MiniSQLParser.Parse("REVOKE DELETE ON Table TO User") as Revoke;
RevokeTests.cs (18) : Assert.Equal("DELETE", query.PrivilegeName);
RevokeTests.cs (19) : Assert.Equal("Table", query.TableName);
RevokeTests.cs (20) : Assert.Equal("User", query.ProfileName);
RevokeTests.cs (22) : query = MiniSQLParser.Parse("REVOKE INSERT ON Table TO User") as Revoke;
RevokeTests.cs (23) : Assert.Equal("INSERT", query.PrivilegeName);
RevokeTests.cs (24) : Assert.Equal("Table", query.TableName);
RevokeTests.cs (25) : Assert.Equal("User", query.ProfileName);
RevokeTests.cs (27) : query = MiniSQLParser.Parse("REVOKE SELECT ON Table TO User") as Revoke;
RevokeTests.cs (28) : Assert.Equal("SELECT", query.PrivilegeName);
RevokeTests.cs (29) : Assert.Equal("Table", query.TableName);
RevokeTests.cs (30) : Assert.Equal("User", query.ProfileName);
RevokeTests.cs (32) : query = MiniSQLParser.Parse("REVOKE UPDATE ON Table TO User") as Revoke;
RevokeTests.cs (33) : Assert.Equal("UPDATE", query.PrivilegeName);
RevokeTests.cs (34) : Assert.Equal("Table", query.TableName);
RevokeTests.cs (35) : Assert.Equal("User", query.ProfileName);
RevokeTests.cs (36) : }
RevokeTests.cs (38) : [Fact]
RevokeTests.cs (39) : public void CorrectWithSpaces()
RevokeTests.cs (40) : {
RevokeTests.cs (41) : Revoke query = MiniSQLParser.Parse("REVOKE DELETE    ON Table TO User") as Revoke;
RevokeTests.cs (42) : Assert.Equal("DELETE", query.PrivilegeName);
RevokeTests.cs (43) : Assert.Equal("Table", query.TableName);
RevokeTests.cs (44) : Assert.Equal("User", query.ProfileName);
RevokeTests.cs (46) : query = MiniSQLParser.Parse("REVOKE INSERT ON Table    TO User") as Revoke;
RevokeTests.cs (47) : Assert.Equal("INSERT", query.PrivilegeName);
RevokeTests.cs (48) : Assert.Equal("Table", query.TableName);
RevokeTests.cs (49) : Assert.Equal("User", query.ProfileName);
RevokeTests.cs (51) : query = MiniSQLParser.Parse("REVOKE SELECT ON Table TO     User") as Revoke;
RevokeTests.cs (52) : Assert.Equal("SELECT", query.PrivilegeName);
RevokeTests.cs (53) : Assert.Equal("Table", query.TableName);
RevokeTests.cs (54) : Assert.Equal("User", query.ProfileName);
RevokeTests.cs (56) : query = MiniSQLParser.Parse("REVOKE    UPDATE     ON    Table    TO     User") as Revoke;
RevokeTests.cs (57) : Assert.Equal("UPDATE", query.PrivilegeName);
RevokeTests.cs (58) : Assert.Equal("Table", query.TableName);
RevokeTests.cs (59) : Assert.Equal("User", query.ProfileName);
RevokeTests.cs (60) : }
RevokeTests.cs (62) : [Fact]
RevokeTests.cs (63) : public void IncorrectProfileWithForbiddenChars()
RevokeTests.cs (64) : {
RevokeTests.cs (65) : Revoke query = MiniSQLParser.Parse("REVOKE DELETE ON Table TO User 1") as Revoke;
RevokeTests.cs (66) : Assert.Null(query);
RevokeTests.cs (68) : query = MiniSQLParser.Parse("REVOKE INSERT ON Table TO Us er") as Revoke;
RevokeTests.cs (69) : Assert.Null(query);
RevokeTests.cs (71) : query = MiniSQLParser.Parse("REVOKE SELECT ON Table TO User-1") as Revoke;
RevokeTests.cs (72) : Assert.Null(query);
RevokeTests.cs (74) : query = MiniSQLParser.Parse("REVOKE UPDATE ON Table To User_2") as Revoke;
RevokeTests.cs (75) : Assert.Null(query);
RevokeTests.cs (76) : }
RevokeTests.cs (78) : [Fact]
RevokeTests.cs (79) : public void IncorrectCapitalization()
RevokeTests.cs (80) : {
RevokeTests.cs (81) : Revoke query = MiniSQLParser.Parse("Revoke DELETE ON Table TO User") as Revoke;
RevokeTests.cs (82) : Assert.Null(query);
RevokeTests.cs (84) : query = MiniSQLParser.Parse("REVOKE Insert ON Table TO User") as Revoke;
RevokeTests.cs (85) : Assert.Null(query);
RevokeTests.cs (87) : query = MiniSQLParser.Parse("REVOKE SELECT on Table TO User") as Revoke;
RevokeTests.cs (88) : Assert.Null(query);
RevokeTests.cs (90) : query = MiniSQLParser.Parse("REVOKE UPDATE ON Table To User") as Revoke;
RevokeTests.cs (91) : Assert.Null(query);
RevokeTests.cs (92) : }
RevokeTests.cs (94) : [Fact]
RevokeTests.cs (95) : public void IncorrectPrivileges()
RevokeTests.cs (96) : {
RevokeTests.cs (97) : Revoke query = MiniSQLParser.Parse("REVOKE Remove ON Table TO User") as Revoke;
RevokeTests.cs (98) : Assert.Null(query);
RevokeTests.cs (100) : query = MiniSQLParser.Parse("REVOKE REMOVE ON Table TO User") as Revoke;
RevokeTests.cs (101) : Assert.Null(query);
RevokeTests.cs (103) : query = MiniSQLParser.Parse("REVOKE UPGRADE ON Table TO User") as Revoke;
RevokeTests.cs (104) : Assert.Null(query);
RevokeTests.cs (106) : query = MiniSQLParser.Parse("REVOKE SET ON Table TO User") as Revoke;
RevokeTests.cs (107) : Assert.Null(query);
RevokeTests.cs (108) : }
RevokeTests.cs (110) : [Fact]
RevokeTests.cs (111) : public void IncorrectWithoutOnePart()
RevokeTests.cs (112) : {
RevokeTests.cs (113) : Revoke query = MiniSQLParser.Parse("REVOKE ON Table TO User") as Revoke;
RevokeTests.cs (114) : Assert.Null(query);
RevokeTests.cs (116) : query = MiniSQLParser.Parse("REVOKE SELECT ON TO User") as Revoke;
RevokeTests.cs (117) : Assert.Null(query);
RevokeTests.cs (119) : query = MiniSQLParser.Parse("REVOKE SELECT TO User") as Revoke;
RevokeTests.cs (120) : Assert.Null(query);
RevokeTests.cs (122) : query = MiniSQLParser.Parse("REVOKE SELECT ON Table TO") as Revoke;
RevokeTests.cs (123) : Assert.Null(query);
RevokeTests.cs (124) : }
