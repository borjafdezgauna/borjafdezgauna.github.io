Condition.cs (67) : if (Operator == menorQue)
Condition.cs (75) : else if (Operator == mayorQue)
Condition.cs (83) : else if (Operator == igualQue)
Condition.cs (98) : if (Operator == menorQue)
Condition.cs (106) : else if (Operator == mayorQue)
Condition.cs (114) : else if (Operator == igualQue)
Database.cs (17) : private string m_password;
Database.cs (31) : m_username = adminUsername;
Database.cs (32) : m_password = adminPassword;
Database.cs (33) : Tables = new List<Table>();
Database.cs (34) : LastErrorMessage = string.Empty;
Database.cs (35) : SecurityManager = new Manager(adminUsername);
Database.cs (44) : for(int i = 0;  i < Tables.Count; i++)
Database.cs (45) : {
Database.cs (46) : if (Tables[i].Name == table.Name)
Database.cs (47) : {
Database.cs (49) : }
Database.cs (50) : }
Database.cs (52) : Tables.Add(table);
Database.cs (53) : return true;
Database.cs (61) : for(int i = 0; i < Tables.Count; i++)
Database.cs (62) : {
Database.cs (63) : if (Tables[i].Name == tableName)
Database.cs (64) : {
Database.cs (65) : return Tables[i];
Database.cs (66) : }
Database.cs (67) : }
Database.cs (81) : for(int i = 0; i < Tables.Count; i++)
Database.cs (82) : {
Database.cs (83) : if (Tables[i].Name == tableName)
Database.cs (84) : {
Database.cs (85) : LastErrorMessage = Constants.TableAlreadyExistsError;
Database.cs (86) : return false;
Database.cs (87) : }
Database.cs (88) : }
Database.cs (89) : if(ColumnDefinition == null || ColumnDefinition.Count == 0)
Database.cs (90) : {
Database.cs (91) : LastErrorMessage = Constants.DatabaseCreatedWithoutColumnsError;
Database.cs (93) : }
Database.cs (95) : Table nueva = new Table(tableName, ColumnDefinition);
Database.cs (96) : Tables.Add(nueva);
Database.cs (98) : LastErrorMessage = Constants.CreateTableSuccess;
Database.cs (99) : return true;
Database.cs (108) : for(int i = 0; i < Tables.Count; i++ )
Database.cs (109) : {
Database.cs (110) : if (Tables[i].Name == tableName)
Database.cs (111) : {
Database.cs (112) : Tables.Remove(Tables[i]);
Database.cs (114) : LastErrorMessage = Constants.DropTableSuccess;
Database.cs (115) : return true;
Database.cs (116) : }
Database.cs (117) : }
Database.cs (119) : LastErrorMessage = Constants.TableDoesNotExistError;
Database.cs (128) : for(int i = 0; i < Tables.Count; i++)
Database.cs (129) : {
Database.cs (130) : if (Tables[i].Name == tableName)
Database.cs (131) : {
Database.cs (133) : if (values.Count != Tables[i].NumColumns())
Database.cs (134) : {
Database.cs (135) : LastErrorMessage = Constants.ColumnCountsDontMatch;
Database.cs (136) : return false;
Database.cs (137) : }
Database.cs (139) : Tables[i].Insert(values);
Database.cs (141) : LastErrorMessage = Constants.InsertSuccess;
Database.cs (142) : return true;
Database.cs (143) : }
Database.cs (144) : }
Database.cs (146) : LastErrorMessage = Constants.TableDoesNotExistError;
Database.cs (158) : if (selectedTable == null)
Database.cs (159) : {
Database.cs (160) : LastErrorMessage = Constants.TableDoesNotExistError;
Database.cs (161) : return null;
Database.cs (162) : }
Database.cs (164) : if (columns == null || (columns.Count == 1 && columns[0] == "*"))
Database.cs (165) : {
Database.cs (166) : columns = new List<string>();
Database.cs (167) : for (int i = 0; i < selectedTable.NumColumns(); i++)
Database.cs (168) : {
Database.cs (169) : var column = selectedTable.GetColumn(i);
Database.cs (170) : if (column != null)
Database.cs (171) : {
Database.cs (172) : columns.Add(column.Name);
Database.cs (173) : }
Database.cs (174) : }
Database.cs (175) : }
Database.cs (177) : foreach (string column in columns)
Database.cs (178) : {
Database.cs (179) : if (selectedTable.ColumnByName(column) == null)
Database.cs (180) : {
Database.cs (182) : return null;
Database.cs (183) : }
Database.cs (184) : }
Database.cs (186) : return selectedTable.Select(columns, condition);
Database.cs (196) : Table selectedTable = null;
Database.cs (198) : for (int i = 0; i < Tables.Count; i++)
Database.cs (199) : {
Database.cs (200) : if (Tables[i].Name == tableName)
Database.cs (201) : {
Database.cs (202) : selectedTable = Tables[i];
Database.cs (203) : }
Database.cs (204) : }
Database.cs (206) : if(selectedTable == null)
Database.cs (207) : {
Database.cs (208) : LastErrorMessage = Constants.TableDoesNotExistError;
Database.cs (209) : return false;
Database.cs (210) : }
Database.cs (212) : if(columnCondition != null && selectedTable.ColumnByName(columnCondition.ColumnName) == null)
Database.cs (213) : {
Database.cs (214) : LastErrorMessage = Constants.ColumnDoesNotExistError;
Database.cs (215) : return false;
Database.cs (216) : }
Database.cs (218) : int allRows = selectedTable.NumRows();
Database.cs (220) : selectedTable.DeleteWhere(columnCondition);
Database.cs (222) : if(allRows > selectedTable.NumRows())
Database.cs (223) : {
Database.cs (224) : return true;
Database.cs (225) : }
Database.cs (235) : Table table = null;
Database.cs (236) : for (int i = 0;i < Tables.Count; i++)
Database.cs (237) : {
Database.cs (238) : if (Tables[i].Name == tableName)
Database.cs (239) : {
Database.cs (240) : table = Tables[i];
Database.cs (241) : }
Database.cs (242) : }
Database.cs (244) : if(table == null)
Database.cs (245) : {
Database.cs (246) : LastErrorMessage = Constants.TableDoesNotExistError;
Database.cs (247) : return false;
Database.cs (248) : }
Database.cs (250) : if(columnCondition != null && table.ColumnByName(columnCondition.ColumnName) == null)
Database.cs (251) : {
Database.cs (252) : LastErrorMessage = Constants.ColumnDoesNotExistError;
Database.cs (253) : return false;
Database.cs (254) : }
Database.cs (256) : foreach(SetValue sv in columnNames)
Database.cs (257) : {
Database.cs (258) : ColumnDefinition column = table.ColumnByName(sv.ColumnName);
Database.cs (259) : if (column == null)
Database.cs (260) : {
Database.cs (261) : LastErrorMessage = Constants.ColumnDoesNotExistError;
Database.cs (263) : }
Database.cs (264) : }
Database.cs (266) : bool check = false;
Database.cs (267) : for(int i = 0;i < table.NumRows(); i++)
Database.cs (268) : {
Database.cs (269) : Row row = table.GetRow(i);
Database.cs (270) : if ( columnCondition == null ||row.IsTrue(columnCondition))
Database.cs (271) : {
Database.cs (272) : foreach (SetValue setvalue in columnNames)
Database.cs (273) : {
Database.cs (274) : row.SetValue(setvalue.ColumnName, setvalue.Value);
Database.cs (275) : }
Database.cs (277) : check = true;
Database.cs (278) : }
Database.cs (279) : }
Database.cs (281) : return check;
Table.cs (43) : if(ColumnDefinitions.Count != row.Values.Count)
Table.cs (44) : {
Table.cs (45) : return;
Table.cs (46) : }
Table.cs (143) : string result = "";
Table.cs (144) : if(NumColumns() == 0)
Table.cs (146) : return result;
Table.cs (149) : result = "[";
Table.cs (167) : if(j < r.Values.Count - 1)
Table.cs (210) : for (int i = indices.Count - 1; i >= 0; i--)
Table.cs (212) : Rows.RemoveAt(indices[i]);
Table.cs (227) : foreach (string columnName in columnNames)
Table.cs (229) : ColumnDefinition col = ColumnByName(columnName);
Table.cs (230) : if (col != null)
Table.cs (232) : columns.Add(col);
Table.cs (236) : Table Result = new Table("Result", columns);
Table.cs (237) : foreach(Row rowFor in Rows)
Table.cs (239) : if(condition == null || rowFor.IsTrue(condition))
Table.cs (240) : {
Table.cs (241) : List<string> values = new List<string>();
Table.cs (243) : foreach (string colFor in columnNames)
Table.cs (244) : {
Table.cs (245) : values.Add(rowFor.GetValue(colFor));
Table.cs (247) : }
Table.cs (248) : Result.Insert(values);
Table.cs (249) : }
Table.cs (252) : return Result;
CreateTableTests.cs (1) : using System.Xml.Linq;
CreateTableTests.cs (2) : using System;
CreateTableTests.cs (3) : using DbManager;
CreateTableTests.cs (4) : using DbManager.Parser;
CreateTableTests.cs (5) : using DbManager.Security;
CreateTableTests.cs (7) : namespace OurTests
CreateTableTests.cs (8) : {
CreateTableTests.cs (9) : public class CreateTableTests
CreateTableTests.cs (10) : {
CreateTableTests.cs (12) : [Fact]
CreateTableTests.cs (13) : public void CreateTable()
CreateTableTests.cs (14) : {
CreateTableTests.cs (15) : /*
CreateTableTests.cs (16) : create table
CreateTableTests.cs (17) : CREATE TABLE User (number INT)
CreateTableTests.cs (18) : CREATE  TABLE
CreateTableTests.cs (19) : CREATE TABLE USER (Name TEXT,age INT)
CreateTableTests.cs (20) : CREATE TABLE USER (Name TEXT age INT)
CreateTableTests.cs (21) : CREATE TABLE USER (Name TEXT,age INT,height DOUBLE)
CreateTableTests.cs (22) : CREATE TABLE User (NAME TEXT)
CreateTableTests.cs (23) : create table USER (Name TEXT)
CreateTableTests.cs (24) : CREATE TABLE User (NAME TEXT,  AGE INT,)
CreateTableTests.cs (25) : CREATE TABLE User     (NAME   TEXT,AGE INT)
CreateTableTests.cs (26) : CREATE TABLE USER Name TEXT
CreateTableTests.cs (27) : CREATE TABLE (Name TEXT)
CreateTableTests.cs (28) : */
CreateTableTests.cs (30) : CreateTable query = MiniSQLParser.Parse("create table") as CreateTable;
CreateTableTests.cs (31) : Assert.Null(query);
CreateTableTests.cs (32) : query = MiniSQLParser.Parse("CREATE    TABLE   User      (Number     INT)") as CreateTable;
CreateTableTests.cs (33) : Assert.NotNull(query);
CreateTableTests.cs (34) : query = MiniSQLParser.Parse("CREATE  TABLE") as CreateTable;
CreateTableTests.cs (35) : Assert.Null(query);
CreateTableTests.cs (36) : query = MiniSQLParser.Parse("CREATE TABLE USER (Name TEXT,age INT)") as CreateTable;
CreateTableTests.cs (37) : Assert.NotNull(query);
CreateTableTests.cs (38) : query = MiniSQLParser.Parse("CREATE TABLE USER (Name TEXT age INT)") as CreateTable;
CreateTableTests.cs (39) : Assert.Null(query);
CreateTableTests.cs (40) : query = MiniSQLParser.Parse("CREATE TABLE USER (Name TEXT,age INT,height DOUBLE)") as CreateTable;
CreateTableTests.cs (41) : Assert.NotNull(query);
CreateTableTests.cs (42) : query = MiniSQLParser.Parse("CREATE TABLE User    (NAME TEXT)") as CreateTable;
CreateTableTests.cs (43) : Assert.NotNull(query);
CreateTableTests.cs (44) : query = MiniSQLParser.Parse("create table USER (Name TEXT)") as CreateTable;
CreateTableTests.cs (45) : Assert.Null(query);
CreateTableTests.cs (46) : query = MiniSQLParser.Parse("CREATE TABLE User    (NAME TEXT,  AGE INT,)") as CreateTable;
CreateTableTests.cs (47) : Assert.Null(query);
CreateTableTests.cs (48) : query = MiniSQLParser.Parse("CREATE TABLE      User     (NAME TEXT,AGE INT)") as CreateTable;
CreateTableTests.cs (49) : Assert.NotNull(query);
CreateTableTests.cs (50) : query = MiniSQLParser.Parse("CREATE TABLE USER Name TEXT") as CreateTable;
CreateTableTests.cs (51) : Assert.Null(query);
CreateTableTests.cs (52) : query = MiniSQLParser.Parse("CREATE TABLE (Name TEXT)") as CreateTable;
CreateTableTests.cs (53) : Assert.Null(query);
CreateTableTests.cs (54) : query = MiniSQLParser.Parse("CREATE TABLE USERS ()") as CreateTable;
CreateTableTests.cs (55) : Assert.NotNull(query);
CreateTableTests.cs (57) : }
CreateTableTests.cs (59) : [Fact]
CreateTableTests.cs (60) : public void execeuteCreateTable()
CreateTableTests.cs (61) : {
CreateTableTests.cs (96) : CreateTable t = new CreateTable("School", null);
CreateTableTests.cs (97) : result = t.Execute(db);
CreateTableTests.cs (98) : Assert.Equal(Constants.DatabaseCreatedWithoutColumnsError, result);
CreateTableTests.cs (99) : }
CreateTableTests.cs (101) : }
CreateTableTests.cs (102) : }
DatabaseTests.cs (1) : using DbManager;
DatabaseTests.cs (2) : using DbManager.Parser;
DatabaseTests.cs (3) : using Newtonsoft.Json.Linq;
DatabaseTests.cs (8) : public class DatabaseTests
DatabaseTests.cs (13) : public void TestAddTable()
DatabaseTests.cs (14) : {
DatabaseTests.cs (15) : Database db = new Database("admin", "1234");
DatabaseTests.cs (17) : List<ColumnDefinition> columns = new List<ColumnDefinition>()
DatabaseTests.cs (19) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
DatabaseTests.cs (20) : new ColumnDefinition(ColumnDefinition.DataType.Int,"Age")
DatabaseTests.cs (21) : };
DatabaseTests.cs (23) : Table table = new Table("Users", columns);
DatabaseTests.cs (25) : Assert.True(db.AddTable(table));
DatabaseTests.cs (26) : Assert.False(db.AddTable(table));
DatabaseTests.cs (28) : [Fact]
DatabaseTests.cs (29) : public void TestTableByName()
DatabaseTests.cs (30) : {
DatabaseTests.cs (31) : Database db = new Database("admin", "password");
DatabaseTests.cs (33) : List<ColumnDefinition> columns1 = new List<ColumnDefinition>()
DatabaseTests.cs (34) : {
DatabaseTests.cs (35) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
DatabaseTests.cs (36) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
DatabaseTests.cs (37) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height")
DatabaseTests.cs (38) : };
DatabaseTests.cs (40) : List<ColumnDefinition> columns2 = new List<ColumnDefinition>()
DatabaseTests.cs (41) : {
DatabaseTests.cs (42) : new ColumnDefinition(ColumnDefinition.DataType.Int, "id"),
DatabaseTests.cs (43) : new ColumnDefinition(ColumnDefinition.DataType.String, "author"),
DatabaseTests.cs (44) : new ColumnDefinition(ColumnDefinition.DataType.Double, "price")
DatabaseTests.cs (45) : };
DatabaseTests.cs (47) : Table table1 = new Table("Users", columns1);
DatabaseTests.cs (48) : Table table2 = new Table("Books", columns2);
DatabaseTests.cs (50) : db.AddTable(table1);
DatabaseTests.cs (51) : db.AddTable(table2);
DatabaseTests.cs (53) : Assert.NotNull(db.TableByName("Users"));
DatabaseTests.cs (54) : Assert.Null(db.TableByName("Banks"));
DatabaseTests.cs (55) : Assert.Null(db.TableByName("Players"));
DatabaseTests.cs (57) : Assert.NotNull(db.TableByName("Books"));
DatabaseTests.cs (59) : //Para verificar que son la misma instancia
DatabaseTests.cs (60) : Assert.Same(table1, db.TableByName("Users"));
DatabaseTests.cs (62) : }
DatabaseTests.cs (64) : [Fact]
DatabaseTests.cs (65) : public void TestCreateTable()
DatabaseTests.cs (66) : {
DatabaseTests.cs (67) : Database db = new Database("admin", "password");
DatabaseTests.cs (69) : List<ColumnDefinition> columns = new List<ColumnDefinition>()
DatabaseTests.cs (70) : {
DatabaseTests.cs (71) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
DatabaseTests.cs (72) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
DatabaseTests.cs (73) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height")
DatabaseTests.cs (74) : };
DatabaseTests.cs (76) : Assert.True(db.CreateTable("Users", columns));
DatabaseTests.cs (77) : Assert.Equal(Constants.CreateTableSuccess, db.LastErrorMessage);
DatabaseTests.cs (79) : Assert.False(db.CreateTable("Users", columns));
DatabaseTests.cs (80) : Assert.Equal(Constants.TableAlreadyExistsError, db.LastErrorMessage);
DatabaseTests.cs (84) : Assert.Equal(Constants.DatabaseCreatedWithoutColumnsError, db.LastErrorMessage);
DatabaseTests.cs (86) : }
DatabaseTests.cs (88) : [Fact]
DatabaseTests.cs (89) : public void TestDropTable()
DatabaseTests.cs (90) : {
DatabaseTests.cs (91) : Database db = new Database("admin", "password");
DatabaseTests.cs (93) : List<ColumnDefinition> columns1 = new List<ColumnDefinition>()
DatabaseTests.cs (94) : {
DatabaseTests.cs (95) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
DatabaseTests.cs (96) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
DatabaseTests.cs (97) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height")
DatabaseTests.cs (98) : };
DatabaseTests.cs (100) : List<ColumnDefinition> columns2 = new List<ColumnDefinition>()
DatabaseTests.cs (101) : {
DatabaseTests.cs (102) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
DatabaseTests.cs (103) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Number")
DatabaseTests.cs (104) : };
DatabaseTests.cs (106) : Table users = new Table("Users", columns1);
DatabaseTests.cs (107) : Table players = new Table("Players", columns2);
DatabaseTests.cs (109) : db.AddTable(users);
DatabaseTests.cs (110) : db.AddTable(players);
DatabaseTests.cs (112) : Assert.True(db.DropTable("Users"));
DatabaseTests.cs (113) : Assert.Equal(Constants.DropTableSuccess, db.LastErrorMessage);
DatabaseTests.cs (114) : Assert.True(db.DropTable("Players"));
DatabaseTests.cs (115) : Assert.Equal(Constants.DropTableSuccess, db.LastErrorMessage);
DatabaseTests.cs (117) : Assert.False(db.DropTable("Cities"));
DatabaseTests.cs (118) : Assert.Equal(Constants.TableDoesNotExistError, db.LastErrorMessage);
DatabaseTests.cs (119) : }
DatabaseTests.cs (122) : [Fact]
DatabaseTests.cs (123) : public void TestInsert()
DatabaseTests.cs (124) : {
DatabaseTests.cs (125) : Database db = new Database("admin", "password");
DatabaseTests.cs (127) : List<ColumnDefinition> columns1 = new List<ColumnDefinition>()
DatabaseTests.cs (128) : {
DatabaseTests.cs (129) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
DatabaseTests.cs (130) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
DatabaseTests.cs (131) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height")
DatabaseTests.cs (132) : };
DatabaseTests.cs (133) : List<ColumnDefinition> columns2 = new List<ColumnDefinition>()
DatabaseTests.cs (134) : {
DatabaseTests.cs (135) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
DatabaseTests.cs (136) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Number")
DatabaseTests.cs (137) : };
DatabaseTests.cs (139) : Table table1 = new Table("Users", columns1);
DatabaseTests.cs (140) : Table table2 = new Table("Players", columns2);
DatabaseTests.cs (142) : db.AddTable(table1);
DatabaseTests.cs (143) : db.AddTable(table2);
DatabaseTests.cs (145) : List<string> values1 = new List<string>() { "Francisco", "99"};
DatabaseTests.cs (146) : List<string> values2 = new List<string>() { "Lionel", "22", "1.91" };
DatabaseTests.cs (148) : Assert.True(db.Insert("Users", values2));
DatabaseTests.cs (149) : Assert.Equal(Constants.InsertSuccess, db.LastErrorMessage);
DatabaseTests.cs (151) : Assert.False(db.Insert("Users",values1));
DatabaseTests.cs (152) : Assert.Equal(Constants.ColumnCountsDontMatch, db.LastErrorMessage);
DatabaseTests.cs (155) : Assert.False(db.Insert("Users", new List<string>()));
DatabaseTests.cs (156) : Assert.Equal(Constants.ColumnCountsDontMatch, db.LastErrorMessage);
DatabaseTests.cs (158) : Assert.False(db.Insert("Banks", new List<string>()));
DatabaseTests.cs (159) : Assert.Equal(Constants.TableDoesNotExistError, db.LastErrorMessage);
DatabaseTests.cs (161) : }
DatabaseTests.cs (163) : [Fact]
DatabaseTests.cs (164) : public void TestSelect()
DatabaseTests.cs (165) : {
DatabaseTests.cs (166) : Database db = new Database("admin", "Password");
DatabaseTests.cs (168) : List<ColumnDefinition> columns1 = new List<ColumnDefinition>()
DatabaseTests.cs (169) : {
DatabaseTests.cs (170) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
DatabaseTests.cs (171) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
DatabaseTests.cs (172) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height")
DatabaseTests.cs (173) : };
DatabaseTests.cs (174) : List<ColumnDefinition> columns2 = new List<ColumnDefinition>()
DatabaseTests.cs (175) : {
DatabaseTests.cs (176) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
DatabaseTests.cs (177) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Number")
DatabaseTests.cs (178) : };
DatabaseTests.cs (180) : Table users = new Table("Users", columns1);
DatabaseTests.cs (181) : Table players = new Table("Players", columns2 );
DatabaseTests.cs (183) : List<String> values = new List<String>() { "Mikel", "67", "1.78" };
DatabaseTests.cs (184) : List<String> values2 = new List<String>() { "Julen", "22", "1.67" };
DatabaseTests.cs (185) : List<String> values3 = new List<String>() { "Anne", "33", "1.71" };
DatabaseTests.cs (186) : List<String> values4 = new List<String>() { "Mikel", "22", "1.90" };
DatabaseTests.cs (187) : List<String> values5 = new List<String>() { "Julen", "54", "1.87" };
DatabaseTests.cs (188) : List<String> values6 = new List<String>() { "Anne", "67", "1.84" };
DatabaseTests.cs (190) : users.AddRow(new Row(columns1, values));
DatabaseTests.cs (191) : users.AddRow(new Row(columns1, values2));
DatabaseTests.cs (192) : users.AddRow(new Row(columns1, values3));
DatabaseTests.cs (193) : users.AddRow(new Row(columns1, values4));
DatabaseTests.cs (194) : users.AddRow(new Row(columns1, values5));
DatabaseTests.cs (195) : users.AddRow(new Row(columns1, values6));
DatabaseTests.cs (197) : List<String> values7 = new List<String>() { "Messi", "10" };
DatabaseTests.cs (198) : List<String> values8 = new List<String>() { "Pedri", "8" };
DatabaseTests.cs (199) : List<String> values9 = new List<String>() { "Reus", "11", };
DatabaseTests.cs (200) : List<String> values10 = new List<String>() { "Lebron", "23",};
DatabaseTests.cs (201) : List<String> values11 = new List<String>() { "Curry", "30",};
DatabaseTests.cs (202) : List<String> values12 = new List<String>() { "Patrick", "15"};
DatabaseTests.cs (204) : players.AddRow(new Row(columns2, values7));
DatabaseTests.cs (205) : players.AddRow(new Row(columns2, values8));
DatabaseTests.cs (206) : players.AddRow(new Row(columns2, values9));
DatabaseTests.cs (207) : players.AddRow(new Row(columns2, values10));
DatabaseTests.cs (208) : players.AddRow(new Row(columns2, values11));
DatabaseTests.cs (209) : players.AddRow(new Row(columns2, values12));
DatabaseTests.cs (211) : db.AddTable(users);
DatabaseTests.cs (212) : db.AddTable(players);
DatabaseTests.cs (214) : Condition Condition1 = new Condition("Age", ">", "30");
DatabaseTests.cs (216) : List<string> columnNames = new List<String> { "Name", "Age", "Height" };
DatabaseTests.cs (218) : Table result = db.Select("Users", columnNames, Condition1);
DatabaseTests.cs (220) : Assert.NotNull(result);
DatabaseTests.cs (221) : Assert.Equal(4, result.NumRows());
DatabaseTests.cs (222) : Assert.Equal(3, result.NumColumns());
DatabaseTests.cs (224) : Table result2 = db.Select("Users", new List<string> { "Name" }, null);
DatabaseTests.cs (226) : Assert.NotNull(result2);
DatabaseTests.cs (227) : Assert.Equal(6, result2.NumRows());
DatabaseTests.cs (228) : //Assert.Equal(1, result2.NumColumns());
DatabaseTests.cs (230) : Table result3 = db.Select("Banks", columnNames, null);
DatabaseTests.cs (231) : Assert.Null(result3);
DatabaseTests.cs (232) : Assert.Equal(Constants.TableDoesNotExistError, db.LastErrorMessage);
DatabaseTests.cs (234) : Table result4 = db.Select("Players", new List<string> { "Age" }, null);
DatabaseTests.cs (235) : Assert.Null(result4);
DatabaseTests.cs (236) : Assert.Equal(Constants.ColumnDoesNotExistError, db.LastErrorMessage);
DatabaseTests.cs (239) : Table result5 = db.Select("Players", new List<string> { "Name", "Number" }, new Condition("Number", "=", "10"));
DatabaseTests.cs (240) : Assert.NotNull(result5);
DatabaseTests.cs (241) : Assert.Equal(1, result5.NumRows());
DatabaseTests.cs (242) : Assert.Equal(2, result5.NumColumns());
DatabaseTests.cs (244) : }
DatabaseTests.cs (246) : [Fact]
DatabaseTests.cs (247) : public void TestUpdate()
DatabaseTests.cs (248) : {
DatabaseTests.cs (249) : Database db = new Database("admin", "password");
DatabaseTests.cs (251) : List<ColumnDefinition> columns1 = new List<ColumnDefinition>()
DatabaseTests.cs (252) : {
DatabaseTests.cs (253) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
DatabaseTests.cs (254) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
DatabaseTests.cs (255) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height"),
DatabaseTests.cs (256) : };
DatabaseTests.cs (258) : List<ColumnDefinition> columns2 = new List<ColumnDefinition>()
DatabaseTests.cs (259) : {
DatabaseTests.cs (260) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
DatabaseTests.cs (261) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Number")
DatabaseTests.cs (262) : };
DatabaseTests.cs (264) : Table users = new Table("Users", columns1);
DatabaseTests.cs (265) : Table players = new Table("Players", columns2);
DatabaseTests.cs (267) : List<String> values = new List<String>() { "Mikel", "67", "1.78" };
DatabaseTests.cs (268) : List<String> values2 = new List<String>() { "Julen", "22", "1.67" };
DatabaseTests.cs (269) : List<String> values3 = new List<String>() { "Anne", "33", "1.71" };
DatabaseTests.cs (270) : List<String> values4 = new List<String>() { "Mikel", "22", "1.90" };
DatabaseTests.cs (271) : List<String> values5 = new List<String>() { "Julen", "54", "1.87" };
DatabaseTests.cs (272) : List<String> values6 = new List<String>() { "Anne", "67", "1.84" };
DatabaseTests.cs (274) : users.AddRow(new Row(columns1, values));
DatabaseTests.cs (275) : users.AddRow(new Row(columns1, values2));
DatabaseTests.cs (276) : users.AddRow(new Row(columns1, values3));
DatabaseTests.cs (277) : users.AddRow(new Row(columns1, values4));
DatabaseTests.cs (278) : users.AddRow(new Row(columns1, values5));
DatabaseTests.cs (279) : users.AddRow(new Row(columns1, values6));
DatabaseTests.cs (281) : List<String> values7 = new List<String>() { "Messi", "10" };
DatabaseTests.cs (282) : List<String> values8 = new List<String>() { "Pedri", "8" };
DatabaseTests.cs (283) : List<String> values9 = new List<String>() { "Reus", "11", };
DatabaseTests.cs (284) : List<String> values10 = new List<String>() { "Lebron", "23", };
DatabaseTests.cs (285) : List<String> values11 = new List<String>() { "Curry", "30", };
DatabaseTests.cs (286) : List<String> values12 = new List<String>() { "Patrick", "15" };
DatabaseTests.cs (288) : players.AddRow(new Row(columns2, values7));
DatabaseTests.cs (289) : players.AddRow(new Row(columns2, values8));
DatabaseTests.cs (290) : players.AddRow(new Row(columns2, values9));
DatabaseTests.cs (291) : players.AddRow(new Row(columns2, values10));
DatabaseTests.cs (292) : players.AddRow(new Row(columns2, values11));
DatabaseTests.cs (293) : players.AddRow(new Row(columns2, values12));
DatabaseTests.cs (295) : db.AddTable(users);
DatabaseTests.cs (296) : db.AddTable(players);
DatabaseTests.cs (298) : List<SetValue> sv = new List<SetValue>() { new SetValue("Name", "Ivan")};
DatabaseTests.cs (300) : Condition condition1 = new Condition("Age", "=", "22");
DatabaseTests.cs (302) : Assert.True(db.Update("Users", sv, condition1));
DatabaseTests.cs (304) : Table result = db.Select("Users", new List<string>() { "Name", "Age"}, new Condition("Name","=", "Ivan"));
DatabaseTests.cs (305) : Assert.NotNull(result);
DatabaseTests.cs (307) : Assert.False(db.Update("Players", sv, condition1));
DatabaseTests.cs (309) : Assert.False(db.Update("Users", sv, new Condition("Money", "<", "1000")));
DatabaseTests.cs (310) : Assert.Equal(Constants.ColumnDoesNotExistError, db.LastErrorMessage);
DatabaseTests.cs (312) : List<SetValue> sv2 = new List<SetValue>() { new SetValue("Number", "6")};
DatabaseTests.cs (313) : Assert.True(db.Update("Players", sv2, null));
DatabaseTests.cs (315) : Assert.False(db.Update("School", sv2, null));
DatabaseTests.cs (316) : Assert.Equal(Constants.TableDoesNotExistError, db.LastErrorMessage);
DatabaseTests.cs (317) : }
DatabaseTests.cs (319) : [Fact]
DatabaseTests.cs (320) : public void TestDeleteWhere()
DatabaseTests.cs (321) : {
DatabaseTests.cs (322) : Database db = new Database("admin", "password");
DatabaseTests.cs (324) : List<ColumnDefinition> columns1 = new List<ColumnDefinition>()
DatabaseTests.cs (325) : {
DatabaseTests.cs (326) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
DatabaseTests.cs (327) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
DatabaseTests.cs (328) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height"),
DatabaseTests.cs (329) : };
DatabaseTests.cs (331) : List<ColumnDefinition> columns2 = new List<ColumnDefinition>()
DatabaseTests.cs (332) : {
DatabaseTests.cs (333) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
DatabaseTests.cs (334) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Number")
DatabaseTests.cs (335) : };
DatabaseTests.cs (337) : Table users = new Table("Users", columns1);
DatabaseTests.cs (338) : Table players = new Table("Players", columns2);
DatabaseTests.cs (340) : List<String> values = new List<String>() { "Mikel", "67", "1.78" };
DatabaseTests.cs (341) : List<String> values2 = new List<String>() { "Julen", "22", "1.67" };
DatabaseTests.cs (342) : List<String> values3 = new List<String>() { "Anne", "33", "1.71" };
DatabaseTests.cs (343) : List<String> values4 = new List<String>() { "Mikel", "22", "1.90" };
DatabaseTests.cs (344) : List<String> values5 = new List<String>() { "Julen", "54", "1.87" };
DatabaseTests.cs (345) : List<String> values6 = new List<String>() { "Anne", "67", "1.84" };
DatabaseTests.cs (347) : users.AddRow(new Row(columns1, values));
DatabaseTests.cs (348) : users.AddRow(new Row(columns1, values2));
DatabaseTests.cs (349) : users.AddRow(new Row(columns1, values3));
DatabaseTests.cs (350) : users.AddRow(new Row(columns1, values4));
DatabaseTests.cs (351) : users.AddRow(new Row(columns1, values5));
DatabaseTests.cs (352) : users.AddRow(new Row(columns1, values6));
DatabaseTests.cs (354) : List<String> values7 = new List<String>() { "Messi", "10" };
DatabaseTests.cs (355) : List<String> values8 = new List<String>() { "Pedri", "8" };
DatabaseTests.cs (356) : List<String> values9 = new List<String>() { "Reus", "11", };
DatabaseTests.cs (357) : List<String> values10 = new List<String>() { "Lebron", "23", };
DatabaseTests.cs (358) : List<String> values11 = new List<String>() { "Curry", "30", };
DatabaseTests.cs (359) : List<String> values12 = new List<String>() { "Patrick", "15" };
DatabaseTests.cs (361) : players.AddRow(new Row(columns2, values7));
DatabaseTests.cs (362) : players.AddRow(new Row(columns2, values8));
DatabaseTests.cs (363) : players.AddRow(new Row(columns2, values9));
DatabaseTests.cs (364) : players.AddRow(new Row(columns2, values10));
DatabaseTests.cs (365) : players.AddRow(new Row(columns2, values11));
DatabaseTests.cs (366) : players.AddRow(new Row(columns2, values12));
DatabaseTests.cs (368) : db.AddTable(users);
DatabaseTests.cs (369) : db.AddTable(players);
DatabaseTests.cs (371) : Condition condition = new Condition("Name", "=", "Julen");
DatabaseTests.cs (373) : Assert.True(db.DeleteWhere("Users", condition));
DatabaseTests.cs (374) : Assert.False(db.DeleteWhere("Banks", condition));
DatabaseTests.cs (375) : Assert.Equal(Constants.TableDoesNotExistError, db.LastErrorMessage);
DatabaseTests.cs (376) : }
DatabaseTests.cs (380) : public void saveAndLoad()
DatabaseTests.cs (409) : //Empieza load
DatabaseTests.cs (410) : String TestDatabase = "TestDatabase";
DatabaseTests.cs (412) : StreamWriter w = new StreamWriter(TestDatabase + ".tbl");
DatabaseTests.cs (413) : w.WriteLine("admin");
DatabaseTests.cs (414) : w.WriteLine("password");
DatabaseTests.cs (415) : w.WriteLine(1);
DatabaseTests.cs (417) : w.WriteLine("users");
DatabaseTests.cs (418) : w.WriteLine(2);
DatabaseTests.cs (419) : w.WriteLine(2);
DatabaseTests.cs (421) : w.WriteLine("String->Name");
DatabaseTests.cs (422) : w.WriteLine("Int->Age");
DatabaseTests.cs (425) : w.WriteLine("Anne,25");
DatabaseTests.cs (427) : w.Close();
DatabaseTests.cs (451) : Database db2 = Database.Load(TestDatabase, "admin", "password");
DatabaseTests.cs (454) : Assert.NotNull(db2);
DatabaseTests.cs (456) : //
DatabaseTests.cs (457) : //
DatabaseTests.cs (458) : //
DatabaseTests.cs (460) : Table usersTable = db2.TableByName("users");
DatabaseTests.cs (461) : Assert.NotNull(usersTable);
DatabaseTests.cs (462) : Assert.Equal(2, usersTable.NumColumns());
DatabaseTests.cs (463) : Assert.Equal(2, usersTable.NumRows());
DatabaseTests.cs (465) : ColumnDefinition nameColumn = usersTable.ColumnByName("Name");
DatabaseTests.cs (466) : Assert.NotNull(nameColumn);
DatabaseTests.cs (467) : Assert.Equal(ColumnDefinition.DataType.String, nameColumn.Type);
DatabaseTests.cs (469) : ColumnDefinition ageColumn = usersTable.ColumnByName("Age");
DatabaseTests.cs (470) : Assert.NotNull(ageColumn);
DatabaseTests.cs (471) : Assert.Equal(ColumnDefinition.DataType.Int, ageColumn.Type);
DatabaseTests.cs (475) : Row first = usersTable.GetRow(0);
DatabaseTests.cs (477) : Assert.Equal("22", first.GetValue("Age"));
DatabaseTests.cs (479) : Database dbNull = Database.Load("dbNull", " admin", "password");
DatabaseTests.cs (481) : Assert.Null(dbNull);
DatabaseTests.cs (508) : [Fact]
DatabaseTests.cs (509) : public void TestCreateInsertUpdate()
DatabaseTests.cs (510) : {
DatabaseTests.cs (511) : Database db = new Database("admin", "password");
DatabaseTests.cs (513) : // Intenta crear una tabla sin columnas (error esperado)
DatabaseTests.cs (514) : string query = "CREATE TABLE Users ()";
DatabaseTests.cs (516) : // Act
DatabaseTests.cs (517) : string result = db.ExecuteMiniSQLQuery(query);
DatabaseTests.cs (519) : // Assert
DatabaseTests.cs (520) : Assert.Equal(Constants.DatabaseCreatedWithoutColumnsError, result);
DatabaseTests.cs (521) : }
DeleteUserExecuteTests.cs (1) : using DbManager;
DeleteUserExecuteTests.cs (2) : using DbManager.Parser;
DeleteUserExecuteTests.cs (3) : using DbManager.Security;
DeleteUserExecuteTests.cs (5) : namespace OurTests
DeleteUserExecuteTests.cs (6) : {
DeleteUserExecuteTests.cs (7) : public class DeleteUserExecuteTests
DeleteUserExecuteTests.cs (8) : {
DeleteUserExecuteTests.cs (10) : [Fact]
DeleteUserExecuteTests.cs (11) : public void ExecuteDeleteUserSuccess()
DeleteUserExecuteTests.cs (12) : {
DeleteUserExecuteTests.cs (13) : Database db = new Database("Admin", "1234");
DeleteUserExecuteTests.cs (14) : Manager manager = db.SecurityManager;
DeleteUserExecuteTests.cs (16) : Profile profile = new Profile { Name = "Test" };
DeleteUserExecuteTests.cs (17) : User user = new User("Paco", "1234");
DeleteUserExecuteTests.cs (18) : profile.Users.Add(user);
DeleteUserExecuteTests.cs (19) : manager.AddProfile(profile);
DeleteUserExecuteTests.cs (21) : DeleteUser delete = new DeleteUser("Paco");
DeleteUserExecuteTests.cs (22) : String result = delete.Execute(db);
DeleteUserExecuteTests.cs (24) : Assert.Equal(Constants.DeleteUserSuccess, result);
DeleteUserExecuteTests.cs (25) : Assert.Null(manager.UserByName("Test"));
DeleteUserExecuteTests.cs (26) : }
DeleteUserExecuteTests.cs (28) : [Fact] public void ExecuteDeleteUserFailure_NotAdmin()
DeleteUserExecuteTests.cs (29) : {
DeleteUserExecuteTests.cs (30) : Database db = new Database("notAdmin", "1234");
DeleteUserExecuteTests.cs (31) : Manager manager = db.SecurityManager;
DeleteUserExecuteTests.cs (33) : Profile profile = new Profile { Name = "Test" };
DeleteUserExecuteTests.cs (34) : User user = new User("Paco", "1234");
DeleteUserExecuteTests.cs (35) : profile.Users.Add(user);
DeleteUserExecuteTests.cs (36) : manager.AddProfile(profile);
DeleteUserExecuteTests.cs (38) : DeleteUser delete = new DeleteUser("Paco");
DeleteUserExecuteTests.cs (39) : String result = delete.Execute(db);
DeleteUserExecuteTests.cs (41) : Assert.Equal(Constants.UsersProfileIsNotGrantedRequiredPrivilege, result);
DeleteUserExecuteTests.cs (43) : }
DeleteUserExecuteTests.cs (45) : [Fact] public void ExecuteDeleteUserFailure_UserNotExist()
DeleteUserExecuteTests.cs (46) : {
DeleteUserExecuteTests.cs (47) : Database db = new Database("Admin", "1234");
DeleteUserExecuteTests.cs (48) : Manager manager = db.SecurityManager;
DeleteUserExecuteTests.cs (50) : Profile profile = new Profile { Name = "Test" };
DeleteUserExecuteTests.cs (51) : User user = new User("Paco", "1234");
DeleteUserExecuteTests.cs (52) : profile.Users.Add(user);
DeleteUserExecuteTests.cs (53) : manager.AddProfile(profile);
DeleteUserExecuteTests.cs (55) : DeleteUser delete = new DeleteUser("Jon");
DeleteUserExecuteTests.cs (56) : String result = delete.Execute(db);
DeleteUserExecuteTests.cs (58) : Assert.Equal(Constants.UserDoesNotExistError, result);
DeleteUserExecuteTests.cs (60) : }
DeleteUserExecuteTests.cs (62) : }
DeleteUserExecuteTests.cs (63) : }
InsertTest.cs (3) : using System.Collections;
InsertTest.cs (14) : Insert consulta = MiniSQLParser.Parse("INSERT INTO usuarios VALUES ('Alice','25','1.70')") as Insert;
InsertTest.cs (18) : consulta = MiniSQLParser.Parse("INSERT INTO Clientes VALUES ('John','Doe','USA')") as Insert;
InsertTest.cs (19) : Assert.NotNull(consulta);
InsertTest.cs (20) : Assert.Equal("Clientes", consulta.Table);
InsertTest.cs (22) : consulta = MiniSQLParser.Parse("INSERT INTO Table1 VALUES ('Paco')") as Insert;
InsertTest.cs (23) : Assert.NotNull(consulta);
InsertTest.cs (25) : consulta = MiniSQLParser.Parse("INSERT    INTO   Data   VALUES   ('123','45.6','Thursday')") as Insert;
ManagerTests.cs (2) : using DbManager.Security;
ManagerTests.cs (3) : using System;
ManagerTests.cs (4) : namespace OurTests
ManagerTests.cs (5) : {
ManagerTests.cs (6) : public class ManagerTests
ManagerTests.cs (7) : {
ManagerTests.cs (54) : [Fact]
ManagerTests.cs (55) : public void IsPasswordCorrect()
ManagerTests.cs (56) : {
ManagerTests.cs (58) : Manager manager = new Manager("Admin");
ManagerTests.cs (59) : Profile profile = new Profile { Name = "Users" };
ManagerTests.cs (61) : User user1 = new User("alice", "1234");
ManagerTests.cs (62) : User user2 = new User("bob", "abcd");
ManagerTests.cs (64) : profile.Users.Add(user1);
ManagerTests.cs (65) : profile.Users.Add(user2);
ManagerTests.cs (67) : manager.Profiles.Add(profile);
ManagerTests.cs (69) : Assert.True(manager.IsPasswordCorrect("alice", "1234"));
ManagerTests.cs (70) : Assert.True(manager.IsPasswordCorrect("bob", "abcd"));
ManagerTests.cs (72) : Assert.False(manager.IsPasswordCorrect("alice", "wrong"));
ManagerTests.cs (73) : Assert.False(manager.IsPasswordCorrect("charlie", "1234"));
ManagerTests.cs (74) : }
ManagerTests.cs (76) : [Fact]
ManagerTests.cs (77) : public void GrantPrivilege()
ManagerTests.cs (78) : {
ManagerTests.cs (80) : Manager manager = new Manager("Admin");
ManagerTests.cs (81) : Profile profile = new Profile { Name = "Editor" };
ManagerTests.cs (83) : User user1 = new User("alice", "1234");
ManagerTests.cs (84) : User user2 = new User("bob", "abcd");
ManagerTests.cs (86) : profile.Users.Add(user1);
ManagerTests.cs (87) : profile.Users.Add(user2);
ManagerTests.cs (89) : manager.Profiles.Add(profile);
ManagerTests.cs (91) : manager.GrantPrivilege("Editor", "Users", Privilege.Update);
ManagerTests.cs (92) : manager.GrantPrivilege("Editor", "Users", Privilege.Update);
ManagerTests.cs (94) : Assert.True(profile.IsGrantedPrivilege("Users", Privilege.Update));
ManagerTests.cs (95) : Assert.Single(profile.PrivilegesOn["Users"]);
ManagerTests.cs (97) : manager.GrantPrivilege("Editor", "Users", Privilege.Select);
ManagerTests.cs (98) : Assert.True(profile.IsGrantedPrivilege("Users", Privilege.Select));
ManagerTests.cs (99) : }
ManagerTests.cs (102) : [Fact]
ManagerTests.cs (103) : public void RevokePrivilege()
ManagerTests.cs (104) : {
ManagerTests.cs (105) : Manager manager = new Manager("Admin");
ManagerTests.cs (106) : Profile profile = new Profile() { Name = "Editor"};
ManagerTests.cs (108) : User user1 = new User("alice", "1234");
ManagerTests.cs (109) : User user2 = new User("bob", "abcd");
ManagerTests.cs (111) : profile.Users.Add(user1);
ManagerTests.cs (112) : profile.Users.Add(user2);
ManagerTests.cs (114) : manager.Profiles.Add(profile);
ManagerTests.cs (116) : manager.GrantPrivilege("Editor", "Users", Privilege.Update);
ManagerTests.cs (117) : manager.GrantPrivilege("Editor", "Users", Privilege.Insert);
ManagerTests.cs (119) : Assert.True(profile.IsGrantedPrivilege("Users", Privilege.Update));
ManagerTests.cs (120) : Assert.True(profile.IsGrantedPrivilege("Users", Privilege.Insert));
ManagerTests.cs (122) : manager.RevokePrivilege("Editor", "Users", Privilege.Update);
ManagerTests.cs (124) : Assert.False(profile.IsGrantedPrivilege("Users", Privilege.Update));
ManagerTests.cs (125) : }
ManagerTests.cs (127) : [Fact]
ManagerTests.cs (128) : public void GrantAndRevokeNotBeingAdmin()
ManagerTests.cs (129) : {
ManagerTests.cs (130) : Manager manager = new Manager("NotAdmin");
ManagerTests.cs (131) : Profile profile = new Profile() { Name = "Editor" };
ManagerTests.cs (133) : User user1 = new User("Paco", "1234");
ManagerTests.cs (135) : profile.Users.Add(user1);
ManagerTests.cs (136) : manager.Profiles.Add(profile);
ManagerTests.cs (138) : manager.GrantPrivilege("Editor", "Users", Privilege.Select);
ManagerTests.cs (139) : Assert.False(profile.IsGrantedPrivilege("Users", Privilege.Select));
ManagerTests.cs (141) : profile.GrantPrivilege("Users", Privilege.Insert);
ManagerTests.cs (142) : Assert.True(profile.IsGrantedPrivilege("Users", Privilege.Insert));
ManagerTests.cs (144) : manager.RevokePrivilege("Editor", "Users", Privilege.Insert);
ManagerTests.cs (145) : Assert.True(profile.IsGrantedPrivilege("Users", Privilege.Insert));
ManagerTests.cs (146) : }
ManagerTests.cs (148) : [Fact]
ManagerTests.cs (149) : public void ExecuteGrant()
ManagerTests.cs (150) : {
ManagerTests.cs (151) : Database database = new Database("Admin", "password");
ManagerTests.cs (152) : Manager manager = database.SecurityManager;
ManagerTests.cs (154) : Profile profile = new Profile() { Name = "Editor" };
ManagerTests.cs (156) : User user1 = new User("Andrea", "1234");
ManagerTests.cs (157) : User user2 = new User("Jon", "1234");
ManagerTests.cs (159) : profile.Users.Add(user1);
ManagerTests.cs (160) : profile.Users.Add(user2);
ManagerTests.cs (162) : manager.Profiles.Add(profile);
ManagerTests.cs (164) : Grant grant = new Grant("SELECT", "Users", "Editor");
ManagerTests.cs (165) : String result = grant.Execute(database);
ManagerTests.cs (167) : Assert.Equal(Constants.GrantPrivilegeSuccess, result);
ManagerTests.cs (168) : Assert.True(profile.IsGrantedPrivilege("Users", Privilege.Select));
ManagerTests.cs (170) : String result2 = grant.Execute(database);
ManagerTests.cs (171) : Assert.Equal(Constants.ProfileAlreadyHasPrivilege, result2);
ManagerTests.cs (173) : Database database2 = new Database("notAdmin", "1234");
ManagerTests.cs (174) : Manager manager2 = database2.SecurityManager;
ManagerTests.cs (176) : Profile profile2 = new Profile() { Name = "Editor2" };
ManagerTests.cs (178) : manager.Profiles.Add(profile2);
ManagerTests.cs (179) : String result3 = grant.Execute(database2);
ManagerTests.cs (180) : Assert.Equal(Constants.UsersProfileIsNotGrantedRequiredPrivilege, result3);
ManagerTests.cs (182) : Grant grant2 = new Grant("CHANGE", "Users", "Editor");
ManagerTests.cs (183) : String result4 = grant2.Execute(database);
ManagerTests.cs (184) : Assert.Equal(Constants.PrivilegeDoesNotExistError, result4);
ManagerTests.cs (186) : Grant grant3 = new Grant("UPDATE", "Users", "Pro");
ManagerTests.cs (187) : String result5 = grant3.Execute(database);
ManagerTests.cs (188) : Assert.Equal(Constants.SecurityProfileDoesNotExistError, result5);
ManagerTests.cs (189) : }
ManagerTests.cs (239) : }
ManagerTests.cs (240) : }
SelectTest.cs (91) : Assert.Equal(result4, Constants.TableDoesNotExistError);
SelectTest.cs (96) : [Fact]
SelectTest.cs (97) : public void TestSelectParsing()
SelectTest.cs (98) : {
SelectTest.cs (100) : Select query = MiniSQLParser.Parse("SELECT * FROM Users") as Select;
SelectTest.cs (101) : Assert.NotNull(query);
SelectTest.cs (102) : Assert.Equal("Users", query.Table);
SelectTest.cs (103) : Assert.Single(query.Columns);
SelectTest.cs (104) : Assert.Equal("*", query.Columns[0]);
SelectTest.cs (105) : Assert.Null(query.Where);
SelectTest.cs (107) : query = MiniSQLParser.Parse("SELECT Name,Score FROM Users WHERE Score>='50'") as Select;
SelectTest.cs (108) : Assert.NotNull(query);
SelectTest.cs (109) : Assert.Equal("Users", query.Table);
SelectTest.cs (110) : Assert.Equal(2, query.Columns.Count);
SelectTest.cs (111) : Assert.Equal("Name", query.Columns[0]);
SelectTest.cs (112) : Assert.Equal("Score", query.Columns[1]);
SelectTest.cs (113) : Assert.NotNull(query.Where);
SelectTest.cs (114) : Assert.Equal("Score", query.Where.ColumnName);
SelectTest.cs (115) : Assert.Equal(">=", query.Where.Operator);
SelectTest.cs (116) : Assert.Equal("50", query.Where.LiteralValue);
SelectTest.cs (119) : Assert.Null(MiniSQLParser.Parse("SELECT Name Score FROM Users"));
SelectTest.cs (120) : Assert.Null(MiniSQLParser.Parse("SELECT Name, FROM Users"));
SelectTest.cs (121) : Assert.Null(MiniSQLParser.Parse("SELECT Name FROMUsers"));
SelectTest.cs (122) : Assert.Null(MiniSQLParser.Parse("SELECT Name FROM Users WHERE Score >= '50'"));
SelectTest.cs (123) : Assert.Null(MiniSQLParser.Parse("SELECT FROM Users"));
SelectTest.cs (124) : }
SelectTest.cs (126) : [Fact]
SelectTest.cs (127) : public void ExecuteSelectWithCondition()
SelectTest.cs (128) : {
SelectTest.cs (130) : Database db = new Database("admin", "password");
SelectTest.cs (132) : List<ColumnDefinition> columns = new List<ColumnDefinition>
SelectTest.cs (133) : {
SelectTest.cs (134) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
SelectTest.cs (135) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Score")
SelectTest.cs (136) : };
SelectTest.cs (138) : Table table = new Table("Users", columns);
SelectTest.cs (140) : table.AddRow(new Row(columns, new List<string> { "Alice", "45" }));
SelectTest.cs (141) : table.AddRow(new Row(columns, new List<string> { "Bob", "60" }));
SelectTest.cs (142) : table.AddRow(new Row(columns, new List<string> { "Charlie", "70" }));
SelectTest.cs (144) : db.AddTable(table);
SelectTest.cs (147) : List<string> selectedColumns = new List<string> { "Name" };
SelectTest.cs (148) : Condition condition = new Condition("Score", ">", "50");
SelectTest.cs (149) : Select select = new Select("Users", selectedColumns, condition);
SelectTest.cs (152) : string result = select.Execute(db);
SelectTest.cs (155) : string expectedOutput =
SelectTest.cs (156) : "['Name']{'Bob'}{'Charlie'}";
SelectTest.cs (158) : Assert.Equal(expectedOutput.Trim(), result.Trim());
SelectTest.cs (160) : }
SelectTest.cs (162) : [Fact]
SelectTest.cs (163) : public void ExecuteSelectAllColumns()
SelectTest.cs (164) : {
SelectTest.cs (165) : Database db = new Database("admin", "password");
SelectTest.cs (167) : List<ColumnDefinition> columns = new List<ColumnDefinition>
SelectTest.cs (168) : {
SelectTest.cs (169) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
SelectTest.cs (170) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Score")
SelectTest.cs (171) : };
SelectTest.cs (173) : Table table = new Table("Users", columns);
SelectTest.cs (175) : table.AddRow(new Row(columns, new List<string> { "Alice", "45" }));
SelectTest.cs (176) : table.AddRow(new Row(columns, new List<string> { "Bob", "60" }));
SelectTest.cs (178) : db.AddTable(table);
SelectTest.cs (181) : string query = "SELECT * FROM Users";
SelectTest.cs (182) : string result = db.ExecuteMiniSQLQuery(query);
SelectTest.cs (184) : string expected =
SelectTest.cs (185) : "['Name','Score']{'Alice','45'}{'Bob','60'}";
SelectTest.cs (187) : Assert.Equal(expected.Trim(), result.Trim());
SelectTest.cs (188) : }
TableTests.cs (52) : Assert.Equal("Mikel", result.GetRow(0).GetValue("Name"));
TableTests.cs (59) : Table result2 = table.Select(columnNames2, null);
TableTests.cs (65) : List<string> columnNames3 = new List<string> { "Age", "Name" };
TableTests.cs (66) : Table result3 = table.Select(columnNames3, null);
TableTests.cs (68) : Assert.Equal(6, result3.NumRows());
TableTests.cs (69) : Assert.Equal(2, result3.NumColumns());
TableTests.cs (71) : Assert.Equal("67", result3.GetRow(0).GetValue("Age"));
TableTests.cs (129) : List<String> values4 = new List<string>() { "Jon", "20", "1.82" };
TableTests.cs (137) : Row row4 = new Row(columns, values4);
TableTests.cs (142) : table.AddRow(row4);
TableTests.cs (144) : Assert.Equal("['Name','Age','Height']{'Mikel','67','1.85'}{'Julen','22','1.73'}{'Anne','30','1.79'}{'Jon','20','1.82'}", table.ToString());
TableTests.cs (145) : Assert.Equal("", table2.ToString());
TableTests.cs (359) : [Fact]
TableTests.cs (360) : public void SelectAllColumnsWithoutCondition()
TableTests.cs (361) : {
TableTests.cs (362) : List<ColumnDefinition> columns = new List<ColumnDefinition>()
TableTests.cs (363) : {
TableTests.cs (364) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (365) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
TableTests.cs (366) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height"),
TableTests.cs (367) : };
TableTests.cs (369) : Table table = new Table("Users", columns);
TableTests.cs (371) : table.AddRow(new Row(columns, new List<string> { "Alice", "25", "1.70" }));
TableTests.cs (372) : table.AddRow(new Row(columns, new List<string> { "Bob", "30", "1.80" }));
TableTests.cs (373) : table.AddRow(new Row(columns, new List<string> { "Unai", "20", "2.00" }));
TableTests.cs (375) : List<string> selectedColumns = new List<string> { "Name", "Age", "Height" };
TableTests.cs (377) : Table result = table.Select(selectedColumns, null);
TableTests.cs (379) : Assert.NotNull(result);
TableTests.cs (380) : Assert.Equal(3, result.NumRows());
TableTests.cs (381) : Assert.Equal(3, result.NumColumns());
TableTests.cs (382) : Assert.Equal("Alice", result.GetRow(0).GetValue("Name"));
TableTests.cs (383) : }
TableTests.cs (385) : [Fact]
TableTests.cs (386) : public void SelectWithDisorderedColumns()
TableTests.cs (387) : {
TableTests.cs (388) : List<ColumnDefinition> columns = new List<ColumnDefinition>()
TableTests.cs (389) : {
TableTests.cs (390) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (391) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
TableTests.cs (392) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height"),
TableTests.cs (393) : };
TableTests.cs (395) : Table table = new Table("Users", columns);
TableTests.cs (397) : table.AddRow(new Row(columns, new List<string> { "Alice", "25", "1.70" }));
TableTests.cs (398) : table.AddRow(new Row(columns, new List<string> { "Bob", "30", "1.80" }));
TableTests.cs (400) : List<string> selectedColumns = new List<string> { "Height", "Name" };
TableTests.cs (402) : Table result = table.Select(selectedColumns, null);
TableTests.cs (404) : Assert.NotNull(result);
TableTests.cs (405) : Assert.Equal(2, result.NumRows());
TableTests.cs (406) : Assert.Equal(2, result.NumColumns());
TableTests.cs (407) : Assert.Equal("1.70", result.GetRow(0).GetValue("Height"));
TableTests.cs (408) : Assert.Equal("Alice", result.GetRow(0).GetValue("Name"));
TableTests.cs (409) : }
UpdateTableTests.cs (1) : using System.Text.RegularExpressions;
UpdateTableTests.cs (2) : using DbManager;
UpdateTableTests.cs (3) : using DbManager.Parser;
UpdateTableTests.cs (4) : using DbManager.Security;
UpdateTableTests.cs (6) : namespace OurTests
UpdateTableTests.cs (7) : {
UpdateTableTests.cs (8) : public class UpdateTableTests
UpdateTableTests.cs (9) : {
UpdateTableTests.cs (11) : [Fact]
UpdateTableTests.cs (12) : public void UpdateTable()
UpdateTableTests.cs (13) : {
UpdateTableTests.cs (14) : /*
UpdateTableTests.cs (15) : UPDATE Table1 SET name='Paco'
UpdateTableTests.cs (16) : UPDATE T SET name='Unai'
UpdateTableTests.cs (17) : UPDATE Table SET age='30'
UpdateTableTests.cs (18) : UPDATE Table SET name='Paco'
UpdateTableTests.cs (19) : UPDATE T
UpdateTableTests.cs (20) : UPDATE User SET name='Unai' WHERE age = '22'
UpdateTableTests.cs (21) : UPDATE User SET Age='30',Name='Unai' WHERE name='Ibai'
UpdateTableTests.cs (22) : UPDATE SET Age = '30'
UpdateTableTests.cs (23) : UPDATE User WHERE Name='Ivan'
UpdateTableTests.cs (24) : UPDATE User SET Name='Paco' WHERE
UpdateTableTests.cs (25) : UPDATE User SET Name='ALberto' WHERE Age>'40'
UpdateTableTests.cs (26) : */
UpdateTableTests.cs (28) : string updateTablePattern =
UpdateTableTests.cs (29) : @"UPDATE\s+([a-zA-Z][a-zA-Z0-9]*)\s+SET\s+((?:[a-zA-Z][a-zA-Z0-9]*='[^']*')(?:,[a-zA-Z][a-zA-Z0-9]*='[^']*')*)(?:\s+WHERE\s+([a-zA-Z_]+)(=|!=|<|>)'([^']*)')?";
UpdateTableTests.cs (31) : Update query = MiniSQLParser.Parse("UPDATE Table1 SET nam e= 'Paco'") as Update;
UpdateTableTests.cs (32) : Assert.Null(query);
UpdateTableTests.cs (33) : query = MiniSQLParser.Parse("UPDATE T SET name='Unai'") as Update;
UpdateTableTests.cs (34) : Assert.NotNull(query);
UpdateTableTests.cs (37) : query = MiniSQLParser.Parse("UPDATE Table SET age='30'") as Update;
UpdateTableTests.cs (38) : Assert.NotNull(query);
UpdateTableTests.cs (39) : query = MiniSQLParser.Parse("UPDATE Table SET name='Paco'") as Update;
UpdateTableTests.cs (40) : Assert.NotNull(query);
UpdateTableTests.cs (41) : query = MiniSQLParser.Parse("UPDATE T") as Update;
UpdateTableTests.cs (42) : Assert.Null(query);
UpdateTableTests.cs (44) : string sql = "UPDATE User SET name='Unai' WHERE age = '22'";
UpdateTableTests.cs (46) : Match matchUpdate = Regex.Match(sql, updateTablePattern);
UpdateTableTests.cs (47) : Assert.NotEqual(sql.Length, matchUpdate.Value.Length);
UpdateTableTests.cs (49) : query = MiniSQLParser.Parse("UPDATE User SET Age='30',Name='Unai' WHERE name='Ibai'") as Update;
UpdateTableTests.cs (50) : Assert.NotNull(query);
UpdateTableTests.cs (51) : query = MiniSQLParser.Parse("UPDATE SET Age = '30'") as Update;
UpdateTableTests.cs (52) : Assert.Null(query);
UpdateTableTests.cs (53) : query = MiniSQLParser.Parse("UPDATE User WHERE Name='Ivan'") as Update;
UpdateTableTests.cs (54) : Assert.Null(query);
UpdateTableTests.cs (56) : sql = "UPDATE User SET Name='Paco' WHERE";
UpdateTableTests.cs (57) : matchUpdate = Regex.Match(sql, updateTablePattern);
UpdateTableTests.cs (58) : Assert.NotEqual(sql.Length, matchUpdate.Value.Length);
UpdateTableTests.cs (60) : query = MiniSQLParser.Parse("UPDATE User SET Name='ALberto' WHERE Age>'40'") as Update;
UpdateTableTests.cs (61) : Assert.NotNull(query);
UpdateTableTests.cs (63) : //...
UpdateTableTests.cs (64) : }
UpdateTableTests.cs (87) : [Fact]
UpdateTableTests.cs (88) : public void executeUpdateTable()
UpdateTableTests.cs (89) : {
UpdateTableTests.cs (90) : Database db = new Database("admin", "password");
UpdateTableTests.cs (92) : List<ColumnDefinition> columns = new List<ColumnDefinition>()
UpdateTableTests.cs (93) : {
UpdateTableTests.cs (94) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
UpdateTableTests.cs (95) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age")
UpdateTableTests.cs (96) : };
UpdateTableTests.cs (98) : List<ColumnDefinition> columns2 = new List<ColumnDefinition>()
UpdateTableTests.cs (99) : {
UpdateTableTests.cs (100) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
UpdateTableTests.cs (101) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Number")
UpdateTableTests.cs (102) : };
UpdateTableTests.cs (104) : List<string> values1 = new List<string>() {"Gorka", "33" };
UpdateTableTests.cs (105) : List<string> values2 = new List<string>() {"Jon", "49" };
UpdateTableTests.cs (106) : List<string> values3 = new List<string>() {"Ana", "21" };
UpdateTableTests.cs (108) : List<string> values4 = new List<string>() { "Lebron", "23"};
UpdateTableTests.cs (109) : List<string> values5 = new List<string>() { "Messi", "10"};
UpdateTableTests.cs (110) : List<string> values6 = new List<string>() { "Curry", "30" };
UpdateTableTests.cs (112) : Table Users = new Table("Users", columns);
UpdateTableTests.cs (113) : Table Players = new Table("Players", columns2);
UpdateTableTests.cs (115) : Row row1 = new Row(columns, values1);
UpdateTableTests.cs (116) : Row row2 = new Row(columns, values2);
UpdateTableTests.cs (117) : Row row3 = new Row(columns, values3);
UpdateTableTests.cs (119) : Users.AddRow(row1);
UpdateTableTests.cs (120) : Users.AddRow(row2);
UpdateTableTests.cs (121) : Users.AddRow(row3);
UpdateTableTests.cs (123) : Row row4 = new Row(columns2, values4);
UpdateTableTests.cs (124) : Row row5 = new Row(columns2, values5);
UpdateTableTests.cs (125) : Row row6 = new Row(columns2, values6);
UpdateTableTests.cs (127) : Players.AddRow(row4);
UpdateTableTests.cs (128) : Players.AddRow(row5);
UpdateTableTests.cs (129) : Players.AddRow(row6);
UpdateTableTests.cs (131) : db.AddTable(Users);
UpdateTableTests.cs (132) : db.AddTable(Players);
UpdateTableTests.cs (134) : Condition condition1 = new Condition("Name", "=", "Gorka");
UpdateTableTests.cs (135) : Condition condition2 = new Condition("Number", "=", "23");
UpdateTableTests.cs (137) : List<SetValue> st1 = new List<SetValue>() { new SetValue("Age", "30")};
UpdateTableTests.cs (138) : List<SetValue> st2 = new List<SetValue>() { new SetValue("Name", "Jordan")};
UpdateTableTests.cs (140) : Update ut = new Update("Users", st1, condition1);
UpdateTableTests.cs (141) : String result = ut.Execute(db);
UpdateTableTests.cs (143) : Assert.Equal(Constants.UpdateSuccess, result);
UpdateTableTests.cs (144) : Assert.Equal("30", db.TableByName("Users").GetRow(0).GetValue("Age"));
UpdateTableTests.cs (146) : Update ut2 = new Update("Players", st2, condition2);
UpdateTableTests.cs (147) : String result2 = ut2.Execute(db);
UpdateTableTests.cs (149) : Assert.Equal(Constants.UpdateSuccess,result2);
UpdateTableTests.cs (150) : Assert.Equal("Jordan", db.TableByName("Players").GetRow(0).GetValue("Name"));
UpdateTableTests.cs (152) : Condition condition3 = new Condition("Age", "=", "99");
UpdateTableTests.cs (153) : Update ut3 = new Update("Users", st1, condition3);
UpdateTableTests.cs (154) : String result3 = ut3.Execute(db);
UpdateTableTests.cs (156) : Assert.Equal(db.LastErrorMessage, result3);
UpdateTableTests.cs (158) : }
UpdateTableTests.cs (159) : }
UpdateTableTests.cs (160) : }
CreateTable.cs (17) : Table = table;
CreateTable.cs (18) : ColumnsParameters = columns;
CreateTable.cs (25) : if(database.CreateTable(Table, ColumnsParameters))
CreateTable.cs (26) : {
CreateTable.cs (27) : return Constants.CreateTableSuccess;
CreateTable.cs (28) : }
CreateTable.cs (30) : return database.LastErrorMessage;
DeleteUser.cs (5) : using DbManager.Security;
DeleteUser.cs (17) : Username = username;
DeleteUser.cs (24) : if (!database.SecurityManager.IsUserAdmin())
DeleteUser.cs (25) : {
DeleteUser.cs (26) : return Constants.UsersProfileIsNotGrantedRequiredPrivilege;
DeleteUser.cs (27) : }
DeleteUser.cs (29) : User user = database.SecurityManager.UserByName(Username);
DeleteUser.cs (30) : if ( user == null )
DeleteUser.cs (31) : {
DeleteUser.cs (32) : return Constants.UserDoesNotExistError;
DeleteUser.cs (33) : }
DeleteUser.cs (35) : Profile profile = database.SecurityManager.ProfileByUser(Username);
DeleteUser.cs (36) : if(profile == null)
DeleteUser.cs (37) : {
DeleteUser.cs (38) : return Constants.UserDoesNotExistError;
DeleteUser.cs (39) : }
DeleteUser.cs (41) : profile.Users.Remove(user);
DeleteUser.cs (42) : return Constants.DeleteUserSuccess;
Grant.cs (5) : using DbManager.Security;
Grant.cs (19) : PrivilegeName = privilegeName;
Grant.cs (20) : TableName = tableName;
Grant.cs (21) : ProfileName = profileName;
Grant.cs (29) : Manager manager = database.SecurityManager;
Grant.cs (31) : if (!manager.IsUserAdmin())
Grant.cs (32) : {
Grant.cs (33) : return Constants.UsersProfileIsNotGrantedRequiredPrivilege;
Grant.cs (34) : }
Grant.cs (36) : Privilege priv;
Grant.cs (37) : if (PrivilegeName.Equals("SELECT"))
Grant.cs (38) : {
Grant.cs (39) : priv = Privilege.Select;
Grant.cs (40) : } else if (PrivilegeName.Equals("DELETE"))
Grant.cs (41) : {
Grant.cs (42) : priv = Privilege.Delete;
Grant.cs (43) : } else if (PrivilegeName.Equals("INSERT"))
Grant.cs (44) : {
Grant.cs (45) : priv = Privilege.Insert;
Grant.cs (46) : } else if (PrivilegeName.Equals("UPDATE"))
Grant.cs (47) : {
Grant.cs (48) : priv = Privilege.Update;
Grant.cs (49) : } else
Grant.cs (50) : {
Grant.cs (51) : return Constants.PrivilegeDoesNotExistError;
Grant.cs (52) : }
Grant.cs (54) : Profile profile = null;
Grant.cs (55) : foreach(Profile pro in manager.Profiles)
Grant.cs (56) : {
Grant.cs (57) : if(pro.Name == ProfileName)
Grant.cs (58) : {
Grant.cs (59) : profile = pro;
Grant.cs (60) : }
Grant.cs (61) : }
Grant.cs (62) : if (profile == null)
Grant.cs (63) : {
Grant.cs (64) : return Constants.SecurityProfileDoesNotExistError;
Grant.cs (65) : }
Grant.cs (67) : if(profile.IsGrantedPrivilege(TableName, priv))
Grant.cs (68) : {
Grant.cs (69) : return Constants.ProfileAlreadyHasPrivilege;
Grant.cs (70) : }
Grant.cs (72) : manager.GrantPrivilege(ProfileName, TableName, priv);
Grant.cs (73) : return Constants.GrantPrivilegeSuccess;
MiniSQLParser.cs (13) : const string selectPattern = @"^SELECT\s+([a-zA-Z][a-zA-Z0-9]*(?:,[a-zA-Z][a-zA-Z0-9]*)*|\*)\s+FROM\s+([a-zA-Z][a-zA-Z0-9]*)(?:\s+WHERE\s+([a-zA-Z][a-zA-Z0-9]*)(=|!=|<|>|<=|>=)'([^']*)')?$";
MiniSQLParser.cs (15) : const string insertPattern = @"INSERT\s+INTO\s+([a-zA-Z][a-zA-Z0-9_]*)\s+VALUES\s+\(('(?:[^']*)'(?:,'[^']*')*)\)";
MiniSQLParser.cs (19) : const string createTablePattern = @"CREATE\s+TABLE\s+([a-zA-Z][a-zA-Z0-9]*)\s+\(\s*(.*?)\s*\)";
MiniSQLParser.cs (24) : const string deletePattern = @"^DELETE\s+FROM\s+([a-zA-Z][a-zA-Z0-9_]*)\s+WHERE\s+([a-zA-Z][a-zA-Z0-9_]*)(=|!=|<|>|<=|>=)'([^']*)'$";
MiniSQLParser.cs (32) : const string grantPattern = @"^GRANT\s+(DELETE|INSERT|SELECT|UPDATE)\s+ON\s+([a-zA-Z][a-zA-Z0-9]*)\s+TO\s+([a-zA-Z]+)$";
MiniSQLParser.cs (38) : const string deleteUserPattern = @"DELETE\s+USER\s+([a-zA-Z������������]+)$";
MiniSQLParser.cs (102) : string tableName = matchInsert.Groups[1].Value;
MiniSQLParser.cs (103) : string rawValues = matchInsert.Groups[2].Value;
MiniSQLParser.cs (105) : List<string> listValues = new List<string>();
MiniSQLParser.cs (107) : string[] values = rawValues.Split(',');
MiniSQLParser.cs (108) : for(int i = 0; i < values.Length; i++)
MiniSQLParser.cs (109) : {
MiniSQLParser.cs (110) : if (!values[i].StartsWith("'") || !values[i].EndsWith("'"))
MiniSQLParser.cs (111) : {
MiniSQLParser.cs (112) : return null;
MiniSQLParser.cs (113) : }
MiniSQLParser.cs (115) : string val = values[i].Trim('\'');
MiniSQLParser.cs (116) : listValues.Add(val);
MiniSQLParser.cs (117) : }
MiniSQLParser.cs (120) : return new Insert(tableName, listValues);
MiniSQLParser.cs (129) : if (match.Success )
MiniSQLParser.cs (130) : {
MiniSQLParser.cs (131) : return new DeleteUser(match.Groups[1].Value);
MiniSQLParser.cs (132) : }
MiniSQLParser.cs (133) : Match match1 = Regex.Match(miniSQLQuery, createTablePattern);
MiniSQLParser.cs (134) : if (match1.Success)
MiniSQLParser.cs (135) : {
MiniSQLParser.cs (136) : string tableName = match1.Groups[1].Value;
MiniSQLParser.cs (137) : string columns = match1.Groups[2].Value;
MiniSQLParser.cs (139) : List<ColumnDefinition> createColumns = new List<ColumnDefinition>();
MiniSQLParser.cs (141) : if (!string.IsNullOrWhiteSpace(columns))
MiniSQLParser.cs (142) : {
MiniSQLParser.cs (143) : string[] columnsParts = Regex.Split(columns, ",");
MiniSQLParser.cs (145) : foreach (string part in columnsParts)
MiniSQLParser.cs (146) : {
MiniSQLParser.cs (147) : string[] column = Regex.Split(part, @"\s+");
MiniSQLParser.cs (148) : if (column.Length == 2)
MiniSQLParser.cs (149) : {
MiniSQLParser.cs (150) : string name = column[0];
MiniSQLParser.cs (151) : string type = column[1];
MiniSQLParser.cs (153) : ColumnDefinition.DataType columnType;
MiniSQLParser.cs (154) : if (type.Equals("TEXT"))
MiniSQLParser.cs (155) : columnType = ColumnDefinition.DataType.String;
MiniSQLParser.cs (156) : else if (type.Equals("DOUBLE"))
MiniSQLParser.cs (157) : columnType = ColumnDefinition.DataType.Double;
MiniSQLParser.cs (158) : else if (type.Equals("INT"))
MiniSQLParser.cs (159) : columnType = ColumnDefinition.DataType.Int;
MiniSQLParser.cs (160) : else
MiniSQLParser.cs (163) : createColumns.Add(new ColumnDefinition(columnType, name));
MiniSQLParser.cs (164) : }
MiniSQLParser.cs (165) : else
MiniSQLParser.cs (166) : {
MiniSQLParser.cs (167) : return null;
MiniSQLParser.cs (168) : }
MiniSQLParser.cs (169) : }
MiniSQLParser.cs (170) : }
MiniSQLParser.cs (172) : return new CreateTable(tableName, createColumns);
MiniSQLParser.cs (173) : }
MiniSQLParser.cs (181) : }
MiniSQLParser.cs (182) : Match matchUpdate = Regex.Match(miniSQLQuery, updateTablePattern);
MiniSQLParser.cs (183) : if(matchUpdate.Success)
MiniSQLParser.cs (184) : {
MiniSQLParser.cs (185) : string tableName = matchUpdate.Groups[1].Value;
MiniSQLParser.cs (186) : string setValues = matchUpdate.Groups[2].Value;
MiniSQLParser.cs (188) : List<SetValue> updateValues = new List<SetValue>();
MiniSQLParser.cs (189) : string[] values = setValues.Split(',');
MiniSQLParser.cs (190) : for(int i = 0; i < values.Length; i++)
MiniSQLParser.cs (191) : {
MiniSQLParser.cs (192) : string[] parts = values[i].Trim().Split("=");
MiniSQLParser.cs (193) : if(parts.Length == 2)
MiniSQLParser.cs (194) : {
MiniSQLParser.cs (195) : string columnName = parts[0];
MiniSQLParser.cs (196) : string value = parts[1].Trim().Trim('\'');
MiniSQLParser.cs (197) : SetValue valueToAdd = new SetValue(columnName, value);
MiniSQLParser.cs (198) : updateValues.Add(valueToAdd);
MiniSQLParser.cs (199) : }
MiniSQLParser.cs (200) : }
MiniSQLParser.cs (202) : Condition condition = null;
MiniSQLParser.cs (203) : if (matchUpdate.Groups[3].Success)
MiniSQLParser.cs (204) : {
MiniSQLParser.cs (205) : string colName = matchUpdate.Groups[3].Value;
MiniSQLParser.cs (206) : string op = matchUpdate.Groups[4].Value;
MiniSQLParser.cs (207) : string val = matchUpdate.Groups[5].Value.Trim('\'');
MiniSQLParser.cs (209) : condition = new Condition(colName, op, val);
MiniSQLParser.cs (210) : }
MiniSQLParser.cs (212) : return new Update(tableName, updateValues, condition);
MiniSQLParser.cs (235) : Match matchGrant = Regex.Match(miniSQLQuery, grantPattern);
MiniSQLParser.cs (236) : if (matchGrant.Success)
MiniSQLParser.cs (237) : {
MiniSQLParser.cs (238) : string privilege = matchGrant.Groups[1].Value;
MiniSQLParser.cs (239) : string tableName = matchGrant.Groups[2].Value;
MiniSQLParser.cs (240) : string profile = matchGrant.Groups[3].Value;
MiniSQLParser.cs (242) : return new Grant(privilege, tableName, profile);
MiniSQLParser.cs (243) : }
MiniSQLParser.cs (287) : return null;
Select.cs (28) : Table tableSelect = database.Select(Table, Columns, Where);
Select.cs (29) : if (tableSelect != null)
Select.cs (31) : return tableSelect.ToString();
Select.cs (34) : return database.LastErrorMessage;
Update.cs (15) : Table = table;
Update.cs (16) : Columns = columnNames;
Update.cs (17) : Where = where;
Update.cs (26) : if(database.Update(Table, Columns, Where))
Update.cs (27) : {
Update.cs (28) : return Constants.UpdateSuccess;
Update.cs (29) : }
Update.cs (31) : return database.LastErrorMessage;
Manager.cs (30) : String encryted = Encryption.Encrypt(password);
Manager.cs (31) : for (int i = 0; i < Profiles.Count; i++)
Manager.cs (32) : {
Manager.cs (33) : if (Profiles[i] != null)
Manager.cs (34) : {
Manager.cs (35) : for (int j = 0; j < Profiles[i].Users.Count; j++)
Manager.cs (36) : {
Manager.cs (37) : if (Profiles[i].Users[j].Username == username && Profiles[i].Users[j].EncryptedPassword == encryted)
Manager.cs (38) : {
Manager.cs (39) : return true;
Manager.cs (40) : }
Manager.cs (41) : }
Manager.cs (42) : }
Manager.cs (43) : }
Manager.cs (55) : if(!IsUserAdmin())
Manager.cs (56) : {
Manager.cs (57) : return;
Manager.cs (58) : }
Manager.cs (60) : Profile profileGrant = ProfileByName(profileName);
Manager.cs (61) : if(profileGrant != null && table != null)
Manager.cs (62) : {
Manager.cs (63) : profileGrant.GrantPrivilege(table, privilege);
Manager.cs (64) : }
Manager.cs (72) : if (!IsUserAdmin())
Manager.cs (73) : {
Manager.cs (74) : return;
Manager.cs (75) : }
Manager.cs (77) : Profile profile = ProfileByName(profileName);
Manager.cs (78) : if (profile != null && table != null)
Manager.cs (79) : {
Manager.cs (80) : profile.RevokePrivilege(table, privilege);
Manager.cs (81) : }
Manager.cs (162) : foreach(Profile profile in Profiles)
Manager.cs (163) : {
Manager.cs (164) : if (profile.Name == profileName)
Manager.cs (165) : {
Manager.cs (166) : return profile;
Manager.cs (167) : }
Manager.cs (168) : }
Profile.cs (25) : if (!PrivilegesOn.ContainsKey(table))
Profile.cs (27) : PrivilegesOn[table] = new List<Privilege>();
Profile.cs (30) : if (PrivilegesOn[table].Contains(privilege))
Profile.cs (31) : {
Profile.cs (33) : }
Profile.cs (35) : PrivilegesOn[table].Add(privilege);
Profile.cs (36) : return true;
