Total written by this student: 28% lines / 28% characters

Condition.cs (33) : const String igual = "=";
Database.cs (31) : SecurityManager = new Manager(adminUsername);
Database.cs (32) : SecurityManager.AddProfile(new Profile { Name = Profile.AdminProfileName});
Database.cs (33) : SecurityManager.ProfileByName(Profile.AdminProfileName).Users.Add(new User(adminUsername, adminPassword));
Database.cs (102) : for (int i = 0; i<Tables.Count; i++)
Database.cs (103) : {
Database.cs (104) : if (Tables[i].Name == tableName)
Database.cs (105) : {
Database.cs (106) : Tables.RemoveAt(i);
Database.cs (107) : LastErrorMessage = Constants.DropTableSuccess;
Database.cs (108) : return true;
Database.cs (109) : }
Database.cs (110) : }
Database.cs (112) : LastErrorMessage = Constants.TableDoesNotExistError;
Database.cs (183) : if (TableByName(tableName) == null)
Database.cs (184) : {
Database.cs (185) : LastErrorMessage = Constants.TableDoesNotExistError;
Database.cs (186) : return false;
Database.cs (187) : }
Database.cs (189) : {
Database.cs (192) : }
Database.cs (194) : {
Database.cs (196) : {
Database.cs (198) : {
Database.cs (200) : }
Database.cs (201) : }
Database.cs (204) : return true;
Database.cs (205) : }
Database.cs (265) : this.SecurityManager.Save(databaseName+"manager");
Database.cs (293) : db.m_username = username;
Database.cs (357) : db.SecurityManager = Manager.Load(databaseName+"manager", username);
Database.cs (427) : {
Database.cs (428) : return Tables;
Database.cs (429) : }
Row.cs (65) : if (condition == null)
Row.cs (66) : {
Row.cs (68) : }
Row.cs (94) : String [] strings = value.Split(Delimiter);
Row.cs (96) : String result ="";
Row.cs (98) : for(int i = 0; i < strings.Length; i++)
Row.cs (99) : {
Row.cs (100) : result += strings[i];
Row.cs (102) : if(i < strings.Length - 1)
Row.cs (103) : {
Row.cs (104) : result += DelimiterEncoded;
Row.cs (105) : }
Row.cs (106) : }
Row.cs (108) : return result;
Row.cs (116) : String[] strings = value.Split(DelimiterEncoded);
Row.cs (118) : String result = "";
Row.cs (120) : for (int i = 0; i < strings.Length; i++)
Row.cs (121) : {
Row.cs (122) : result += strings[i];
Row.cs (124) : if (i < strings.Length - 1)
Row.cs (125) : {
Row.cs (126) : result += Delimiter;
Row.cs (127) : }
Row.cs (128) : }
Row.cs (130) : return result;
Table.cs (7) : using System.Windows.Markup;
Table.cs (45) : {
Table.cs (47) : }
Table.cs (164) : private List<int> RowIndicesWhereConditionIsTrue(Condition condition)
Table.cs (207) : return this;
Table.cs (217) : }
Table.cs (228) : {
Table.cs (230) : {
Table.cs (234) : {
Table.cs (236) : }
Table.cs (263) : if (condition == null)
ConditionTests.cs (19) : var condition1 = new Condition("Name", "=", "Ana");
ConditionTests.cs (21) : var condition3 = new Condition("Height", "=", "1.75");
DatabaseTests.cs (1) : ﻿using System.ComponentModel.DataAnnotations;
DatabaseTests.cs (3) : using DbManager.Parser;
DatabaseTests.cs (4) : using DbManager.Security;
DatabaseTests.cs (11) : [Fact]
DatabaseTests.cs (12) : public void testDropTable()
DatabaseTests.cs (13) : {
DatabaseTests.cs (14) : ColumnDefinition columna1 = new ColumnDefinition(ColumnDefinition.DataType.String, "nombre");
DatabaseTests.cs (15) : ColumnDefinition columna2 = new ColumnDefinition(ColumnDefinition.DataType.String, "apellido");
DatabaseTests.cs (16) : ColumnDefinition columna3 = new ColumnDefinition(ColumnDefinition.DataType.Int, "dni");
DatabaseTests.cs (17) : ColumnDefinition columna4 = new ColumnDefinition(ColumnDefinition.DataType.Int, "edad");
DatabaseTests.cs (19) : List<ColumnDefinition> columnas = new List<ColumnDefinition>();
DatabaseTests.cs (20) : columnas.Add(columna1);
DatabaseTests.cs (21) : columnas.Add(columna2);
DatabaseTests.cs (22) : columnas.Add(columna3);
DatabaseTests.cs (23) : columnas.Add(columna4);
DatabaseTests.cs (25) : Table tabla1 = new Table("usuarios", columnas);
DatabaseTests.cs (27) : columna1 = new ColumnDefinition(ColumnDefinition.DataType.Int, "dni");
DatabaseTests.cs (28) : columna2 = new ColumnDefinition(ColumnDefinition.DataType.String, "empleo");
DatabaseTests.cs (30) : columnas.Add(columna1);
DatabaseTests.cs (31) : columnas.Add(columna2);
DatabaseTests.cs (33) : Table tabla2 = new Table("usuarioEmpleo", columnas);
DatabaseTests.cs (35) : Database bdd = new Database("usuario", "123");
DatabaseTests.cs (37) : bdd.AddTable(tabla1);
DatabaseTests.cs (38) : bdd.AddTable(tabla2);
DatabaseTests.cs (40) : bdd.DropTable("usuarios");
DatabaseTests.cs (42) : Assert.Null(bdd.TableByName("usuarios"));
DatabaseTests.cs (43) : Assert.Equal(bdd.TableByName("usuarioEmpleo").Name, "usuarioEmpleo");
DatabaseTests.cs (44) : }
DatabaseTests.cs (46) : [Fact]
DatabaseTests.cs (47) : public void testDeleteWhere()
DatabaseTests.cs (48) : {
DatabaseTests.cs (49) : ColumnDefinition columna1 = new ColumnDefinition(ColumnDefinition.DataType.String, "nombre");
DatabaseTests.cs (50) : ColumnDefinition columna2 = new ColumnDefinition(ColumnDefinition.DataType.String, "apellido");
DatabaseTests.cs (51) : ColumnDefinition columna3 = new ColumnDefinition(ColumnDefinition.DataType.Int, "dni");
DatabaseTests.cs (52) : ColumnDefinition columna4 = new ColumnDefinition(ColumnDefinition.DataType.Int, "edad");
DatabaseTests.cs (53) : ColumnDefinition columna5 = new ColumnDefinition(ColumnDefinition.DataType.Int, "fechaNcto");
DatabaseTests.cs (55) : List<ColumnDefinition> columnas = new List<ColumnDefinition>();
DatabaseTests.cs (56) : columnas.Add(columna1);
DatabaseTests.cs (57) : columnas.Add(columna2);
DatabaseTests.cs (58) : columnas.Add(columna3);
DatabaseTests.cs (59) : columnas.Add(columna4);
DatabaseTests.cs (60) : columnas.Add(columna5);
DatabaseTests.cs (62) : Table tabla1 = new Table("usuarios", columnas);
DatabaseTests.cs (64) : List<String> valores1 = new List<String>();
DatabaseTests.cs (66) : valores1.Add("Alexander");
DatabaseTests.cs (67) : valores1.Add("Landajo");
DatabaseTests.cs (68) : valores1.Add("32589328R");
DatabaseTests.cs (69) : valores1.Add("21");
DatabaseTests.cs (70) : valores1.Add("15-11-2003");
DatabaseTests.cs (72) : List<String> valores2 = new List<String>();
DatabaseTests.cs (74) : valores2.Add("Yerai");
DatabaseTests.cs (75) : valores2.Add("Garcia");
DatabaseTests.cs (76) : valores2.Add("621259328E");
DatabaseTests.cs (77) : valores2.Add("19");
DatabaseTests.cs (78) : valores2.Add("21-05-2005");
DatabaseTests.cs (80) : List<String> valores3 = new List<String>();
DatabaseTests.cs (82) : valores3.Add("Ibai");
DatabaseTests.cs (83) : valores3.Add("Saez");
DatabaseTests.cs (84) : valores3.Add("6217544528J");
DatabaseTests.cs (85) : valores3.Add("27");
DatabaseTests.cs (86) : valores3.Add("23-08-1997");
DatabaseTests.cs (88) : List<String> valores4 = new List<String>();
DatabaseTests.cs (90) : valores4.Add("David");
DatabaseTests.cs (91) : valores4.Add("Nigga");
DatabaseTests.cs (92) : valores4.Add("3254745328E");
DatabaseTests.cs (93) : valores4.Add("16");
DatabaseTests.cs (94) : valores4.Add("21-12-2008");
DatabaseTests.cs (96) : Row fila1 = new Row(columnas, valores1);
DatabaseTests.cs (97) : Row fila2 = new Row(columnas, valores2);
DatabaseTests.cs (98) : Row fila3 = new Row(columnas, valores3);
DatabaseTests.cs (99) : Row fila4 = new Row(columnas, valores4);
DatabaseTests.cs (101) : Condition condicion = new Condition("edad", "<", "17");
DatabaseTests.cs (103) : Database bdd = new Database("usuario", "123");
DatabaseTests.cs (105) : bdd.AddTable(tabla1);
DatabaseTests.cs (107) : bdd.TableByName("usuarios").AddRow(fila1);
DatabaseTests.cs (108) : bdd.TableByName("usuarios").AddRow(fila2);
DatabaseTests.cs (109) : bdd.TableByName("usuarios").AddRow(fila3);
DatabaseTests.cs (110) : bdd.TableByName("usuarios").AddRow(fila4);
DatabaseTests.cs (112) : bdd.DeleteWhere("usuarios", condicion);
DatabaseTests.cs (114) : Assert.Equal(3, bdd.TableByName("usuarios").NumRows());
DatabaseTests.cs (115) : for (int i = 0; i < bdd.TableByName("usuarios").NumRows(); i++)
DatabaseTests.cs (116) : {
DatabaseTests.cs (117) : Assert.True(int.Parse(bdd.TableByName("usuarios").GetRow(i).GetValue("edad")) > 17);
DatabaseTests.cs (118) : }
DatabaseTests.cs (119) : }
DatabaseTests.cs (445) : Profile profile = new Profile { Name = "Lector" };
DatabaseTests.cs (446) : User user = new User("Hola", "password");
DatabaseTests.cs (448) : db.SecurityManager.AddProfile(profile);
DatabaseTests.cs (449) : db.SecurityManager.ProfileByName("Lector").Users.Add(user);
DatabaseTests.cs (451) : db.Save(dbName);
DatabaseTests.cs (457) : Database loadedDb = Database.Load(dbName, "Hola", "password");
ManagerTests.cs (1) : ﻿using System;
ManagerTests.cs (2) : using System.Collections.Generic;
ManagerTests.cs (3) : using System.Linq;
ManagerTests.cs (4) : using System.Text;
ManagerTests.cs (5) : using System.Threading.Tasks;
ManagerTests.cs (6) : using DbManager;
ManagerTests.cs (7) : using DbManager.Security;
ManagerTests.cs (9) : namespace OurTests
ManagerTests.cs (10) : {
ManagerTests.cs (11) : public class ManagerTests
ManagerTests.cs (12) : {
ManagerTests.cs (13) : [Fact]
ManagerTests.cs (14) : public void SaveAndLoadTest()
ManagerTests.cs (15) : {
ManagerTests.cs (16) : string dbName = "TestDB";
ManagerTests.cs (19) : Database db = new Database("admin", "password");
ManagerTests.cs (20) : db.CreateTable("Users", new List<ColumnDefinition>
ManagerTests.cs (21) : {
ManagerTests.cs (22) : new ColumnDefinition(ColumnDefinition.DataType.String, "ID"),
ManagerTests.cs (23) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name")
ManagerTests.cs (24) : });
ManagerTests.cs (26) : db.Insert("Users", new List<string> { "1", "Alice" });
ManagerTests.cs (27) : db.Insert("Users", new List<string> { "2", "Bob" });
ManagerTests.cs (29) : Profile profile = new Profile { Name = "Senior" };
ManagerTests.cs (31) : profile.Users.Add(new User("Juan", "12345"));
ManagerTests.cs (32) : profile.Users.Add(new User("Imanol", "9876"));
ManagerTests.cs (33) : profile.GrantPrivilege("Usuarios", Privilege.Select);
ManagerTests.cs (34) : profile.GrantPrivilege("Usuarios", Privilege.Delete);
ManagerTests.cs (35) : profile.GrantPrivilege("Empleo", Privilege.Update);
ManagerTests.cs (36) : profile.GrantPrivilege("Empleo", Privilege.Delete);
ManagerTests.cs (38) : db.SecurityManager.AddProfile(profile);
ManagerTests.cs (40) : db.SecurityManager.Save(dbName);
ManagerTests.cs (41) : Manager manager = Manager.Load(dbName, "admin");
ManagerTests.cs (45) : }
ManagerTests.cs (47) : [Fact]
ManagerTests.cs (48) : public void AddProfileTest()
ManagerTests.cs (49) : {
ManagerTests.cs (50) : string dbName = "TestDB";
ManagerTests.cs (53) : Database db = new Database("admin", "password");
ManagerTests.cs (54) : db.CreateTable("Users", new List<ColumnDefinition>
ManagerTests.cs (55) : {
ManagerTests.cs (56) : new ColumnDefinition(ColumnDefinition.DataType.String, "ID"),
ManagerTests.cs (57) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name")
ManagerTests.cs (58) : });
ManagerTests.cs (60) : db.Insert("Users", new List<string> { "1", "Alice" });
ManagerTests.cs (61) : db.Insert("Users", new List<string> { "2", "Bob" });
ManagerTests.cs (63) : Profile profile = new Profile { Name = "Senior" };
ManagerTests.cs (65) : profile.Users.Add(new User("Juan", "12345"));
ManagerTests.cs (66) : profile.Users.Add(new User("Imanol", "9876"));
ManagerTests.cs (67) : profile.GrantPrivilege("Usuarios", Privilege.Select);
ManagerTests.cs (68) : profile.GrantPrivilege("Usuarios", Privilege.Delete);
ManagerTests.cs (69) : profile.GrantPrivilege("Empleo", Privilege.Update);
ManagerTests.cs (70) : profile.GrantPrivilege("Empleo", Privilege.Delete);
ManagerTests.cs (72) : db.SecurityManager.AddProfile(profile);
ManagerTests.cs (74) : Assert.Equal(db.SecurityManager.Profiles[1].ToString(), profile.ToString());
ManagerTests.cs (75) : }
ManagerTests.cs (77) : [Fact]
ManagerTests.cs (78) : public void RemoveProfileTest()
ManagerTests.cs (79) : {
ManagerTests.cs (81) : string dbName = "TestDB";
ManagerTests.cs (84) : Database db = new Database("admin", "password");
ManagerTests.cs (85) : db.CreateTable("Users", new List<ColumnDefinition>
ManagerTests.cs (86) : {
ManagerTests.cs (87) : new ColumnDefinition(ColumnDefinition.DataType.String, "ID"),
ManagerTests.cs (88) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name")
ManagerTests.cs (89) : });
ManagerTests.cs (91) : db.Insert("Users", new List<string> { "1", "Alice" });
ManagerTests.cs (92) : db.Insert("Users", new List<string> { "2", "Bob" });
ManagerTests.cs (94) : Profile profile = new Profile { Name = "Senior" };
ManagerTests.cs (96) : profile.Users.Add(new User("Juan", "12345"));
ManagerTests.cs (97) : profile.Users.Add(new User("Imanol", "9876"));
ManagerTests.cs (98) : profile.GrantPrivilege("Usuarios", Privilege.Select);
ManagerTests.cs (99) : profile.GrantPrivilege("Usuarios", Privilege.Delete);
ManagerTests.cs (100) : profile.GrantPrivilege("Empleo", Privilege.Update);
ManagerTests.cs (101) : profile.GrantPrivilege("Empleo", Privilege.Delete);
ManagerTests.cs (103) : db.SecurityManager.AddProfile(profile);
ManagerTests.cs (104) : db.SecurityManager.RemoveProfile("Senior");
ManagerTests.cs (106) : Assert.Null(db.SecurityManager.ProfileByUser("Juan"));
ManagerTests.cs (107) : }
ManagerTests.cs (109) : [Fact]
ManagerTests.cs (110) : public void ProfileByUserTest()
ManagerTests.cs (111) : {
ManagerTests.cs (114) : string dbName = "TestDB";
ManagerTests.cs (117) : Database db = new Database("admin", "password");
ManagerTests.cs (118) : db.CreateTable("Users", new List<ColumnDefinition>
ManagerTests.cs (119) : {
ManagerTests.cs (120) : new ColumnDefinition(ColumnDefinition.DataType.String, "ID"),
ManagerTests.cs (121) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name")
ManagerTests.cs (122) : });
ManagerTests.cs (124) : db.Insert("Users", new List<string> { "1", "Alice" });
ManagerTests.cs (125) : db.Insert("Users", new List<string> { "2", "Bob" });
ManagerTests.cs (127) : Profile profile = new Profile { Name = "Senior" };
ManagerTests.cs (129) : profile.Users.Add(new User("Juan", "12345"));
ManagerTests.cs (130) : profile.Users.Add(new User("Imanol", "9876"));
ManagerTests.cs (131) : profile.GrantPrivilege("Usuarios", Privilege.Select);
ManagerTests.cs (132) : profile.GrantPrivilege("Usuarios", Privilege.Delete);
ManagerTests.cs (133) : profile.GrantPrivilege("Empleo", Privilege.Update);
ManagerTests.cs (134) : profile.GrantPrivilege("Empleo", Privilege.Delete);
ManagerTests.cs (136) : db.SecurityManager.AddProfile(profile);
ManagerTests.cs (138) : Assert.Equal(db.SecurityManager.ProfileByUser("Juan").ToString(), profile.ToString());
ManagerTests.cs (139) : }
ManagerTests.cs (213) : }
ManagerTests.cs (214) : }
ParseTests.cs (6) : namespace OurTests
ParseTests.cs (7) : {
ParseTests.cs (8) : public class ParseTests
ParseTests.cs (9) : {
ParseTests.cs (15) : MiniSqlQuery query1 = MiniSQLParser.Parse("SELECT Name,Age FROM Users WHERE Age>'-2.5'");
ParseTests.cs (45) : MiniSqlQuery query7 = MiniSQLParser.Parse("CREATE TABLE Customers ()");
ParseTests.cs (46) : Assert.NotNull(query7);
ParseTests.cs (47) : Assert.IsType<CreateTable>(query7);
ParseTests.cs (48) : CreateTable createQuery2 = (CreateTable)query7;
ParseTests.cs (49) : Assert.Equal("Customers", createQuery2.Table);
ParseTests.cs (50) : Assert.Equal(0, createQuery2.ColumnsParameters.Count);
ParseTests.cs (68) : }
ParseTests.cs (77) : [Fact]
ParseTests.cs (78) : public void DropTableTest()
ParseTests.cs (79) : {
ParseTests.cs (80) : ColumnDefinition columna1 = new ColumnDefinition(ColumnDefinition.DataType.String, "nombre");
ParseTests.cs (81) : ColumnDefinition columna2 = new ColumnDefinition(ColumnDefinition.DataType.String, "apellido");
ParseTests.cs (82) : ColumnDefinition columna3 = new ColumnDefinition(ColumnDefinition.DataType.Int, "dni");
ParseTests.cs (83) : ColumnDefinition columna4 = new ColumnDefinition(ColumnDefinition.DataType.Int, "edad");
ParseTests.cs (85) : List<ColumnDefinition> columnas1 = new List<ColumnDefinition>();
ParseTests.cs (86) : columnas1.Add(columna1);
ParseTests.cs (87) : columnas1.Add(columna2);
ParseTests.cs (88) : columnas1.Add(columna3);
ParseTests.cs (89) : columnas1.Add(columna4);
ParseTests.cs (91) : Table tabla1 = new Table("usuarios", columnas1);
ParseTests.cs (93) : columna1 = new ColumnDefinition(ColumnDefinition.DataType.Int, "dni");
ParseTests.cs (94) : columna2 = new ColumnDefinition(ColumnDefinition.DataType.String, "empleo");
ParseTests.cs (96) : List<ColumnDefinition> columnas2 = new List<ColumnDefinition>();
ParseTests.cs (98) : columnas2.Add(columna1);
ParseTests.cs (99) : columnas2.Add(columna2);
ParseTests.cs (101) : Table tabla2 = new Table("usuarioEmpleo", columnas2);
ParseTests.cs (103) : columna1 = new ColumnDefinition(ColumnDefinition.DataType.Int, "dni");
ParseTests.cs (104) : columna2 = new ColumnDefinition(ColumnDefinition.DataType.String, "nombreFamiliar");
ParseTests.cs (106) : List<ColumnDefinition> columnas3 = new List<ColumnDefinition>();
ParseTests.cs (108) : columnas3.Add(columna1);
ParseTests.cs (109) : columnas3.Add(columna2);
ParseTests.cs (111) : Table tabla3 = new Table("usuarioFamiliar", columnas3);
ParseTests.cs (113) : Database bdd = new Database("usuario", "123");
ParseTests.cs (115) : bdd.AddTable(tabla1);
ParseTests.cs (116) : bdd.AddTable(tabla2);
ParseTests.cs (117) : bdd.AddTable(tabla3);
ParseTests.cs (119) : MiniSqlQuery query = MiniSQLParser.Parse("DROP TABLE usuarioFamiliar");
ParseTests.cs (120) : query.Execute(bdd);
ParseTests.cs (122) : Assert.Null(bdd.TableByName("usuarioFamiliar"));
ParseTests.cs (123) : Assert.Equal(bdd.TableByName("usuarioEmpleo"), tabla2);
ParseTests.cs (124) : Assert.Equal(bdd.TableByName("usuarios"), tabla1);
ParseTests.cs (125) : }
ParseTests.cs (127) : [Fact]
ParseTests.cs (128) : public void DeleteTest()
ParseTests.cs (129) : {
ParseTests.cs (130) : ColumnDefinition columna1 = new ColumnDefinition(ColumnDefinition.DataType.String, "nombre");
ParseTests.cs (131) : ColumnDefinition columna2 = new ColumnDefinition(ColumnDefinition.DataType.String, "apellido");
ParseTests.cs (132) : ColumnDefinition columna3 = new ColumnDefinition(ColumnDefinition.DataType.Int, "dni");
ParseTests.cs (133) : ColumnDefinition columna4 = new ColumnDefinition(ColumnDefinition.DataType.Int, "edad");
ParseTests.cs (135) : List<ColumnDefinition> columnas = new List<ColumnDefinition>();
ParseTests.cs (136) : columnas.Add(columna1);
ParseTests.cs (137) : columnas.Add(columna2);
ParseTests.cs (138) : columnas.Add(columna3);
ParseTests.cs (139) : columnas.Add(columna4);
ParseTests.cs (141) : Table tabla = new Table("usuarios", columnas);
ParseTests.cs (143) : Database bdd = new Database("usuario", "123");
ParseTests.cs (145) : bdd.AddTable(tabla);
ParseTests.cs (147) : List<String> values1 = new List<String>();
ParseTests.cs (149) : values1.Add("Alexander");
ParseTests.cs (150) : values1.Add("Landajo");
ParseTests.cs (151) : values1.Add("45949008E");
ParseTests.cs (152) : values1.Add("21");
ParseTests.cs (154) : List<String> values2 = new List<String>();
ParseTests.cs (156) : values2.Add("Yerai");
ParseTests.cs (157) : values2.Add("Garcia");
ParseTests.cs (158) : values2.Add("3292348N");
ParseTests.cs (159) : values2.Add("20");
ParseTests.cs (161) : List<String> values3 = new List<String>();
ParseTests.cs (163) : values3.Add("Ibai");
ParseTests.cs (164) : values3.Add("Saez");
ParseTests.cs (165) : values3.Add("6221247J");
ParseTests.cs (166) : values3.Add("32");
ParseTests.cs (168) : List<String> values4 = new List<String>();
ParseTests.cs (170) : values4.Add("David");
ParseTests.cs (171) : values4.Add("Moreno");
ParseTests.cs (172) : values4.Add("7232358N");
ParseTests.cs (173) : values4.Add("18");
ParseTests.cs (182) : bdd.Insert("usuarios", values1);
ParseTests.cs (183) : bdd.Insert("usuarios", values2);
ParseTests.cs (184) : bdd.Insert("usuarios", values3);
ParseTests.cs (185) : bdd.Insert("usuarios", values4);
ParseTests.cs (188) : //"DELETE\s+FROM\s+(\w+)(?:\s+WHERE\s+(.+))?"
ParseTests.cs (189) : //DELETE FROM usuarios WHERE ()
ParseTests.cs (192) : query.Execute(bdd);
ParseTests.cs (194) : Assert.Equal(3, bdd.TableByName("usuarios").NumRows());
ParseTests.cs (207) : }
ParseTests.cs (280) : [Fact]
ParseTests.cs (281) : public void UpdateTestDoubleValues()
ParseTests.cs (282) : {
ParseTests.cs (283) : MiniSqlQuery query1 = MiniSQLParser.Parse("UPDATE users SET Age='3.56' WHERE Name='Alice'");
ParseTests.cs (284) : Assert.NotNull(query1);
ParseTests.cs (285) : Assert.IsType<Update>(query1);
ParseTests.cs (287) : MiniSqlQuery query2 = MiniSQLParser.Parse("UPDATE users SET Age='4.56' WHERE Name='3.56'");
ParseTests.cs (288) : Assert.NotNull(query2);
ParseTests.cs (289) : Assert.IsType<Update>(query2);
ParseTests.cs (291) : MiniSqlQuery query3 = MiniSQLParser.Parse("UPDATE users SET Age='4.56',Altura='1.79' WHERE Name='Alexander'");
ParseTests.cs (292) : Assert.NotNull(query3);
ParseTests.cs (293) : Assert.IsType<Update>(query3);
ParseTests.cs (294) : }
ParseTests.cs (296) : [Fact]
ParseTests.cs (297) : public void UpdateTestCorrectWithSpaces()
ParseTests.cs (298) : {
ParseTests.cs (299) : MiniSqlQuery query1 = MiniSQLParser.Parse("   UPDATE users SET Age='3.56' WHERE Name='Alice'");
ParseTests.cs (300) : Assert.Null(query1);
ParseTests.cs (302) : MiniSqlQuery query2 = MiniSQLParser.Parse("UPDATE users SET Age='4.56' WHERE Name='3.56'     ");
ParseTests.cs (303) : Assert.Null(query2);
ParseTests.cs (305) : MiniSqlQuery query3 = MiniSQLParser.Parse("UPDATE users SET Age='4.56',     Altura='1.79' WHERE Name='Alexander'");
ParseTests.cs (306) : Assert.Null(query3);
ParseTests.cs (308) : MiniSqlQuery query4 = MiniSQLParser.Parse("UPDATE      users     SET Age='4.56',Altura='1.79'     WHERE    Name='345'");
ParseTests.cs (309) : Assert.NotNull(query4);
ParseTests.cs (310) : }
ParseTests.cs (312) : [Fact]
ParseTests.cs (313) : public void SelectTestIncorrectSelectWithWrongCapitalization()
ParseTests.cs (314) : {
ParseTests.cs (315) : MiniSqlQuery query1 = MiniSQLParser.Parse("SELECT Name,Age FROM users WHERE Name='Alexander'");
ParseTests.cs (316) : Assert.NotNull(query1);
ParseTests.cs (318) : MiniSqlQuery query2 = MiniSQLParser.Parse("SElECT Name,Age FrOM users WhERE Name='Alexander'");
ParseTests.cs (319) : Assert.Null(query2);
ParseTests.cs (321) : MiniSqlQuery query3 = MiniSQLParser.Parse("select Name,Age from users where Name='Alexander'");
ParseTests.cs (322) : Assert.Null(query3);
ParseTests.cs (324) : MiniSqlQuery query4 = MiniSQLParser.Parse("SELECT    Name,Age    FROM users    WHERE     Name='Alexander'");
ParseTests.cs (325) : Assert.NotNull(query4);
ParseTests.cs (327) : MiniSqlQuery query5 = MiniSQLParser.Parse("     SELECT Name,Age FROM users WHERE Name='Alexander'");
ParseTests.cs (328) : Assert.Null(query5);
ParseTests.cs (330) : MiniSqlQuery query6 = MiniSQLParser.Parse("SELECT Name,Age FROM users WHERE Name='Alexander'     ");
ParseTests.cs (331) : Assert.Null(query6);
ParseTests.cs (332) : }
ParseTests.cs (334) : [Fact]
ParseTests.cs (335) : public void createSecurityProfileParse()
ParseTests.cs (336) : {
ParseTests.cs (337) : MiniSqlQuery query1 = MiniSQLParser.Parse("CREATE SECURITY PROFILE Admin");
ParseTests.cs (338) : Assert.NotNull(query1);
ParseTests.cs (339) : Assert.IsType<CreateSecurityProfile>(query1);
ParseTests.cs (340) : CreateSecurityProfile createSecurityProfile1 = (CreateSecurityProfile)query1;
ParseTests.cs (341) : Assert.Equal("Admin", createSecurityProfile1.ProfileName);
ParseTests.cs (343) : MiniSqlQuery query2 = MiniSQLParser.Parse("CREATE   SECURITY   PROFILE   Admin");
ParseTests.cs (344) : Assert.NotNull(query2);
ParseTests.cs (345) : Assert.IsType<CreateSecurityProfile>(query2);
ParseTests.cs (346) : CreateSecurityProfile createSecurityProfile2 = (CreateSecurityProfile)query2;
ParseTests.cs (347) : Assert.Equal("Admin", createSecurityProfile2.ProfileName);
ParseTests.cs (349) : MiniSqlQuery query3 = MiniSQLParser.Parse("CREATE SECURITY PROFILE Admin23");
ParseTests.cs (350) : Assert.Null(query3);
ParseTests.cs (352) : MiniSqlQuery query4 = MiniSQLParser.Parse("CREaTE SECURITY PROFILE Admin");
ParseTests.cs (353) : Assert.Null(query4);
ParseTests.cs (355) : MiniSqlQuery query5 = MiniSQLParser.Parse("   CREATE SECURITY PROFILE Admin");
ParseTests.cs (356) : Assert.Null(query5);
ParseTests.cs (357) : }
ParseTests.cs (394) : }
ParseTests.cs (395) : }
CreateSecurityProfile.cs (5) : using DbManager.Security;
CreateSecurityProfile.cs (18) : ProfileName = profileName;
CreateSecurityProfile.cs (26) : Manager manager = database.SecurityManager;
CreateSecurityProfile.cs (28) : if (manager.IsUserAdmin())
CreateSecurityProfile.cs (29) : {
CreateSecurityProfile.cs (30) : manager.AddProfile(new Profile { Name=ProfileName});
CreateSecurityProfile.cs (32) : return Constants.CreateSecurityProfileSuccess;
CreateSecurityProfile.cs (33) : }
CreateSecurityProfile.cs (35) : return Constants.UsersProfileIsNotGrantedRequiredPrivilege;
Delete.cs (27) : Condition condition = new Condition(Where.ColumnName, Where.Operator, literalValue);
Delete.cs (30) : {
Delete.cs (31) : return Constants.DeleteSuccess;
Delete.cs (32) : }
Delete.cs (33) : return database.LastErrorMessage;
DropTable.cs (15) : Table = table;
DropTable.cs (24) : if (database.DropTable(Table))
DropTable.cs (25) : {
DropTable.cs (26) : return Constants.DropTableSuccess;
DropTable.cs (27) : }
DropTable.cs (28) : return database.LastErrorMessage;
Grant.cs (4) : using System.Xml.Linq;
Grant.cs (6) : using DbManager.Security;
Grant.cs (29) : if (database.SecurityManager.IsUserAdmin())
Grant.cs (30) : {
Grant.cs (31) : database.SecurityManager.ProfileByName(ProfileName).GrantPrivilege(TableName, PrivilegeUtils.FromPrivilegeName(PrivilegeName));
Grant.cs (33) : return Constants.GrantPrivilegeSuccess;
Grant.cs (34) : }
Grant.cs (36) : return Constants.Error;
MiniSQLParser.cs (20) : const string selectPattern = @"^SELECT\s+(\w+(?:,\w+)*)\s+FROM\s+(\w+)(\s+WHERE\s+\w+(?:=|<|>)'-?[\s\w.]+')*$";
MiniSQLParser.cs (21) : const string insertPattern = @"^INSERT\s+INTO\s+(\w+)\s+VALUES\s+\(('([^']+)'(?:,'([^']+)')*)\)$";
MiniSQLParser.cs (22) : const string dropTablePattern = @"^DROP\s+TABLE\s+(\w+)$";
MiniSQLParser.cs (24) : const string updateTablePattern = @"^UPDATE\s+(\w+)\s+SET\s+(\w+='[\w\s.]+'(?:,\w+='[\w\s.]+')*)\s+WHERE\s+(\w+(?:=|<|>)'[\w\s.]+')$";
MiniSQLParser.cs (25) : const string deletePattern = @"^DELETE\s+FROM\s+(\w+)\s+WHERE\s+(\w+(?:=|<|>)'([^']+)')$";
MiniSQLParser.cs (28) : const string createSecurityProfilePattern = @"^CREATE\s+SECURITY\s+PROFILE\s+([a-zA-Z]+)$";
MiniSQLParser.cs (49) : match = Regex.Match(miniSQLQuery, selectPattern);
MiniSQLParser.cs (59) : match = Regex.Match(miniSQLQuery, insertPattern);
MiniSQLParser.cs (72) : match = Regex.Match(miniSQLQuery, dropTablePattern);
MiniSQLParser.cs (79) : match = Regex.Match(miniSQLQuery, createTablePattern);
MiniSQLParser.cs (91) : return new CreateTable(table, columns);
MiniSQLParser.cs (127) : match = Regex.Match(miniSQLQuery, updateTablePattern);
MiniSQLParser.cs (130) : List<SetValue> columns = new List<SetValue>();
MiniSQLParser.cs (132) : string[] columnAssignments = match.Groups[2].Value.Split(',');
MiniSQLParser.cs (134) : foreach (var assignment in columnAssignments)
MiniSQLParser.cs (136) : var parts = assignment.Split('=');
MiniSQLParser.cs (137) : if (parts.Length == 2)
MiniSQLParser.cs (139) : columns.Add(new SetValue(parts[0].Trim(), parts[1].Trim('\'')));
MiniSQLParser.cs (140) : }
MiniSQLParser.cs (143) : string expresionCondition = @"(\w+)\s*(=|<|>)\s*'(.+)'$";
MiniSQLParser.cs (144) : Match match2 = Regex.Match(match.Groups[3].Value, expresionCondition);
MiniSQLParser.cs (146) : Condition condition = null;
MiniSQLParser.cs (148) : if (match2.Success)
MiniSQLParser.cs (149) : {
MiniSQLParser.cs (150) : string columnName = match2.Groups[1].Value.Trim();
MiniSQLParser.cs (151) : string op = match2.Groups[2].Value.Trim();
MiniSQLParser.cs (152) : string literalValue = match2.Groups[3].Value.Trim();
MiniSQLParser.cs (154) : condition = new Condition(columnName, op, literalValue);
MiniSQLParser.cs (157) : return new Update(match.Groups[1].Value, columns, condition);
MiniSQLParser.cs (161) : match = Regex.Match(miniSQLQuery, deletePattern);
MiniSQLParser.cs (175) : match = Regex.Match(miniSQLQuery, createSecurityProfilePattern);
MiniSQLParser.cs (176) : if (match.Success)
MiniSQLParser.cs (177) : {
MiniSQLParser.cs (178) : String profileName = match.Groups[1].Value;
MiniSQLParser.cs (179) : return new CreateSecurityProfile(profileName);
MiniSQLParser.cs (180) : }
MiniSQLParser.cs (239) : commaSeparator.Add(textParts[i].Trim('\''));
MiniSQLParser.cs (252) : string pattern = @"(\w+)\s*(=|!=|<|>|<=|>=)\s*'(.+)'$";
Select.cs (15) : public Select(string table, List<string> columns, Condition condition)
Update.cs (56) : {
Update.cs (57) : return Constants.UpdateSuccess;
Update.cs (58) : }
Update.cs (59) : return database.LastErrorMessage;
Manager.cs (5) : using System.Reflection.Metadata;
Manager.cs (18) : public Manager(string username)
Manager.cs (27) : if (ProfileByUser(m_username).Name.Equals("Admin")) return true;
Manager.cs (105) : if (profile != null)
Manager.cs (106) : Profiles.Add(profile);
Manager.cs (160) : for(int i = 0; i < Profiles.Count; i++)
Manager.cs (161) : {
Manager.cs (162) : for(int j = 0; j < Profiles[i].Users.Count; j++)
Manager.cs (163) : {
Manager.cs (164) : if (Profiles[i].Users[j].Username.Equals(username)) return Profiles[i];
Manager.cs (165) : }
Manager.cs (166) : }
Manager.cs (176) : for(int i = 0; i < Profiles.Count; i++)
Manager.cs (177) : {
Manager.cs (178) : if (Profiles[i].Name.Equals(profileName))
Manager.cs (179) : {
Manager.cs (180) : Profiles.RemoveAt(i);
Manager.cs (181) : return true;
Manager.cs (182) : }
Manager.cs (183) : }
Manager.cs (188) : private const string TableFileExtension = ".tbl";
Manager.cs (193) : string[] tableFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), databaseName + "_Profile" + "_*" + TableFileExtension);
Manager.cs (195) : if (tableFiles.Length == 0)
Manager.cs (196) : {
Manager.cs (197) : Console.WriteLine("Database does not exist");
Manager.cs (199) : }
Manager.cs (202) : Manager result = new Manager(username);
Manager.cs (204) : for (int i = 0; i < tableFiles.Count(); i++)
Manager.cs (205) : {
Manager.cs (206) : List<string> names = new List<string>();
Manager.cs (207) : List<string> passwords = new List<string>();
Manager.cs (209) : String filePath = tableFiles[i];
Manager.cs (210) : String profileName = Path.GetFileNameWithoutExtension(filePath).Replace(databaseName + "_Profile_", "");
Manager.cs (212) : StreamReader reader = new StreamReader(filePath);
Manager.cs (213) : try
Manager.cs (214) : {
Manager.cs (215) : string usersLine = reader.ReadLine();
Manager.cs (216) : int startPosition = usersLine.IndexOf("]") + 1;
Manager.cs (217) : usersLine = usersLine.Substring(startPosition);
Manager.cs (219) : string[] entries = usersLine.Split(new[] { "}" }, StringSplitOptions.RemoveEmptyEntries);
Manager.cs (221) : foreach (string entry in entries)
Manager.cs (222) : {
Manager.cs (223) : string cleanEntry = entry.Replace("{", "").Replace("'", "").Trim();
Manager.cs (224) : string[] parts = cleanEntry.Split(',');
Manager.cs (226) : if (parts.Length == 2)
Manager.cs (227) : {
Manager.cs (228) : names.Add(parts[0]);
Manager.cs (229) : passwords.Add(parts[1]);
Manager.cs (230) : }
Manager.cs (231) : }
Manager.cs (232) : Profile profile = new Profile { Name = profileName };
Manager.cs (234) : for (int j = 0; j < names.Count; j++)
Manager.cs (235) : {
Manager.cs (240) : }
Manager.cs (242) : String privilegesLine = reader.ReadLine();
Manager.cs (244) : entries = privilegesLine.Split(new[] { "}" }, StringSplitOptions.RemoveEmptyEntries);
Manager.cs (246) : foreach (string entry in entries)
Manager.cs (247) : {
Manager.cs (248) : string cleanEntry = entry.Replace("{", "").Replace("'", "").Trim();
Manager.cs (250) : string[] parts = cleanEntry.Split(',');
Manager.cs (252) : if (parts.Length >= 2)
Manager.cs (253) : {
Manager.cs (254) : string tableName = parts[0];
Manager.cs (256) : for (int j = 1; j < parts.Length; j++)
Manager.cs (257) : {
Manager.cs (258) : string privilegeStr = parts[j];
Manager.cs (260) : if (Enum.TryParse(privilegeStr, true, out Privilege privilege))
Manager.cs (261) : {
Manager.cs (262) : profile.GrantPrivilege(tableName, privilege);
Manager.cs (263) : }
Manager.cs (264) : else
Manager.cs (265) : {
Manager.cs (266) : Console.WriteLine("Privilegio inv�lido");
Manager.cs (267) : }
Manager.cs (268) : }
Manager.cs (269) : }
Manager.cs (270) : }
Manager.cs (271) : result.AddProfile(profile);
Manager.cs (272) : }
Manager.cs (273) : finally
Manager.cs (274) : {
Manager.cs (275) : reader.Close();
Manager.cs (276) : }
Manager.cs (277) : }
Manager.cs (279) : if (result.UserByName(username) == null) return null;
Manager.cs (281) : return result;
Manager.cs (288) : try
Manager.cs (289) : {
Manager.cs (290) : for (int i = 0; i < Profiles.Count; i++)
Manager.cs (291) : {
Manager.cs (292) : string filePath = databaseName + "_Profile_" + Profiles[i].Name + TableFileExtension;
Manager.cs (293) : StreamWriter writer = new StreamWriter(filePath);
Manager.cs (294) : try
Manager.cs (295) : {
Manager.cs (296) : writer.WriteLine(Profiles[i].ToString());
Manager.cs (297) : writer.WriteLine(Profiles[i].WritePrivileges());
Manager.cs (299) : }
Manager.cs (300) : finally
Manager.cs (301) : {
Manager.cs (302) : writer.Close();
Manager.cs (303) : }
Manager.cs (304) : }
Manager.cs (305) : }
Manager.cs (306) : catch (Exception ex)
Manager.cs (307) : {
Manager.cs (308) : Console.WriteLine("Error al guardar la base de datos: " + ex.Message);
Manager.cs (309) : }
Manager.cs (313) : public bool Equals(Manager manager)
Manager.cs (314) : {
Manager.cs (315) : if (this == manager) return true;
Manager.cs (317) : return false;
Profile.cs (65) : public override String ToString()
Profile.cs (66) : {
Profile.cs (67) : String result = "['Username','Password']";
Profile.cs (69) : for (int i = 0; i < Users.Count; i++)
Profile.cs (70) : {
Profile.cs (71) : result += Users[i].ToString();
Profile.cs (72) : }
Profile.cs (74) : return result;
Profile.cs (75) : }
Profile.cs (77) : public String WritePrivileges()
Profile.cs (78) : {
Profile.cs (79) : String result = "";
Profile.cs (81) : foreach(var entry in PrivilegesOn)
Profile.cs (82) : {
Profile.cs (83) : result += "{'" + entry.Key + "'";
Profile.cs (85) : for(int i = 0; i < entry.Value.Count; i++)
Profile.cs (86) : {
Profile.cs (87) : result += ",'" + entry.Value[i] + "'";
Profile.cs (88) : }
Profile.cs (90) : result += "}";
Profile.cs (91) : }
Profile.cs (93) : return result;
Profile.cs (94) : }
User.cs (20) : public override String ToString()
User.cs (21) : {
User.cs (22) : return "{'"+Username+"','"+EncryptedPassword+"'}";
User.cs (23) : }
CreateSecurityProfileTests.cs (1) : ﻿using System;
CreateSecurityProfileTests.cs (64) : [Fact]
CreateSecurityProfileTests.cs (65) : public void CreateSecurityProfileExecuteTest()
CreateSecurityProfileTests.cs (66) : {
CreateSecurityProfileTests.cs (67) : Database database = new Database("testAdmin", "123");
CreateSecurityProfileTests.cs (69) : MiniSqlQuery query = MiniSQLParser.Parse("CREATE SECURITY PROFILE SecurityProfile");
CreateSecurityProfileTests.cs (71) : String succes = query.Execute(database);
CreateSecurityProfileTests.cs (73) : Assert.Equal(succes, Constants.CreateSecurityProfileSuccess);
CreateSecurityProfileTests.cs (75) : Profile profile = database.SecurityManager.ProfileByName("SecurityProfile");
CreateSecurityProfileTests.cs (77) : Assert.Equal(profile.Name, "SecurityProfile");
CreateSecurityProfileTests.cs (78) : }
CreateSecurityProfileTests.cs (80) : [Fact]
CreateSecurityProfileTests.cs (81) : public void CreateProfileNotBeingAdminShouldDoNothing()
CreateSecurityProfileTests.cs (82) : {
CreateSecurityProfileTests.cs (84) : string dbName = "TestDB";
CreateSecurityProfileTests.cs (86) : Database db = new Database("admin", "password");
CreateSecurityProfileTests.cs (87) : db.CreateTable("Users", new List<ColumnDefinition>
CreateSecurityProfileTests.cs (88) : {
CreateSecurityProfileTests.cs (89) : new ColumnDefinition(ColumnDefinition.DataType.String, "ID"),
CreateSecurityProfileTests.cs (90) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name")
CreateSecurityProfileTests.cs (91) : });
CreateSecurityProfileTests.cs (93) : db.Insert("Users", new List<string> { "1", "Alice" });
CreateSecurityProfileTests.cs (94) : db.Insert("Users", new List<string> { "2", "Bob" });
CreateSecurityProfileTests.cs (96) : Profile profile = new Profile { Name = "Lector" };
CreateSecurityProfileTests.cs (97) : User user = new User("Hola", "password");
CreateSecurityProfileTests.cs (99) : db.SecurityManager.AddProfile(profile);
CreateSecurityProfileTests.cs (100) : db.SecurityManager.ProfileByName("Lector").Users.Add(user);
CreateSecurityProfileTests.cs (102) : db.Save(dbName);
CreateSecurityProfileTests.cs (104) : Database loadedDb = Database.Load(dbName, "Hola", "password");
CreateSecurityProfileTests.cs (106) : MiniSqlQuery query = MiniSQLParser.Parse("CREATE SECURITY PROFILE SecurityProfile");
CreateSecurityProfileTests.cs (108) : String succes = query.Execute(loadedDb);
CreateSecurityProfileTests.cs (110) : Assert.NotEqual(succes, Constants.CreateSecurityProfileSuccess);
CreateSecurityProfileTests.cs (111) : Assert.Null(loadedDb.SecurityManager.ProfileByName("SecurityProfile"));
CreateSecurityProfileTests.cs (112) : }
