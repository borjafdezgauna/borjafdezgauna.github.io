PermissionsTests.cs (1) : ï»¿using System;
PermissionsTests.cs (2) : using System.Collections.Generic;
PermissionsTests.cs (3) : using System.Linq;
PermissionsTests.cs (4) : using System.Text;
PermissionsTests.cs (5) : using System.Threading.Tasks;
PermissionsTests.cs (6) : using Xunit;
PermissionsTests.cs (7) : using DbManager.Security;
PermissionsTests.cs (8) : using DbManager;
PermissionsTests.cs (10) : namespace OurTests
PermissionsTests.cs (11) : {
PermissionsTests.cs (13) : }
PermissionsTests.cs (14) : {
PermissionsTests.cs (15) : public class PermissionsTests
PermissionsTests.cs (16) : {
PermissionsTests.cs (17) : [Fact]
PermissionsTests.cs (18) : public void UsuarioNoAdminNoPuedeOtorgarPrivilegios()
PermissionsTests.cs (19) : {
PermissionsTests.cs (20) : var db = new Database("usuario1", "contrasena");
PermissionsTests.cs (22) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE perfilNoAdmin");
PermissionsTests.cs (23) : db.ExecuteMiniSQLQuery("ADD USER (usuarioNoAdmin, contrasena, perfilNoAdmin)");
PermissionsTests.cs (24) : db.Save("BD_Privilegios");
PermissionsTests.cs (26) : Database dbNoAdmin = Database.Load("BD_Privilegios", "usuarioNoAdmin", "contrasena");
PermissionsTests.cs (27) : var resultado = dbNoAdmin.ExecuteMiniSQLQuery("GRANT SELECT ON tabla1 TO perfilNoAdmin");
PermissionsTests.cs (28) : Assert.NotNull(resultado);
PermissionsTests.cs (30) : Assert.Equal(Constants.UsersProfileIsNotGrantedRequiredPrivilege, resultado);
PermissionsTests.cs (31) : }
PermissionsTests.cs (33) : [Fact]
PermissionsTests.cs (34) : public void AdminPuedeOtorgarPrivilegio()
PermissionsTests.cs (35) : {
PermissionsTests.cs (36) : var db = new Database("usuario", "password");
PermissionsTests.cs (38) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE perfilNoAdmin");
PermissionsTests.cs (39) : db.ExecuteMiniSQLQuery("ADD USER (usuarioNoAdmin,password,perfilNoAdmin)");
PermissionsTests.cs (41) : var resultado = db.ExecuteMiniSQLQuery("GRANT SELECT ON tabla1 TO perfilNoAdmin");
PermissionsTests.cs (43) : Assert.NotNull(resultado);
PermissionsTests.cs (44) : Assert.Equal(Constants.GrantPrivilegeSuccess, resultado);
PermissionsTests.cs (45) : }
PermissionsTests.cs (46) : [Fact]
PermissionsTests.cs (47) : public void NoSePuedeOtorgarDosVecesElMismoPrivilegio()
PermissionsTests.cs (48) : {
PermissionsTests.cs (49) : var db = new Database("usuario", "password");
PermissionsTests.cs (51) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE perfilNoAdmin");
PermissionsTests.cs (52) : db.ExecuteMiniSQLQuery("ADD USER (usuarioNoAdmin,password,perfilNoAdmin)");
PermissionsTests.cs (53) : db.ExecuteMiniSQLQuery("GRANT SELECT ON tabla1 TO perfilNoAdmin");
PermissionsTests.cs (56) : var resultado = db.ExecuteMiniSQLQuery("GRANT SELECT ON tabla1 TO perfilNoAdmin");
PermissionsTests.cs (58) : Assert.NotNull(resultado);
PermissionsTests.cs (59) : Assert.Equal(Constants.ProfileAlreadyHasPrivilege, resultado);
PermissionsTests.cs (60) : }
PermissionsTests.cs (62) : [Fact]
PermissionsTests.cs (63) : public void PerfilPuedeTenerMultiplesPrivilegios()
PermissionsTests.cs (64) : {
PermissionsTests.cs (65) : var db = new Database("admin", "adminpass");
PermissionsTests.cs (67) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE perfil");
PermissionsTests.cs (69) : var r1 = db.ExecuteMiniSQLQuery("GRANT SELECT ON tabla1 TO perfil");
PermissionsTests.cs (70) : var r2 = db.ExecuteMiniSQLQuery("GRANT INSERT ON tabla2 TO perfil");
PermissionsTests.cs (72) : Assert.Equal(Constants.GrantPrivilegeSuccess, r1);
PermissionsTests.cs (73) : Assert.Equal(Constants.GrantPrivilegeSuccess, r2);
PermissionsTests.cs (74) : }
PermissionsTests.cs (75) : [Fact]
PermissionsTests.cs (76) : public void AdminPuedeAnularPrivilegio()
PermissionsTests.cs (77) : {
PermissionsTests.cs (78) : var db = new Database("admin", "adminpass");
PermissionsTests.cs (80) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE perfil");
PermissionsTests.cs (81) : db.ExecuteMiniSQLQuery("GRANT DELETE ON tabla1 TO perfil");
PermissionsTests.cs (83) : var resultado = db.ExecuteMiniSQLQuery("REVOKE DELETE ON tabla1 FROM perfil");
PermissionsTests.cs (85) : Assert.Equal(Constants.RevokePrivilegeSuccess, resultado);
PermissionsTests.cs (86) : }
PermissionsTests.cs (88) : [Fact]
PermissionsTests.cs (89) : public void UsuarioNoAdminNoPuedeAnularPrivilegios()
PermissionsTests.cs (90) : {
PermissionsTests.cs (91) : var db = new Database("admin", "adminpass");
PermissionsTests.cs (93) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE perfilNoAdmin");
PermissionsTests.cs (94) : db.ExecuteMiniSQLQuery("ADD USER (usuario, password, perfilNoAdmin)");
PermissionsTests.cs (95) : db.Save("BD_RevokeTest");
PermissionsTests.cs (97) : var dbNoAdmin = Database.Load("BD_RevokeTest", "usuario", "password");
PermissionsTests.cs (98) : var resultado = dbNoAdmin.ExecuteMiniSQLQuery("REVOKE INSERT ON tabla1 FROM perfilNoAdmin");
PermissionsTests.cs (100) : Assert.Equal(Constants.UsersProfileIsNotGrantedRequiredPrivilege, resultado);
PermissionsTests.cs (101) : }
PermissionsTests.cs (103) : }
PermissionsTests.cs (104) : }
ColumnDefinition.cs (33) : return value.Replace(Delimiter, DelimiterEncoded);
ColumnDefinition.cs (41) : return value.Replace(DelimiterEncoded, Delimiter);
ColumnDefinition.cs (58) : string[] parts = value.Split(Delimiter);
ColumnDefinition.cs (61) : if (parts.Length != 2)
ColumnDefinition.cs (62) : {
ColumnDefinition.cs (63) : return null;
ColumnDefinition.cs (64) : }
ColumnDefinition.cs (65) : string columnName = Decode(parts[0]);
ColumnDefinition.cs (67) : string typeString = Decode(parts[1]);
ColumnDefinition.cs (69) : DataType columnType;
ColumnDefinition.cs (71) : {
ColumnDefinition.cs (72) : columnType = DataType.String;
ColumnDefinition.cs (73) : }
ColumnDefinition.cs (75) : {
ColumnDefinition.cs (76) : columnType = DataType.Int;
ColumnDefinition.cs (77) : }
ColumnDefinition.cs (79) : {
ColumnDefinition.cs (80) : columnType = DataType.Double;
ColumnDefinition.cs (81) : }
ColumnDefinition.cs (82) : else
ColumnDefinition.cs (83) : {
ColumnDefinition.cs (85) : }
ColumnDefinition.cs (88) : return new ColumnDefinition(columnType, columnName);
Database.cs (34) : SecurityManager = new Manager(adminUsername);
Database.cs (35) : Profile profile = new Profile { Name = Profile.AdminProfileName };
Database.cs (36) : SecurityManager.Profiles.Add(profile);
Database.cs (37) : SecurityManager.ProfileByName(Profile.AdminProfileName).Users.Add(new User(adminUsername, adminPassword));
Database.cs (269) : string rootDir = Path.Combine(Directory.GetCurrentDirectory(), databaseName);
Database.cs (271) : if (!Directory.Exists(rootDir))
Database.cs (272) : Directory.CreateDirectory(rootDir);
Database.cs (274) : foreach (var tbl in Tables)
Database.cs (276) : string fileName = $"{tbl.Name}{TableFileExtension}";
Database.cs (277) : string fullFilePath = Path.Combine(rootDir, fileName);
Database.cs (279) : using (var output = new StreamWriter(fullFilePath, false))
Database.cs (281) : var header = new List<string>();
Database.cs (283) : for (int colIdx = 0; colIdx < tbl.NumColumns(); colIdx++)
Database.cs (285) : var currentCol = tbl.GetColumn(colIdx);
Database.cs (286) : string prefix = currentCol.Type switch
Database.cs (287) : {
Database.cs (288) : ColumnDefinition.DataType.String => "S)",
Database.cs (289) : ColumnDefinition.DataType.Int => "I)",
Database.cs (290) : ColumnDefinition.DataType.Double => "D)",
Database.cs (291) : _ => ""
Database.cs (292) : };
Database.cs (294) : header.Add(prefix + currentCol.Name);
Database.cs (295) : }
Database.cs (297) : output.WriteLine(string.Join(",", header));
Database.cs (299) : for (int rowIdx = 0; rowIdx < tbl.NumRows(); rowIdx++)
Database.cs (301) : var rowData = tbl.GetRow(rowIdx).AsText();
Database.cs (302) : output.WriteLine(rowData);
Database.cs (307) : SecurityManager.Save(databaseName);
Database.cs (310) : catch (Exception err)
Database.cs (312) : LastErrorMessage = $"{Constants.Error}: {err.Message}";
Database.cs (328) : string fullPath = Path.Combine(Directory.GetCurrentDirectory(), databaseName);
Database.cs (330) : if (!Directory.Exists(fullPath))
Database.cs (331) : return null;
Database.cs (333) : Database db = new Database(); // constructor privado
Database.cs (334) : string[] fileList = Directory.GetFiles(fullPath);
Database.cs (336) : foreach (string file in fileList)
Database.cs (338) : if (!file.EndsWith(".tbl"))
Database.cs (339) : continue;
Database.cs (341) : string tableFileName = Path.GetFileNameWithoutExtension(file);
Database.cs (342) : List<ColumnDefinition> columnDefs = new List<ColumnDefinition>();
Database.cs (343) : List<Row> tableRows = new List<Row>();
Database.cs (345) : using (StreamReader fileReader = new StreamReader(file))
Database.cs (347) : string headerLine = fileReader.ReadLine();
Database.cs (348) : if (string.IsNullOrWhiteSpace(headerLine))
Database.cs (349) : continue;
Database.cs (351) : string[] headerParts = headerLine.Split(',');
Database.cs (353) : foreach (string part in headerParts)
Database.cs (354) : {
Database.cs (355) : string[] typeAndName = part.Split(')');
Database.cs (356) : if (typeAndName.Length != 2)
Database.cs (357) : continue;
Database.cs (359) : string typeCode = typeAndName[0];
Database.cs (360) : string columnName = typeAndName[1];
Database.cs (362) : ColumnDefinition.DataType dataType;
Database.cs (363) : switch (typeCode)
Database.cs (365) : case "S":
Database.cs (366) : dataType = ColumnDefinition.DataType.String;
Database.cs (367) : break;
Database.cs (368) : case "I":
Database.cs (369) : dataType = ColumnDefinition.DataType.Int;
Database.cs (370) : break;
Database.cs (371) : case "D":
Database.cs (372) : dataType = ColumnDefinition.DataType.Double;
Database.cs (373) : break;
Database.cs (374) : default:
Database.cs (375) : continue;
Database.cs (376) : }
Database.cs (378) : columnDefs.Add(new ColumnDefinition(dataType, columnName));
Database.cs (379) : }
Database.cs (381) : string line;
Database.cs (382) : while ((line = fileReader.ReadLine()) != null)
Database.cs (383) : {
Database.cs (384) : Row row = Row.Parse(columnDefs, line);
Database.cs (385) : if (row != null)
Database.cs (386) : tableRows.Add(row);
Database.cs (387) : }
Database.cs (390) : Table newTable = new Table(tableFileName, columnDefs);
Database.cs (391) : foreach (Row row in tableRows)
Database.cs (392) : {
Database.cs (393) : newTable.AddRow(row);
Database.cs (396) : db.AddTable(newTable);
Database.cs (399) : db.SecurityManager = Manager.Load(databaseName, username);
Database.cs (402) : if (db.SecurityManager == null || !db.SecurityManager.IsPasswordCorrect(username, password))
Database.cs (403) : return null;
Database.cs (406) : db.m_username = username;
Database.cs (407) : db.m_password = password;
Database.cs (409) : return db;
Database.cs (411) : catch (Exception e)
Database.cs (413) : Console.WriteLine($"{Constants.Error}: {e.Message}");
Database.cs (469) : public void SetSecurityManager(Manager manager)
Database.cs (470) : {
Database.cs (471) : this.SecurityManager = manager;
Database.cs (472) : }
Row.cs (5) : using System.Runtime.CompilerServices;
Row.cs (29) : int position = -1;
Row.cs (31) : for (int i = 0; i < ColumnDefinitions.Count; i++)
Row.cs (33) : if (ColumnDefinitions[i].Name == columnName)
Row.cs (35) : position = i;
Row.cs (36) : break;
Row.cs (37) : }
Row.cs (38) : }
Row.cs (40) : if (position == -1)
Row.cs (41) : {
Row.cs (46) : while (Values.Count <= position)
Row.cs (47) : {
Row.cs (48) : Values.Add(null);
Row.cs (51) : Values[position] = value;
Row.cs (60) : int position = -1;
Row.cs (64) : if (ColumnDefinitions[i].Name == columnName)
Row.cs (66) : position = i;
Row.cs (67) : break;
Row.cs (71) : if (position == -1 || position >= Values.Count)
Row.cs (72) : {
Row.cs (76) : return Values[position];
Row.cs (77) : }
Row.cs (88) : for (int i = 0; i < ColumnDefinitions.Count; i++)
Row.cs (89) : {
Row.cs (90) : if (ColumnDefinitions[i].Name.Equals(condition.ColumnName))
Row.cs (91) : {
Row.cs (92) : return condition.IsTrue(Values[i], ColumnDefinitions[i].Type);
Row.cs (93) : }
Row.cs (94) : }
Row.cs (108) : return value.Replace(Delimiter, DelimiterEncoded);
Row.cs (118) : return value.Replace(DelimiterEncoded, Delimiter);
Row.cs (128) : String nuevo = "";
Row.cs (129) : int count = 1;
Row.cs (131) : {
Row.cs (132) : nuevo += Encode(valor);
Row.cs (133) : if (count!= Values.Count)
Row.cs (138) : count = count+1;
Row.cs (139) : }
Row.cs (149) : string[] valueArray = value.Split(Delimiter);
Row.cs (152) : List<string> values = new List<string>();
Row.cs (153) : foreach (string val in valueArray)
Row.cs (154) : {
Row.cs (155) : values.Add(Decode(val));
Row.cs (156) : }
Row.cs (159) : return new Row(columns, values);
ColumnDefinitionTests.cs (1) : using DbManager;
ColumnDefinitionTests.cs (9) : [Fact]
ColumnDefinitionTests.cs (10) : public void AsTextEncodeDecodeTest()
ColumnDefinitionTests.cs (11) : {
ColumnDefinitionTests.cs (12) : var column1 = new ColumnDefinition(ColumnDefinition.DataType.String, "Nombre->Apellido");
ColumnDefinitionTests.cs (14) : Assert.Equal(column1.AsText(), ColumnDefinition.Parse(column1.AsText()).AsText());
ColumnDefinitionTests.cs (16) : var column2 = new ColumnDefinition(ColumnDefinition.DataType.Int, "Edad->Aï¿½os");
ColumnDefinitionTests.cs (18) : Assert.Equal(column2.AsText(), ColumnDefinition.Parse(column2.AsText()).AsText());
ColumnDefinitionTests.cs (20) : var column3 = new ColumnDefinition(ColumnDefinition.DataType.Double, "Salario");
ColumnDefinitionTests.cs (22) : Assert.Equal(column3.AsText(), ColumnDefinition.Parse(column3.AsText()).AsText());
ColumnDefinitionTests.cs (24) : var column4 = new ColumnDefinition(ColumnDefinition.DataType.String, "Direcciï¿½n->Calle 123");
ColumnDefinitionTests.cs (26) : Assert.Equal(column4.AsText(), ColumnDefinition.Parse(column4.AsText()).AsText());
ColumnDefinitionTests.cs (28) : var column5 = new ColumnDefinition(ColumnDefinition.DataType.Int, "Nï¿½mero->Casa 45");
ColumnDefinitionTests.cs (30) : Assert.Equal(column5.AsText(), ColumnDefinition.Parse(column5.AsText()).AsText());
ColumnDefinitionTests.cs (32) : var column6 = new ColumnDefinition(ColumnDefinition.DataType.Double, "Precio->123.45");
ColumnDefinitionTests.cs (34) : Assert.Equal(column6.AsText(), ColumnDefinition.Parse(column6.AsText()).AsText());
ColumnDefinitionTests.cs (36) : var column7 = new ColumnDefinition(ColumnDefinition.DataType.String, "TextoCon->Multiples->Delimitadores");
ColumnDefinitionTests.cs (38) : Assert.Equal(column7.AsText(), ColumnDefinition.Parse(column7.AsText()).AsText());
ColumnDefinitionTests.cs (40) : var column8 = new ColumnDefinition(ColumnDefinition.DataType.String, "Simple");
ColumnDefinitionTests.cs (42) : Assert.Equal(column8.AsText(), ColumnDefinition.Parse(column8.AsText()).AsText());
ColumnDefinitionTests.cs (43) : }
MiniSqlQueryTest.cs (1) : ï»¿using System;
MiniSqlQueryTest.cs (2) : using System.Collections.Generic;
MiniSqlQueryTest.cs (3) : using System.IO;
MiniSqlQueryTest.cs (4) : using DbManager;
MiniSqlQueryTest.cs (5) : using DbManager.Parser;
MiniSqlQueryTest.cs (8) : namespace OurTests
MiniSqlQueryTest.cs (9) : {
MiniSqlQueryTest.cs (10) : public class MiniSqlQueryTest
MiniSqlQueryTest.cs (11) : {
MiniSqlQueryTest.cs (13) : [Fact]
MiniSqlQueryTest.cs (14) : public void InsertDatosValidos()
MiniSqlQueryTest.cs (15) : {
MiniSqlQueryTest.cs (17) : Database database = new Database(Database.AdminUsername, Database.AdminPassword);
MiniSqlQueryTest.cs (18) : List<ColumnDefinition> columnas = new List<ColumnDefinition>
MiniSqlQueryTest.cs (19) : {
MiniSqlQueryTest.cs (20) : new ColumnDefinition(ColumnDefinition.DataType.String, "Nombre"),
MiniSqlQueryTest.cs (21) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Edad")
MiniSqlQueryTest.cs (22) : };
MiniSqlQueryTest.cs (23) : Table tabla = new Table("Usuarios", columnas);
MiniSqlQueryTest.cs (24) : database.AddTable(tabla);
MiniSqlQueryTest.cs (25) : List<string> valores = new List<string> { "Juan PÃ©rez", "30" };
MiniSqlQueryTest.cs (26) : Insert insertQuery = new Insert("Usuarios", valores);
MiniSqlQueryTest.cs (29) : string resultado = insertQuery.Execute(database);
MiniSqlQueryTest.cs (32) : Assert.Equal(Constants.InsertSuccess, resultado);
MiniSqlQueryTest.cs (33) : }
MiniSqlQueryTest.cs (35) : [Fact]
MiniSqlQueryTest.cs (36) : public void InsertCantidadInvalidaDeColumnas()
MiniSqlQueryTest.cs (37) : {
MiniSqlQueryTest.cs (39) : Database database = new Database(Database.AdminUsername, Database.AdminPassword);
MiniSqlQueryTest.cs (40) : List<ColumnDefinition> columnas = new List<ColumnDefinition>
MiniSqlQueryTest.cs (41) : {
MiniSqlQueryTest.cs (42) : new ColumnDefinition(ColumnDefinition.DataType.String, "Nombre"),
MiniSqlQueryTest.cs (43) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Edad")
MiniSqlQueryTest.cs (44) : };
MiniSqlQueryTest.cs (45) : Table tabla = new Table("Usuarios", columnas);
MiniSqlQueryTest.cs (46) : database.AddTable(tabla);
MiniSqlQueryTest.cs (47) : List<string> valores = new List<string> { "Juan PÃ©rez" };
MiniSqlQueryTest.cs (48) : Insert insertQuery = new Insert("Usuarios", valores);
MiniSqlQueryTest.cs (51) : string resultado = insertQuery.Execute(database);
MiniSqlQueryTest.cs (54) : Assert.Equal(Constants.ColumnCountsDontMatch, resultado);
MiniSqlQueryTest.cs (55) : }
MiniSqlQueryTest.cs (56) : [Fact]
MiniSqlQueryTest.cs (57) : public void DropTableTablaExistente()
MiniSqlQueryTest.cs (58) : {
MiniSqlQueryTest.cs (60) : Database database = new Database(Database.AdminUsername, Database.AdminPassword);
MiniSqlQueryTest.cs (61) : List<ColumnDefinition> columnas = new List<ColumnDefinition>
MiniSqlQueryTest.cs (62) : {
MiniSqlQueryTest.cs (63) : new ColumnDefinition(ColumnDefinition.DataType.String, "Nombre"),
MiniSqlQueryTest.cs (64) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Edad")
MiniSqlQueryTest.cs (65) : };
MiniSqlQueryTest.cs (66) : Table tabla = new Table("Usuarios", columnas);
MiniSqlQueryTest.cs (67) : database.AddTable(tabla);
MiniSqlQueryTest.cs (68) : DropTable dropTableQuery = new DropTable("Usuarios");
MiniSqlQueryTest.cs (71) : string resultado = dropTableQuery.Execute(database);
MiniSqlQueryTest.cs (74) : Assert.Equal(Constants.DropTableSuccess, resultado);
MiniSqlQueryTest.cs (75) : }
MiniSqlQueryTest.cs (77) : [Fact]
MiniSqlQueryTest.cs (78) : public void DropTableTablaInexistente()
MiniSqlQueryTest.cs (79) : {
MiniSqlQueryTest.cs (81) : Database database = new Database(Database.AdminUsername, Database.AdminPassword);
MiniSqlQueryTest.cs (82) : DropTable dropTableQuery = new DropTable("TablaInexistente");
MiniSqlQueryTest.cs (85) : string resultado = dropTableQuery.Execute(database);
MiniSqlQueryTest.cs (88) : Assert.Equal(Constants.TableDoesNotExistError, resultado);
MiniSqlQueryTest.cs (89) : }
MiniSqlQueryTest.cs (92) : }
MiniSqlQueryTest.cs (93) : }
PermissionsTest.cs (1) : ï»¿using System;
PermissionsTest.cs (2) : using System.Collections.Generic;
PermissionsTest.cs (3) : using System.Linq;
PermissionsTest.cs (4) : using System.Text;
PermissionsTest.cs (5) : using System.Threading.Tasks;
PermissionsTest.cs (6) : using DbManager.Security;
PermissionsTest.cs (7) : using DbManager;
PermissionsTest.cs (8) : namespace OurTests
PermissionsTest.cs (9) : {
PermissionsTest.cs (10) : public class PermissionsTest
PermissionsTest.cs (11) : {
PermissionsTest.cs (12) : [Fact]
PermissionsTest.cs (13) : public void UsuarioNoAdminNoPuedeOtorgarPrivilegios()
PermissionsTest.cs (14) : {
PermissionsTest.cs (15) : Database db = new Database("usuario", "password");
PermissionsTest.cs (18) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE perfilnoadmin");
PermissionsTest.cs (19) : db.ExecuteMiniSQLQuery("ADD USER (usuarionoadmin,password,perfilnoadmin)");
PermissionsTest.cs (22) : db.ExecuteMiniSQLQuery("CREATE TABLE tabla1 (col1 TEXT)");
PermissionsTest.cs (23) : db.ExecuteMiniSQLQuery("INSERT INTO tabla1 VALUES ('dato1')");
PermissionsTest.cs (24) : db.ExecuteMiniSQLQuery("INSERT INTO tabla1 VALUES ('dato2')");
PermissionsTest.cs (25) : db.ExecuteMiniSQLQuery("INSERT INTO tabla1 VALUES ('dato3')");
PermissionsTest.cs (27) : db.Save("BD_Privilegios");
PermissionsTest.cs (30) : Database dbNoAdmin = Database.Load("BD_Privilegios", "usuarionoadmin", "password");
PermissionsTest.cs (33) : string resultado = dbNoAdmin.ExecuteMiniSQLQuery("GRANT SELECT ON tabla1 TO perfilnoadmin");
PermissionsTest.cs (35) : Assert.NotNull(resultado);
PermissionsTest.cs (36) : Assert.Equal(Constants.UsersProfileIsNotGrantedRequiredPrivilege, resultado);
PermissionsTest.cs (37) : }
PermissionsTest.cs (42) : [Fact]
PermissionsTest.cs (43) : public void AdminPuedeOtorgarPrivilegio()
PermissionsTest.cs (44) : {
PermissionsTest.cs (45) : Database db = new Database("usuario", "password");
PermissionsTest.cs (47) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE perfilNoAdmin");
PermissionsTest.cs (48) : db.ExecuteMiniSQLQuery("ADD USER (usuarioNoAdmin,password,perfilNoAdmin)");
PermissionsTest.cs (50) : string resultado = db.ExecuteMiniSQLQuery("GRANT SELECT ON tabla1 TO perfilNoAdmin");
PermissionsTest.cs (52) : Assert.NotNull(resultado);
PermissionsTest.cs (53) : Assert.Equal(Constants.GrantPrivilegeSuccess, resultado);
PermissionsTest.cs (54) : }
PermissionsTest.cs (56) : [Fact]
PermissionsTest.cs (57) : public void NoSePuedeOtorgarDosVecesElMismoPrivilegio()
PermissionsTest.cs (58) : {
PermissionsTest.cs (59) : Database db = new Database("usuario", "password");
PermissionsTest.cs (61) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE perfilNoAdmin");
PermissionsTest.cs (62) : db.ExecuteMiniSQLQuery("ADD USER (usuarioNoAdmin,password,perfilNoAdmin)");
PermissionsTest.cs (63) : db.ExecuteMiniSQLQuery("GRANT SELECT ON tabla1 TO perfilNoAdmin");
PermissionsTest.cs (65) : string resultado = db.ExecuteMiniSQLQuery("GRANT SELECT ON tabla1 TO perfilNoAdmin");
PermissionsTest.cs (67) : Assert.NotNull(resultado);
PermissionsTest.cs (68) : Assert.Equal(Constants.ProfileAlreadyHasPrivilege, resultado);
PermissionsTest.cs (69) : }
PermissionsTest.cs (71) : [Fact]
PermissionsTest.cs (72) : public void PerfilPuedeTenerMultiplesPrivilegios()
PermissionsTest.cs (73) : {
PermissionsTest.cs (74) : Database db = new Database("admin", "adminpass");
PermissionsTest.cs (76) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE perfil");
PermissionsTest.cs (78) : string r1 = db.ExecuteMiniSQLQuery("GRANT SELECT ON tabla1 TO perfil");
PermissionsTest.cs (79) : string r2 = db.ExecuteMiniSQLQuery("GRANT INSERT ON tabla2 TO perfil");
PermissionsTest.cs (81) : Assert.Equal(Constants.GrantPrivilegeSuccess, r1);
PermissionsTest.cs (82) : Assert.Equal(Constants.GrantPrivilegeSuccess, r2);
PermissionsTest.cs (83) : }
PermissionsTest.cs (85) : [Fact]
PermissionsTest.cs (86) : public void AdminPuedeAnularPrivilegio()
PermissionsTest.cs (87) : {
PermissionsTest.cs (88) : Database db = new Database("admin", "adminpass");
PermissionsTest.cs (90) : db.ExecuteMiniSQLQuery("CREATE SECURITY PROFILE perfil");
PermissionsTest.cs (91) : db.ExecuteMiniSQLQuery("GRANT DELETE ON tabla1 TO perfil");
PermissionsTest.cs (93) : string resultado = db.ExecuteMiniSQLQuery("REVOKE DELETE ON tabla1 TO perfil");
PermissionsTest.cs (95) : Assert.Equal(Constants.RevokePrivilegeSuccess, resultado);
PermissionsTest.cs (96) : }
PermissionsTest.cs (101) : }
PermissionsTest.cs (102) : }
RowTests.cs (13) : public void TestGetSetValue()
RowTests.cs (29) : rowPrueba.SetValue("peso", "123");
RowTests.cs (30) : Assert.Equal("casados", rowPrueba.GetValue("casa"));
RowTests.cs (31) : Assert.Equal("123", rowPrueba.GetValue("peso"));
RowTests.cs (32) : rowPrueba.SetValue("peso", "128");
RowTests.cs (33) : Assert.Equal("128", rowPrueba.GetValue("peso"));
RowTests.cs (39) : [Fact]
RowTests.cs (40) : public void IsTrue_ReturnsTrue()
RowTests.cs (41) : {
RowTests.cs (43) : var columns = new List<ColumnDefinition>
RowTests.cs (44) : {
RowTests.cs (45) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Edad"),
RowTests.cs (46) : new ColumnDefinition(ColumnDefinition.DataType.String, "Peso")
RowTests.cs (47) : };
RowTests.cs (49) : var valuesTrue = new List<string> { "25", "80" };
RowTests.cs (50) : var rowTrue = new Row(columns, valuesTrue);
RowTests.cs (51) : var condition1 = new Condition("Edad", "=", "25");
RowTests.cs (52) : var condition2 = new Condition("Edad", "<", "26");
RowTests.cs (54) : bool result1 = rowTrue.IsTrue(condition1);
RowTests.cs (55) : bool result2 = rowTrue.IsTrue(condition2);
RowTests.cs (58) : Assert.Equal(result1,true);
RowTests.cs (59) : Assert.Equal(result2, true);
RowTests.cs (63) : var columnsFalse = new List<ColumnDefinition>
RowTests.cs (64) : {
RowTests.cs (65) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Edad"),
RowTests.cs (66) : new ColumnDefinition(ColumnDefinition.DataType.String, "Peso")
RowTests.cs (67) : };
RowTests.cs (69) : var valuesFalse = new List<string> { "25", "80" };
RowTests.cs (70) : var rowFalse = new Row(columnsFalse, valuesFalse);
RowTests.cs (71) : var conditionFalse = new Condition("Age", ">", "20");
RowTests.cs (74) : bool resultFalse = rowFalse.IsTrue(conditionFalse);
RowTests.cs (76) : Assert.Equal(resultFalse,false);
RowTests.cs (79) : var columnsStringTrue = new List<ColumnDefinition>
RowTests.cs (80) : {
RowTests.cs (82) : new ColumnDefinition(ColumnDefinition.DataType.String, "Nombre")
RowTests.cs (83) : };
RowTests.cs (85) : var valuesStringTrue = new List<string> { "Mik" };
RowTests.cs (86) : var rowStringTrue = new Row(columnsStringTrue, valuesStringTrue);
RowTests.cs (87) : var conditionStringTrue = new Condition("Nombre", ">", "Aca");
RowTests.cs (91) : bool resultStringTrue = rowStringTrue.IsTrue(conditionStringTrue);
RowTests.cs (93) : Assert.Equal(resultStringTrue, true);
RowTests.cs (97) : }
RowTests.cs (99) : [Fact]
RowTests.cs (100) : public void AsTextEncodeTest()
RowTests.cs (101) : {
RowTests.cs (102) : var columns = new List<ColumnDefinition>
RowTests.cs (103) : {
RowTests.cs (104) : new ColumnDefinition(ColumnDefinition.DataType.String, "Nombre"),
RowTests.cs (105) : new ColumnDefinition(ColumnDefinition.DataType.String, "Apellido"),
RowTests.cs (106) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Edad")
RowTests.cs (107) : };
RowTests.cs (109) : var values1 = new List<string> { "Carlos", "C:Mary", "30" };
RowTests.cs (110) : var row1 = new Row(columns, values1);
RowTests.cs (111) : string expected1 = "Carlos:C[SEPARATOR]Mary:30";
RowTests.cs (112) : Assert.Equal(expected1, row1.AsText());
RowTests.cs (115) : var values2 = new List<string> { "La", "Oreja:De:Van:Gogh", "25" };
RowTests.cs (116) : var row2 = new Row(columns, values2);
RowTests.cs (117) : string expected2 = "La:Oreja[SEPARATOR]De[SEPARATOR]Van[SEPARATOR]Gogh:25";
RowTests.cs (118) : Assert.Equal(expected2, row2.AsText());
RowTests.cs (121) : var values3 = new List<string> { "Pedro", "Sï¿½nchez", "40" };
RowTests.cs (122) : var row3 = new Row(columns, values3);
RowTests.cs (123) : string expected3 = "Pedro:Sï¿½nchez:40";
RowTests.cs (124) : Assert.Equal(expected3, row3.AsText());
RowTests.cs (127) : var row4 = new Row(columns, new List<string>());
RowTests.cs (128) : string expected4 = "";
RowTests.cs (129) : Assert.Equal(expected4, row4.AsText());
RowTests.cs (132) : var values5 = new List<string> { "ï¿½nicoValor" };
RowTests.cs (133) : var row5 = new Row(new List<ColumnDefinition> { new ColumnDefinition(ColumnDefinition.DataType.String, "Campo") }, values5);
RowTests.cs (134) : string expected5 = "ï¿½nicoValor";
RowTests.cs (135) : Assert.Equal(expected5, row5.AsText());
RowTests.cs (138) : var values6 = new List<string> { "Duki", "", "50" };
RowTests.cs (139) : var row6 = new Row(columns, values6);
RowTests.cs (140) : string expected6 = "Duki::50";
RowTests.cs (141) : Assert.Equal(expected6, row6.AsText());
RowTests.cs (142) : }
RowTests.cs (144) : [Fact]
RowTests.cs (145) : public void ParseRowTest()
RowTests.cs (146) : {
RowTests.cs (147) : var columns = new List<ColumnDefinition>
RowTests.cs (148) : {
RowTests.cs (149) : new ColumnDefinition(ColumnDefinition.DataType.String, "Nombre"),
RowTests.cs (150) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Edad"),
RowTests.cs (151) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Salario")
RowTests.cs (152) : };
RowTests.cs (154) : string rowText = "Carlos:30:2500.5";
RowTests.cs (155) : var row = Row.Parse(columns, rowText);
RowTests.cs (157) : Assert.Equal("Carlos", row.GetValue("Nombre"));
RowTests.cs (158) : Assert.Equal("30", row.GetValue("Edad"));
RowTests.cs (159) : Assert.Equal("2500.5", row.GetValue("Salario"));
RowTests.cs (160) : Assert.Equal(rowText, row.AsText());
RowTests.cs (162) : string rowTextWithEncoded = "Ana[SEPARATOR]Maria:28:3000";
RowTests.cs (163) : var row2 = Row.Parse(columns, rowTextWithEncoded);
RowTests.cs (164) : Assert.Equal("Ana:Maria", row2.GetValue("Nombre"));
RowTests.cs (165) : Assert.Equal("28", row2.GetValue("Edad"));
RowTests.cs (166) : Assert.Equal("3000", row2.GetValue("Salario"));
RowTests.cs (167) : Assert.Equal(rowTextWithEncoded, row2.AsText());
RowTests.cs (168) : }
RowTests.cs (170) : [Fact]
RowTests.cs (171) : public void TablaConColumnasPeroSinFilas()
RowTests.cs (172) : {
RowTests.cs (174) : List<ColumnDefinition> columnas = new List<ColumnDefinition>
RowTests.cs (175) : {
RowTests.cs (176) : new ColumnDefinition(ColumnDefinition.DataType.String, "Nombre"),
RowTests.cs (177) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Edad"),
RowTests.cs (178) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Altura")
RowTests.cs (179) : };
RowTests.cs (181) : Table tabla = new Table("TestTable", columnas);
RowTests.cs (184) : string resultado = tabla.ToString();
RowTests.cs (187) : string esperado = "['Nombre','Edad','Altura']";
RowTests.cs (188) : Assert.Equal(esperado, resultado);
RowTests.cs (189) : }
SaveLoadDatabase.cs (1) : ï»¿using System.Collections.Generic;
SaveLoadDatabase.cs (2) : using System.IO;
SaveLoadDatabase.cs (3) : using DbManager.Security;
SaveLoadDatabase.cs (4) : using DbManager;
SaveLoadDatabase.cs (5) : using Xunit;
SaveLoadDatabase.cs (7) : public class DatabaseTests
SaveLoadDatabase.cs (8) : {
SaveLoadDatabase.cs (9) : private const string TestDbFolder = "TestDatabaseFolder";
SaveLoadDatabase.cs (11) : [Fact]
SaveLoadDatabase.cs (12) : public void SaveAndLoad_Database_ShouldPersistTablesAndSecurity()
SaveLoadDatabase.cs (13) : {
SaveLoadDatabase.cs (14) : if (Directory.Exists(TestDbFolder))
SaveLoadDatabase.cs (15) : Directory.Delete(TestDbFolder, true);
SaveLoadDatabase.cs (18) : Database db = new Database(Database.AdminUsername, Database.AdminPassword);
SaveLoadDatabase.cs (21) : var columns = new List<ColumnDefinition>
SaveLoadDatabase.cs (22) : {
SaveLoadDatabase.cs (23) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
SaveLoadDatabase.cs (24) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age")
SaveLoadDatabase.cs (25) : };
SaveLoadDatabase.cs (26) : bool tableCreated = db.CreateTable("People", columns);
SaveLoadDatabase.cs (27) : Assert.True(tableCreated);
SaveLoadDatabase.cs (29) : db.Insert("People", new List<string> { "Alice", "30" });
SaveLoadDatabase.cs (30) : db.Insert("People", new List<string> { "Bob", "25" });
SaveLoadDatabase.cs (31) : Manager mgr = new Manager(Database.AdminUsername);
SaveLoadDatabase.cs (32) : Profile adminProfile = new Profile { Name = Profile.AdminProfileName };
SaveLoadDatabase.cs (33) : mgr.Profiles.Add(adminProfile);
SaveLoadDatabase.cs (34) : adminProfile.Users.Add(new User(Database.AdminUsername, Database.AdminPassword));
SaveLoadDatabase.cs (35) : db.SetSecurityManager(mgr);
SaveLoadDatabase.cs (36) : bool saved = db.Save(TestDbFolder);
SaveLoadDatabase.cs (37) : Assert.True(saved);
SaveLoadDatabase.cs (38) : Database loadedDb = Database.Load(TestDbFolder, Database.AdminUsername, Database.AdminPassword);
SaveLoadDatabase.cs (39) : Assert.NotNull(loadedDb);
SaveLoadDatabase.cs (40) : Table loadedTable = loadedDb.TableByName("People");
SaveLoadDatabase.cs (41) : Assert.NotNull(loadedTable);
SaveLoadDatabase.cs (42) : Assert.Equal(2, loadedTable.NumRows());
SaveLoadDatabase.cs (43) : Row firstRow = loadedTable.GetRow(0);
SaveLoadDatabase.cs (44) : Assert.Equal("Alice", firstRow.Values[0]);
SaveLoadDatabase.cs (45) : Assert.Equal("30", firstRow.Values[1]);
SaveLoadDatabase.cs (48) : Assert.NotNull(loadedDb.SecurityManager.UserByName(Database.AdminUsername));
SaveLoadDatabase.cs (49) : Assert.True(loadedDb.IsUserAdmin());
SaveLoadDatabase.cs (50) : }
SaveLoadDatabase.cs (51) : }
SaveLoadManager.cs (1) : ï»¿using System;
SaveLoadManager.cs (2) : using System.IO;
SaveLoadManager.cs (3) : using Xunit;
SaveLoadManager.cs (4) : using DbManager.Security;
SaveLoadManager.cs (6) : public class ManagerTests
SaveLoadManager.cs (7) : {
SaveLoadManager.cs (8) : private const string TestDbFolder = "TestDatabase";
SaveLoadManager.cs (10) : [Fact]
SaveLoadManager.cs (11) : public void SaveAndLoad_Manager_ShouldPersistProfilesAndUsers()
SaveLoadManager.cs (12) : {
SaveLoadManager.cs (14) : if (Directory.Exists(TestDbFolder)) Directory.Delete(TestDbFolder, true);
SaveLoadManager.cs (16) : Manager manager = new Manager("adminUser");
SaveLoadManager.cs (17) : Profile profile = new Profile { Name = "Admin" };
SaveLoadManager.cs (18) : User user = new User { Username = "adminUser", EncryptedPassword = Encryption.Encrypt("password") };
SaveLoadManager.cs (19) : profile.Users.Add(user);
SaveLoadManager.cs (20) : profile.PrivilegesOn["table1"] = new List<Privilege> { Privilege.Select, Privilege.Insert };
SaveLoadManager.cs (21) : manager.Profiles.Add(profile);
SaveLoadManager.cs (24) : manager.Save(TestDbFolder);
SaveLoadManager.cs (27) : Manager loadedManager = Manager.Load(TestDbFolder, "adminUser");
SaveLoadManager.cs (29) : Assert.NotNull(loadedManager);
SaveLoadManager.cs (30) : Assert.Equal(1, loadedManager.Profiles.Count);
SaveLoadManager.cs (31) : Profile loadedProfile = loadedManager.ProfileByName("Admin");
SaveLoadManager.cs (32) : Assert.NotNull(loadedProfile);
SaveLoadManager.cs (33) : Assert.Single(loadedProfile.Users);
SaveLoadManager.cs (34) : Assert.Equal("adminUser", loadedProfile.Users[0].Username);
SaveLoadManager.cs (35) : Assert.True(loadedProfile.PrivilegesOn.ContainsKey("table1"));
SaveLoadManager.cs (36) : Assert.Contains(Privilege.Select, loadedProfile.PrivilegesOn["table1"]);
SaveLoadManager.cs (37) : Assert.Contains(Privilege.Insert, loadedProfile.PrivilegesOn["table1"]);
SaveLoadManager.cs (38) : }
SaveLoadManager.cs (40) : [Fact]
SaveLoadManager.cs (41) : public void Load_WithInvalidUsername_ShouldReturnNull()
SaveLoadManager.cs (42) : {
SaveLoadManager.cs (44) : if (Directory.Exists(TestDbFolder)) Directory.Delete(TestDbFolder, true);
SaveLoadManager.cs (46) : Manager manager = new Manager("adminUser");
SaveLoadManager.cs (47) : Profile profile = new Profile { Name = "Admin" };
SaveLoadManager.cs (48) : User user = new User { Username = "adminUser", EncryptedPassword = Encryption.Encrypt("password") };
SaveLoadManager.cs (49) : profile.Users.Add(user);
SaveLoadManager.cs (50) : manager.Profiles.Add(profile);
SaveLoadManager.cs (51) : manager.Save(TestDbFolder);
SaveLoadManager.cs (54) : Manager loadedManager = Manager.Load(TestDbFolder, "wrongUser");
SaveLoadManager.cs (56) : Assert.Null(loadedManager);
SaveLoadManager.cs (57) : }
SaveLoadManager.cs (58) : }
SecurityClassMethodTests.cs (1) : ï»¿using System;
SecurityClassMethodTests.cs (2) : using System.Collections.Generic;
SecurityClassMethodTests.cs (3) : using System.Linq;
SecurityClassMethodTests.cs (4) : using System.Text;
SecurityClassMethodTests.cs (5) : using System.Threading.Tasks;
SecurityClassMethodTests.cs (6) : using DbManager.Security;
SecurityClassMethodTests.cs (7) : using DbManager;
SecurityClassMethodTests.cs (9) : namespace OurTests
SecurityClassMethodTests.cs (10) : {
SecurityClassMethodTests.cs (11) : public class SecurityClassMethodTests
SecurityClassMethodTests.cs (12) : {
SecurityClassMethodTests.cs (13) : [Fact]
SecurityClassMethodTests.cs (14) : public void AÃ±adeUsuarioCorrectamente()
SecurityClassMethodTests.cs (15) : {
SecurityClassMethodTests.cs (16) : var db = Database.CreateTestDatabase();
SecurityClassMethodTests.cs (17) : var perfil = new Profile { Name = "Default" };
SecurityClassMethodTests.cs (18) : db.SecurityManager.Profiles.Add(perfil);
SecurityClassMethodTests.cs (20) : var consulta = new AddUser("nuevoUsuario", "contraseÃ±a123", "Default");
SecurityClassMethodTests.cs (21) : string resultado = consulta.Execute(db);
SecurityClassMethodTests.cs (23) : Assert.Equal(Constants.AddUserSuccess, resultado);
SecurityClassMethodTests.cs (24) : Assert.Contains(perfil.Users, u => u.Username == "nuevoUsuario");
SecurityClassMethodTests.cs (25) : }
SecurityClassMethodTests.cs (28) : [Fact]
SecurityClassMethodTests.cs (29) : public void NoAÃ±adeUsuario_SiElPerfilNoExiste()
SecurityClassMethodTests.cs (30) : {
SecurityClassMethodTests.cs (31) : var db = Database.CreateTestDatabase();
SecurityClassMethodTests.cs (33) : var consulta = new AddUser("usuario", "pass", "Inexistente");
SecurityClassMethodTests.cs (34) : string resultado = consulta.Execute(db);
SecurityClassMethodTests.cs (36) : Assert.Equal(Constants.SecurityProfileDoesNotExistError, resultado);
SecurityClassMethodTests.cs (37) : }
SecurityClassMethodTests.cs (42) : }
SecurityClassMethodTests.cs (43) : }
AddUser.cs (5) : using DbManager.Security;
AddUser.cs (20) : this.Username = username;
AddUser.cs (21) : this.Password = password;
AddUser.cs (22) : this.ProfileName = profileName;
AddUser.cs (30) : /*if (!database.IsUserAdmin())
AddUser.cs (31) : {
AddUser.cs (32) : return Constants.UsersProfileIsNotGrantedRequiredPrivilege;
AddUser.cs (33) : }
AddUser.cs (35) : var profile = database.SecurityManager.ProfileByName(ProfileName);
AddUser.cs (36) : if (profile == null)
AddUser.cs (37) : {
AddUser.cs (38) : return Constants.SecurityProfileDoesNotExistError;
AddUser.cs (39) : }
AddUser.cs (40) : foreach (var user in profile.Users)
AddUser.cs (41) : {
AddUser.cs (42) : if (user.Username == Username)
AddUser.cs (43) : {
AddUser.cs (44) : return "El usuario ya existe en este perfil";
AddUser.cs (45) : }
AddUser.cs (46) : }
AddUser.cs (48) : User newUser = new User(Username, Password);
AddUser.cs (50) : profile.Users.Add(newUser);
AddUser.cs (52) : return Constants.AddUserSuccess;*/
AddUser.cs (55) : var security = database.SecurityManager;
AddUser.cs (57) : if (security == null || !security.IsUserAdmin())
AddUser.cs (58) : {
AddUser.cs (59) : return Constants.UsersProfileIsNotGrantedRequiredPrivilege;
AddUser.cs (60) : }
AddUser.cs (62) : var targetProfile = security.ProfileByName(ProfileName);
AddUser.cs (63) : if (targetProfile == null)
AddUser.cs (64) : {
AddUser.cs (65) : return Constants.SecurityProfileDoesNotExistError;
AddUser.cs (68) : bool userExists = targetProfile.Users.Exists(delegate (User user)
AddUser.cs (69) : {
AddUser.cs (70) : return string.Equals(user.Username, Username);
AddUser.cs (71) : });
AddUser.cs (73) : if (userExists)
AddUser.cs (74) : {
AddUser.cs (75) : return Constants.Error + "User already exists";
AddUser.cs (76) : }
AddUser.cs (78) : User userToAdd = new User(Username, Password);
AddUser.cs (79) : targetProfile.Users.Add(userToAdd);
AddUser.cs (81) : return Constants.AddUserSuccess;
AddUser.cs (82) : }
CreateSecurityProfile.cs (5) : using DbManager.Security;
CreateSecurityProfile.cs (40) : Manager manager = database.SecurityManager;
CreateSecurityProfile.cs (42) : if (manager.IsUserAdmin())
CreateSecurityProfile.cs (43) : {
CreateSecurityProfile.cs (44) : manager.AddProfile(new Profile { Name = ProfileName });
CreateSecurityProfile.cs (46) : return Constants.CreateSecurityProfileSuccess;
CreateSecurityProfile.cs (47) : }
CreateSecurityProfile.cs (49) : return Constants.UsersProfileIsNotGrantedRequiredPrivilege;
CreateTable.cs (16) : //TODO
CreateTable.cs (17) : //: Initialize member variables
DeleteUser.cs (25) : var securityManager = database.SecurityManager;
DeleteUser.cs (27) : if (securityManager == null || !securityManager.IsUserAdmin())
DeleteUser.cs (28) : {
DeleteUser.cs (29) : return Constants.UsersProfileIsNotGrantedRequiredPrivilege;
DeleteUser.cs (30) : }
DeleteUser.cs (32) : Profile profileWithUser = null;
DeleteUser.cs (34) : foreach (var profile in securityManager.Profiles)
DeleteUser.cs (35) : {
DeleteUser.cs (36) : foreach (var user in profile.Users)
DeleteUser.cs (37) : {
DeleteUser.cs (38) : if (user.Username == Username)
DeleteUser.cs (39) : {
DeleteUser.cs (40) : profileWithUser = profile;
DeleteUser.cs (41) : break;
DeleteUser.cs (42) : }
DeleteUser.cs (43) : }
DeleteUser.cs (45) : if (profileWithUser != null)
DeleteUser.cs (46) : break;
DeleteUser.cs (47) : }
DeleteUser.cs (49) : if (profileWithUser == null)
DeleteUser.cs (50) : {
DeleteUser.cs (51) : return Constants.UserDoesNotExistError;
DeleteUser.cs (52) : }
DeleteUser.cs (54) : User userToRemove = null;
DeleteUser.cs (55) : foreach (var user in profileWithUser.Users)
DeleteUser.cs (56) : {
DeleteUser.cs (57) : if (user.Username == Username)
DeleteUser.cs (58) : {
DeleteUser.cs (59) : userToRemove = user;
DeleteUser.cs (60) : break;
DeleteUser.cs (61) : }
DeleteUser.cs (62) : }
DeleteUser.cs (64) : if (userToRemove != null)
DeleteUser.cs (65) : {
DeleteUser.cs (66) : profileWithUser.Users.Remove(userToRemove);
DeleteUser.cs (67) : return Constants.DeleteUserSuccess;
DeleteUser.cs (68) : }
DeleteUser.cs (70) : return Constants.UserDoesNotExistError;
DropSecurityProfile.cs (24) : Manager manager = database.SecurityManager;
DropSecurityProfile.cs (26) : if (!manager.IsUserAdmin())
DropSecurityProfile.cs (28) : return Constants.UsersProfileIsNotGrantedRequiredPrivilege;
DropSecurityProfile.cs (31) : bool profileExists = false;
DropSecurityProfile.cs (33) : foreach (Profile profile in manager.Profiles)
DropSecurityProfile.cs (34) : {
DropSecurityProfile.cs (35) : if (profile.Name == ProfileName)
DropSecurityProfile.cs (36) : {
DropSecurityProfile.cs (37) : profileExists = true;
DropSecurityProfile.cs (38) : break;
DropSecurityProfile.cs (39) : }
DropSecurityProfile.cs (40) : }
DropSecurityProfile.cs (42) : if (!profileExists)
DropSecurityProfile.cs (43) : {
DropSecurityProfile.cs (44) : return Constants.SecurityProfileDoesNotExistError;
DropSecurityProfile.cs (45) : }
DropSecurityProfile.cs (47) : manager.RemoveProfile(ProfileName);
DropSecurityProfile.cs (48) : return Constants.DropSecurityProfileSuccess;
DropTable.cs (23) : Table table = database.TableByName(Table);
DropTable.cs (24) : if (table == null)
DropTable.cs (25) : {
DropTable.cs (26) : return Constants.TableDoesNotExistError;
DropTable.cs (27) : }
DropTable.cs (28) : bool success = database.DropTable(Table);
DropTable.cs (29) : if (success)
DropTable.cs (30) : {
DropTable.cs (31) : return Constants.DropTableSuccess;
DropTable.cs (32) : }
DropTable.cs (34) : return Constants.Error;
Grant.cs (20) : this.PrivilegeName = privilegeName;
Grant.cs (21) : this.TableName = tableName;
Grant.cs (22) : this.ProfileName = profileName;
Grant.cs (29) : if (database.SecurityManager == null || !database.SecurityManager.IsUserAdmin())
Grant.cs (35) : Profile profile = database.SecurityManager.ProfileByName(ProfileName);
Grant.cs (42) : if (!Enum.TryParse(PrivilegeName, true, out Privilege privilege))
Grant.cs (43) : {
Grant.cs (45) : }
Grant.cs (48) : if (profile.IsGrantedPrivilege(TableName, privilege))
Grant.cs (49) : {
Grant.cs (50) : return Constants.ProfileAlreadyHasPrivilege;
Grant.cs (51) : }
Grant.cs (54) : profile.GrantPrivilege(TableName, privilege);
Insert.cs (27) : Table table = database.TableByName(Table);
Insert.cs (28) : if (table == null)
Insert.cs (29) : {
Insert.cs (30) : return Constants.TableDoesNotExistError;
Insert.cs (31) : }
Insert.cs (34) : bool success = database.Insert(Table, Values);
Insert.cs (37) : if (success)
Insert.cs (38) : {
Insert.cs (39) : return Constants.InsertSuccess;
Insert.cs (40) : }
Insert.cs (41) : return Constants.ColumnCountsDontMatch;
Revoke.cs (5) : using DbManager.Security;
Revoke.cs (30) : if (database.SecurityManager.IsUserAdmin())
Revoke.cs (31) : {
Revoke.cs (32) : database.SecurityManager.ProfileByName(ProfileName).RevokePrivilege(TableName, PrivilegeUtils.FromPrivilegeName(PrivilegeName));
Revoke.cs (34) : return Constants.RevokePrivilegeSuccess;
Revoke.cs (35) : }
Revoke.cs (37) : return Constants.Error;
Manager.cs (39) : string encrypted = Encryption.Encrypt(password);
Manager.cs (47) : return encrypted == u.EncryptedPassword;
Manager.cs (171) : string basePath = Path.Combine(Directory.GetCurrentDirectory(), databaseName);
Manager.cs (172) : string profileFile = Path.Combine(basePath, "profiles.txt");
Manager.cs (173) : var manager = new Manager(username);
Manager.cs (175) : if (!File.Exists(profileFile))
Manager.cs (176) : {
Manager.cs (177) : return manager;
Manager.cs (178) : }
Manager.cs (180) : using (StreamReader reader = new StreamReader(profileFile))
Manager.cs (181) : {
Manager.cs (182) : string line;
Manager.cs (183) : while ((line = reader.ReadLine()) != null)
Manager.cs (184) : {
Manager.cs (185) : if (string.IsNullOrWhiteSpace(line)) continue;
Manager.cs (187) : var profile = new Profile { Name = line.Trim() };
Manager.cs (189) : while ((line = reader.ReadLine()) != null && line.Trim() != "#")
Manager.cs (190) : {
Manager.cs (191) : string[] parts = line.Split(',');
Manager.cs (192) : if (parts.Length != 3) continue;
Manager.cs (194) : string tag = parts[0].Trim();
Manager.cs (195) : string val1 = parts[1].Trim();
Manager.cs (196) : string val2 = parts[2].Trim();
Manager.cs (198) : if (tag == "U")
Manager.cs (199) : {
Manager.cs (200) : profile.Users.Add(new User
Manager.cs (201) : {
Manager.cs (202) : Username = val1,
Manager.cs (203) : EncryptedPassword = val2
Manager.cs (204) : });
Manager.cs (205) : }
Manager.cs (206) : else if (tag == "P")
Manager.cs (207) : {
Manager.cs (208) : if (Enum.TryParse(val2, out Privilege privilege))
Manager.cs (209) : {
Manager.cs (210) : if (!profile.PrivilegesOn.ContainsKey(val1))
Manager.cs (211) : {
Manager.cs (212) : profile.PrivilegesOn[val1] = new List<Privilege>();
Manager.cs (213) : }
Manager.cs (214) : profile.PrivilegesOn[val1].Add(privilege);
Manager.cs (215) : }
Manager.cs (216) : }
Manager.cs (217) : }
Manager.cs (219) : manager.Profiles.Add(profile);
Manager.cs (220) : }
Manager.cs (221) : }
Manager.cs (223) : // Validar si el usuario pertenece a algï¿½n perfil
Manager.cs (224) : return manager.UserByName(username) != null ? manager : null;
Manager.cs (232) : try
Manager.cs (233) : {
Manager.cs (234) : string path = Path.Combine(Directory.GetCurrentDirectory(), databaseName);
Manager.cs (235) : if (!Directory.Exists(path))
Manager.cs (236) : {
Manager.cs (237) : Directory.CreateDirectory(path);
Manager.cs (238) : }
Manager.cs (240) : string profileFile = Path.Combine(path, "profiles.txt");
Manager.cs (241) : using (StreamWriter writer = new StreamWriter(profileFile))
Manager.cs (242) : {
Manager.cs (243) : foreach (Profile profile in Profiles)
Manager.cs (244) : {
Manager.cs (245) : writer.WriteLine(profile.Name);
Manager.cs (246) : foreach (User user in profile.Users)
Manager.cs (247) : {
Manager.cs (248) : writer.WriteLine($"U,{user.Username},{user.EncryptedPassword}");
Manager.cs (249) : }
Manager.cs (251) : foreach (var kvp in profile.PrivilegesOn)
Manager.cs (252) : {
Manager.cs (253) : string table = kvp.Key;
Manager.cs (254) : foreach (Privilege privilege in kvp.Value)
Manager.cs (255) : {
Manager.cs (256) : writer.WriteLine($"P,{table},{privilege}");
Manager.cs (257) : }
Manager.cs (258) : }
Manager.cs (260) : writer.WriteLine("#");
Manager.cs (261) : }
Manager.cs (262) : }
Manager.cs (263) : }
Manager.cs (264) : catch (Exception ex)
Manager.cs (265) : {
Manager.cs (266) : Console.WriteLine("Error saving profiles: " + ex.Message);
Manager.cs (267) : }
Profile.cs (21) : if (string.IsNullOrWhiteSpace(table))
Profile.cs (22) : return false;
Profile.cs (24) : List<Privilege> privileges;
Profile.cs (25) : if (!PrivilegesOn.TryGetValue(table, out privileges))
Profile.cs (27) : privileges = new List<Privilege>();
Profile.cs (28) : PrivilegesOn.Add(table, privileges);
Profile.cs (31) : if (privileges.IndexOf(privilege) == -1)
Profile.cs (33) : privileges.Add(privilege);
Profile.cs (46) : if (string.IsNullOrEmpty(table) || !PrivilegesOn.ContainsKey(table)) return false;
Profile.cs (48) : if (PrivilegesOn[table].Contains(privilege))
Profile.cs (50) : PrivilegesOn[table].Remove(privilege);
Profile.cs (51) : if (PrivilegesOn[table].Count == 0)
Profile.cs (66) : if (Name == AdminProfileName)
Profile.cs (67) : return true;
Profile.cs (69) : return PrivilegesOn.ContainsKey(table) && PrivilegesOn[table].Contains(privilege);
Profile.cs (71) : public String WritePrivileges()
Profile.cs (72) : {
Profile.cs (73) : String result = "";
Profile.cs (75) : foreach (var entry in PrivilegesOn)
Profile.cs (76) : {
Profile.cs (77) : result += "{'" + entry.Key + "'";
Profile.cs (79) : for (int i = 0; i < entry.Value.Count; i++)
Profile.cs (80) : {
Profile.cs (81) : result += ",'" + entry.Value[i] + "'";
Profile.cs (82) : }
Profile.cs (84) : result += "}";
Profile.cs (85) : }
Profile.cs (87) : return result;
Profile.cs (88) : }
