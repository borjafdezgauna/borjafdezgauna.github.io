Total written by this student: 32% lines / 23% characters

ColumnDefinition.cs (3) : using System.Runtime.CompilerServices;
ColumnDefinition.cs (20) : try
ColumnDefinition.cs (21) : {
ColumnDefinition.cs (22) : if (string.IsNullOrWhiteSpace(name))
ColumnDefinition.cs (23) : throw new Exception("El nombre de la columna no puede ser nulo.");
ColumnDefinition.cs (25) : Name = name;
ColumnDefinition.cs (26) : Type = type;
ColumnDefinition.cs (27) : }
ColumnDefinition.cs (28) : catch
ColumnDefinition.cs (29) : {
ColumnDefinition.cs (30) : throw new Exception("Error al inicializar ColumnDefinition.");
ColumnDefinition.cs (31) : }
ColumnDefinition.cs (42) : return value.Replace(Delimiter, DelimiterEncoded);
ColumnDefinition.cs (49) : return value.Replace(DelimiterEncoded, Delimiter);
ColumnDefinition.cs (56) : try
ColumnDefinition.cs (57) : {
ColumnDefinition.cs (58) : string output = Encode(Name) + Delimiter + Type;
ColumnDefinition.cs (59) : return output;
ColumnDefinition.cs (60) : }
ColumnDefinition.cs (62) : catch (Exception ex) {return null;}
ColumnDefinition.cs (70) : try
ColumnDefinition.cs (71) : {
ColumnDefinition.cs (72) : if (string.IsNullOrWhiteSpace(value)) { throw new Exception("El valor a parsear no puede ser nulo o vac�o.");  }
ColumnDefinition.cs (74) : string[] partesSeparadas = value.Split(Delimiter);
ColumnDefinition.cs (76) : //Nos aseguramos de que solo haya 2 partes
ColumnDefinition.cs (77) : if (partesSeparadas.Length != 2) { return null;}
ColumnDefinition.cs (79) : //Para pasar la parte de Name --> directamente
ColumnDefinition.cs (81) : string nameParse = partesSeparadas[0];
ColumnDefinition.cs (82) : nameParse = Decode(nameParse);
ColumnDefinition.cs (84) : //Para pasar la parte de Type --> switch (porque viene en Strign y hay que pasarlo a Type)
ColumnDefinition.cs (86) : string typeParse = partesSeparadas[1];
ColumnDefinition.cs (88) : DataType typeParseFinal = default;
ColumnDefinition.cs (89) : switch(typeParse)
ColumnDefinition.cs (90) : {
ColumnDefinition.cs (91) : case "String":
ColumnDefinition.cs (92) : typeParseFinal = DataType.String;
ColumnDefinition.cs (93) : break;
ColumnDefinition.cs (95) : case "Int":
ColumnDefinition.cs (96) : typeParseFinal = DataType.Int;
ColumnDefinition.cs (97) : break;
ColumnDefinition.cs (99) : case "Double":
ColumnDefinition.cs (100) : typeParseFinal = DataType.Double;
ColumnDefinition.cs (101) : break;
ColumnDefinition.cs (102) : default:
ColumnDefinition.cs (103) : return null;
ColumnDefinition.cs (105) : }
ColumnDefinition.cs (107) : ColumnDefinition columnParse = new ColumnDefinition(typeParseFinal, nameParse);
ColumnDefinition.cs (109) : return columnParse;
ColumnDefinition.cs (110) : }
ColumnDefinition.cs (112) : catch (Exception ex) {return null;}
Condition.cs (21) : this.LiteralValue = literalValue; //Este ser� el valor de referencia para comparar, esto es; sera hacer otroValue (operador) LiteralValue
Condition.cs (27) : //--> Comparamos value de la clase con LiteralValue, segun el DataType y segun el operador
Condition.cs (36) : //--> Comparamos value de la clase con LiteralValue, segun el DataType y segun el operador
Condition.cs (45) : //Los valores ya estan en su tipo de dato adecuado, no hace falta conversion
Condition.cs (46) : int resultado = value.CompareTo(LiteralValue);
Condition.cs (64) : try
Condition.cs (65) : {
Condition.cs (75) : if (intValueConvertido > intLiteralValueConvertido) { return true; }
Condition.cs (78) : if (intValueConvertido < intLiteralValueConvertido) { return true; }
Condition.cs (81) : }
Condition.cs (83) : catch
Condition.cs (84) : {
Condition.cs (85) : return false; // Si hay un error en la conversion, devolvemos false
Condition.cs (86) : }
Condition.cs (92) : try
Condition.cs (93) : {
Condition.cs (94) : double doubleLiteralValueConvertido = double.Parse(LiteralValue, CultureInfo.InvariantCulture);
Condition.cs (95) : double doubleValueConvertido = double.Parse(value, CultureInfo.InvariantCulture);
Condition.cs (103) : if (doubleValueConvertido > doubleLiteralValueConvertido) { return true; }
Condition.cs (106) : if (doubleValueConvertido < doubleLiteralValueConvertido) { return true; }
Condition.cs (109) : }
Condition.cs (110) : catch
Condition.cs (111) : {
Condition.cs (112) : return false; // Si hay un error en la conversion, devolvemos false
Condition.cs (113) : }
Condition.cs (116) : default:
Condition.cs (117) : return false;
Database.cs (18) : public string GetUsername() { return  m_username; } //Preguntar si vale esto
Database.cs (33) : this.m_username = adminUsername;
Database.cs (47) : try
Database.cs (48) : {
Database.cs (49) : if (table == null)
Database.cs (50) : {
Database.cs (51) : return false;
Database.cs (52) : }
Database.cs (54) : Tables.Add(table);
Database.cs (55) : return true;
Database.cs (56) : }
Database.cs (58) : catch (Exception ex) { return false; }
Database.cs (60) : return false; // Si hay un error, devuelve false.
Database.cs (65) : //DEADLINE 1.B: Find and return the table with the given
Database.cs (67) : try
Database.cs (68) : {
Database.cs (69) : if (tableName == null) { return null; }
Database.cs (71) : return Tables.Find(Table => Table.Name.Equals(tableName));
Database.cs (72) : }
Database.cs (74) : catch (Exception ex) {return null; }
Database.cs (137) : Table tablaBuscada = TableByName(tableName);
Database.cs (138) : if (tablaBuscada == null)
Database.cs (142) : }
Database.cs (144) : if (tablaBuscada.NumColumns() != values.Count())
Database.cs (145) : {
Database.cs (146) : LastErrorMessage = Constants.ColumnCountsDontMatch;
Database.cs (147) : return false;
Database.cs (173) : LastErrorMessage = Constants.TableDoesNotExistError; //Nombre tabla
Database.cs (181) : LastErrorMessage = Constants.ColumnDoesNotExistError; //Columna
Database.cs (185) : return table.Select(columns, condition);
Database.cs (269) : string path = Path.GetFullPath(databaseName);// System.IO.Path.Combine(databaseName);
Database.cs (289) : //Para escribit la fila de columnDefintiion
Database.cs (290) : string columnas = "";
Database.cs (292) : for (int i = 0; i < table.NumColumns(); i++)
Database.cs (293) : {
Database.cs (294) : columnas += "'" + table.GetColumn(i).Name + "'";
Database.cs (295) : if (i < table.NumColumns() - 1)
Database.cs (296) : {
Database.cs (297) : columnas += ",";
Database.cs (298) : }
Database.cs (299) : }
Database.cs (300) : writer.WriteLine(columnas);
Database.cs (302) : //Para escriibr todos los valores de cada fila
Row.cs (14) : public List<string> Values { get; set; } //Los valores de esta fila, y tantos valores como columnas
Row.cs (29) : //Case 1: The column doesn't exist
Row.cs (30) : if (ind == -1) { return; }
Row.cs (32) : //Case 2: Index of the columnDefinition is over the Values.Count
Row.cs (33) : if (ind + 1 > Values.Count)
Row.cs (35) : while (ind > Values.Count)
Row.cs (36) : {
Row.cs (37) : Values.Add(null);
Row.cs (40) : Values.Add(value);
Row.cs (41) : }
Row.cs (43) : //Case 3; All correct
Row.cs (44) : else
Row.cs (45) : {
Row.cs (46) : Values[ind] = value;
Row.cs (47) : }
Row.cs (54) : //We do the same as in setValue
Row.cs (58) : //Case 1: The column doesn't exist
Row.cs (59) : if (ind == -1) { return null; }
Row.cs (61) : //Case 2: Index of the columnDefinition is over the Values.Count
Row.cs (62) : if (ind + 1 > Values.Count)
Row.cs (64) : return null;
Row.cs (67) : //Case 3: All correct
Row.cs (70) : return Values[ind];
Row.cs (81) : //Case 1: The column doesn't exist
Row.cs (89) : //Get the type / format of data to compare
Row.cs (92) : //Get value of the staff
Row.cs (95) : //Compare things
Row.cs (96) : return condition.IsTrue(valu, definitionColType);
Row.cs (121) : string valuesAsText = "";
Row.cs (123) : for (int i = 0; i < Values.Count; i++)
Row.cs (124) : {
Row.cs (125) : //Adding each value encoded
Row.cs (126) : valuesAsText = valuesAsText + Encode(Values[i]);
Row.cs (128) : //Add the delimiter all the times except in the las
Row.cs (129) : if (i < Values.Count - 1) { valuesAsText = valuesAsText + Delimiter; }
Row.cs (130) : }
Row.cs (132) : return valuesAsText;
Row.cs (133) : //return string.Join(Delimiter, Values.Select(v => Encode(v)));
Table.cs (62) : return;
Table.cs (136) : //""
Table.cs (141) : if (ColumnDefinitions == null || ColumnDefinitions.Count() == 0) { return ""; }
Table.cs (245) : //TODO DEADLINE 1.A: Return a new table (with name 'Result') that contains the result of the select.
Table.cs (246) : //The condition may be null (if no condition, all the rows of the columnNames' columns should be returned).
Table.cs (249) : //First, we are going to generate the new list of columns of the Result table. If columnnames are emnpty or null we are going to return
Table.cs (250) : // all the columns (or columnDefinitiion) of the table called this method.
Table.cs (252) : List<ColumnDefinition> resultColumnDefinitions;
Table.cs (254) : // Caso 1: Si no se especifican columnas (null o lista vac�a), usamos todas las columnas originales
Table.cs (255) : if (columnNames == null || columnNames.Count == 0)
Table.cs (256) : {
Table.cs (257) : //If no columnNames are provided, return all original columns
Table.cs (258) : resultColumnDefinitions = new List<ColumnDefinition>(ColumnDefinitions);
Table.cs (259) : }
Table.cs (261) : // Caso 2: Si se especifican columnas, las buscamos por nombre
Table.cs (262) : else
Table.cs (263) : {
Table.cs (264) : //If columnNames have something
Table.cs (265) : resultColumnDefinitions = new List<ColumnDefinition>();
Table.cs (267) : // Validate columns: if any columnName's column doesm't exist, return an empty table immediately and dont't add to the result
Table.cs (268) : foreach (string columnName in columnNames)
Table.cs (269) : {
Table.cs (270) : ColumnDefinition col = ColumnByName(columnName);
Table.cs (271) : if (col == null)
Table.cs (272) : {
Table.cs (273) : //One of the search column doesn�t exist so return an embty table
Table.cs (274) : List<ColumnDefinition> columnDefinitionVacia = new List<ColumnDefinition>();
Table.cs (275) : Table tableVacia = new Table("ResultVacia", columnDefinitionVacia);
Table.cs (276) : return tableVacia;
Table.cs (277) : }
Table.cs (279) : resultColumnDefinitions.Add(col);
Table.cs (280) : }
Table.cs (281) : }
Table.cs (284) : // Create the result table with the new column definitions
Table.cs (285) : Table resultTable = new Table("Result", resultColumnDefinitions);
Table.cs (287) : foreach (Row row in Rows)
Table.cs (288) : {
Table.cs (289) : if (condition == null || row.IsTrue(condition))
Table.cs (290) : {
Table.cs (291) : List<string> resultRowValues = new List<string>();
Table.cs (293) : foreach (ColumnDefinition resultColumn in resultColumnDefinitions)
Table.cs (294) : {
Table.cs (295) : int originalColumnIndex = ColumnIndexByName(resultColumn.Name);
Table.cs (296) : if (originalColumnIndex >= 0 && originalColumnIndex < row.Values.Count)
Table.cs (297) : {
Table.cs (298) : //Con esto garantizamos que los valores se asignen correctamente a cada columna en la tabla resultado,
Table.cs (299) : //incluso si el orden de columnNames es diferente al original ya que lo hacemos por indices
Table.cs (300) : resultRowValues.Add(row.Values[originalColumnIndex]);
Table.cs (301) : }
Table.cs (303) : else
Table.cs (304) : {
Table.cs (305) : resultRowValues.Add(null);
Table.cs (306) : }
Table.cs (307) : }
Table.cs (309) : resultTable.AddRow(new Row(resultColumnDefinitions, resultRowValues));
Table.cs (310) : }
Table.cs (311) : }
Table.cs (313) : return resultTable;
Table.cs (314) : }
Table.cs (315) : /*
Table.cs (333) : List<ColumnDefinition> resultColumnDefinitions = (columnNames == null || columnNames.Count == 0)
Table.cs (334) : ? new List<ColumnDefinition>(ColumnDefinitions)
Table.cs (335) : : columnNames.Select(N => ColumnByName(N)).ToList();
Table.cs (368) : */
Table.cs (388) : if (condition == null || setValues == null || setValues.Count == 0)
ColumnDefinitionTests.cs (12) : // Creaci�n correcta de ColumnDefinition para cada tipo de dato
ColumnDefinitionTests.cs (31) : // Manejo de nombre nulo
ColumnDefinitionTests.cs (32) : Assert.Throws<Exception>(() => new ColumnDefinition(ColumnDefinition.DataType.String, null));
ColumnDefinitionTests.cs (34) : // Manejo de nombre vac�o o solo espacios
ColumnDefinitionTests.cs (35) : Assert.Throws<Exception>(() => new ColumnDefinition(ColumnDefinition.DataType.String, ""));
ColumnDefinitionTests.cs (36) : Assert.Throws<Exception>(() => new ColumnDefinition(ColumnDefinition.DataType.String, "   "));
ColumnDefinitionTests.cs (38) : }
ColumnDefinitionTests.cs (40) : /* No seria optimo, ya que si cambio el limitadore, se vuelv einservibke. Ver posibles mejoras
ColumnDefinitionTests.cs (41) : [Fact]
ColumnDefinitionTests.cs (42) : public void TestAsText()
ColumnDefinitionTests.cs (43) : {
ColumnDefinitionTests.cs (44) : ColumnDefinition columnDefinitionPrueba1 = new ColumnDefinition(ColumnDefinition.DataType.String, "Nombre");
ColumnDefinitionTests.cs (45) : Assert.Equal("Nombre->String", columnDefinitionPrueba1.AsText());
ColumnDefinitionTests.cs (46) : ColumnDefinition columnDefinitionPrueba2 = new ColumnDefinition(ColumnDefinition.DataType.Int, "Edad");
ColumnDefinitionTests.cs (47) : Assert.Equal("Edad->Int", columnDefinitionPrueba2.AsText());
ColumnDefinitionTests.cs (48) : ColumnDefinition columnDefinitionPrueba3 = new ColumnDefinition(ColumnDefinition.DataType.Double, "16.65");
ColumnDefinitionTests.cs (49) : Assert.Equal("16.65->Double", columnDefinitionPrueba3.AsText());
ColumnDefinitionTests.cs (51) : ColumnDefinition columnDefinitionPruebaDelimiter1 = new ColumnDefinition(ColumnDefinition.DataType.String, "Nom->bre");
ColumnDefinitionTests.cs (52) : Assert.Equal("Nom[ARROW]bre->String", columnDefinitionPruebaDelimiter1.AsText());
ColumnDefinitionTests.cs (53) : ColumnDefinition columnDefinitionPruebaDelimiter2 = new ColumnDefinition(ColumnDefinition.DataType.Int, "Ed-->ad");
ColumnDefinitionTests.cs (54) : Assert.Equal("Ed[ARROW]ad->Int", columnDefinitionPruebaDelimiter2.AsText());
ColumnDefinitionTests.cs (56) : }
ColumnDefinitionTests.cs (58) : [Fact]
ColumnDefinitionTests.cs (59) : public void TestParse()
ColumnDefinitionTests.cs (60) : {
ColumnDefinitionTests.cs (61) : string valueParse = "Nombre->String"; //Mejorar
ColumnDefinitionTests.cs (62) : ColumnDefinition columnDefinitionPrueba1 = ColumnDefinition.Parse(valueParse);
ColumnDefinitionTests.cs (63) : Assert.Equal(new ColumnDefinition(ColumnDefinition.DataType.String, "Nombre").Name, columnDefinitionPrueba1.Name);
ColumnDefinitionTests.cs (64) : Assert.Equal(new ColumnDefinition(ColumnDefinition.DataType.String, "Nombre").Type, columnDefinitionPrueba1.Type);
ColumnDefinitionTests.cs (66) : string valueParse2 = "Nom[ARROW]bre->String"; //Mejorar
ColumnDefinitionTests.cs (67) : ColumnDefinition columnDefinitionPrueba2 = ColumnDefinition.Parse(valueParse2);
ColumnDefinitionTests.cs (68) : Assert.Equal(new ColumnDefinition(ColumnDefinition.DataType.String, "Nom->bre").Name, columnDefinitionPrueba2.Name);
ColumnDefinitionTests.cs (69) : Assert.Equal(new ColumnDefinition(ColumnDefinition.DataType.String, "Nom->bre").Type, columnDefinitionPrueba2.Type);
ColumnDefinitionTests.cs (71) : }
ColumnDefinitionTests.cs (72) : */
ColumnDefinitionTests.cs (74) : [Fact]
ColumnDefinitionTests.cs (75) : public void TestAsText_And_Parse()
ColumnDefinitionTests.cs (76) : {
ColumnDefinitionTests.cs (77) : //Creo la columnaDefinition
ColumnDefinitionTests.cs (78) : ColumnDefinition columnDefinitionPrueba1 = new ColumnDefinition(ColumnDefinition.DataType.String, "Nombre");
ColumnDefinitionTests.cs (79) : Assert.NotNull(columnDefinitionPrueba1);
ColumnDefinitionTests.cs (81) : //Hago el AsText de esa columnaDefinition y lo guardo en el String
ColumnDefinitionTests.cs (82) : string pruebaAsText = columnDefinitionPrueba1.AsText();
ColumnDefinitionTests.cs (83) : Assert.NotNull(pruebaAsText);
ColumnDefinitionTests.cs (84) : Assert.NotEmpty(pruebaAsText);
ColumnDefinitionTests.cs (86) : //Con ese string del AsText, hago el parse y lo asigno a otra columnaDefinition
ColumnDefinitionTests.cs (87) : ColumnDefinition columnDefinitionPruebaComprobacion1 = ColumnDefinition.Parse(pruebaAsText);
ColumnDefinitionTests.cs (88) : Assert.NotNull(columnDefinitionPruebaComprobacion1);
ColumnDefinitionTests.cs (90) : //Compruebo que ambas son iguales, comprobando atributo a atributo
ColumnDefinitionTests.cs (91) : Assert.Equal(columnDefinitionPruebaComprobacion1.Name, columnDefinitionPrueba1.Name);
ColumnDefinitionTests.cs (92) : Assert.Equal(columnDefinitionPruebaComprobacion1.Type, columnDefinitionPrueba1.Type);
ColumnDefinitionTests.cs (94) : //----------------------------------------------------------------------------------
ColumnDefinitionTests.cs (96) : //Creo la columnaDefinition
ColumnDefinitionTests.cs (97) : ColumnDefinition columnDefinitionPrueba2 = new ColumnDefinition(ColumnDefinition.DataType.Int, "Edad");
ColumnDefinitionTests.cs (98) : Assert.NotNull(columnDefinitionPrueba2);
ColumnDefinitionTests.cs (100) : //Hago el AsText de esa columnaDefinition y lo guardo en el String
ColumnDefinitionTests.cs (101) : string pruebaAsText2 = columnDefinitionPrueba2.AsText();
ColumnDefinitionTests.cs (102) : Assert.NotNull(pruebaAsText2);
ColumnDefinitionTests.cs (103) : Assert.NotEmpty(pruebaAsText2);
ColumnDefinitionTests.cs (105) : //Con ese string del AsText, hago el parse y lo asigno a otra columnaDefinition
ColumnDefinitionTests.cs (106) : ColumnDefinition columnDefinitionPruebaComprobacion2 = ColumnDefinition.Parse(pruebaAsText2);
ColumnDefinitionTests.cs (107) : Assert.NotNull(columnDefinitionPruebaComprobacion2);
ColumnDefinitionTests.cs (109) : //Compruebo que ambas son iguales, comprobando atributo a atributo
ColumnDefinitionTests.cs (110) : Assert.Equal(columnDefinitionPruebaComprobacion2.Name, columnDefinitionPrueba2.Name);
ColumnDefinitionTests.cs (111) : Assert.Equal(columnDefinitionPruebaComprobacion2.Type, columnDefinitionPrueba2.Type);
ColumnDefinitionTests.cs (113) : //----------------------------------------------------------------------------------
ColumnDefinitionTests.cs (115) : //Creo la columnaDefinition
ColumnDefinitionTests.cs (116) : ColumnDefinition columnDefinitionPrueba3 = new ColumnDefinition(ColumnDefinition.DataType.Double, "156.23");
ColumnDefinitionTests.cs (117) : Assert.NotNull(columnDefinitionPrueba3);
ColumnDefinitionTests.cs (119) : //Hago el AsText de esa columnaDefinition y lo guardo en el String
ColumnDefinitionTests.cs (120) : string pruebaAsText3 = columnDefinitionPrueba3.AsText();
ColumnDefinitionTests.cs (121) : Assert.NotNull(pruebaAsText3);
ColumnDefinitionTests.cs (122) : Assert.NotEmpty(pruebaAsText3);
ColumnDefinitionTests.cs (124) : //Con ese string del AsText, hago el parse y lo asigno a otra columnaDefinition
ColumnDefinitionTests.cs (125) : ColumnDefinition columnDefinitionPruebaComprobacion3 = ColumnDefinition.Parse(pruebaAsText3);
ColumnDefinitionTests.cs (126) : Assert.NotNull(columnDefinitionPruebaComprobacion3);
ColumnDefinitionTests.cs (128) : //Compruebo que ambas son iguales, comprobando atributo a atributo
ColumnDefinitionTests.cs (129) : Assert.Equal(columnDefinitionPruebaComprobacion3.Name, columnDefinitionPrueba3.Name);
ColumnDefinitionTests.cs (130) : Assert.Equal(columnDefinitionPruebaComprobacion3.Type, columnDefinitionPrueba3.Type);
ColumnDefinitionTests.cs (133) : [Fact]
ColumnDefinitionTests.cs (134) : public void TestAsText_And_ParseWithLimiters()
ColumnDefinitionTests.cs (135) : {
ColumnDefinitionTests.cs (136) : //Creo la columnaDefinition
ColumnDefinitionTests.cs (137) : ColumnDefinition columnDefinitionPrueba1 = new ColumnDefinition(ColumnDefinition.DataType.String, "Nom->bre");
ColumnDefinitionTests.cs (138) : Assert.NotNull(columnDefinitionPrueba1);
ColumnDefinitionTests.cs (140) : //Hago el AsText de esa columnaDefinition y lo guardo en el String
ColumnDefinitionTests.cs (141) : string pruebaAsText = columnDefinitionPrueba1.AsText();
ColumnDefinitionTests.cs (142) : Assert.NotNull(pruebaAsText);
ColumnDefinitionTests.cs (143) : Assert.NotEmpty(pruebaAsText);
ColumnDefinitionTests.cs (145) : //Con ese string del AsText, hago el parse y lo asigno a otra columnaDefinition
ColumnDefinitionTests.cs (146) : ColumnDefinition columnDefinitionPruebaComprobacion1 = ColumnDefinition.Parse(pruebaAsText);
ColumnDefinitionTests.cs (147) : Assert.NotNull(columnDefinitionPruebaComprobacion1);
ColumnDefinitionTests.cs (149) : //Compruebo que ambas son iguales, comprobando atributo a atributo
ColumnDefinitionTests.cs (150) : Assert.Equal(columnDefinitionPruebaComprobacion1.Name, columnDefinitionPrueba1.Name);
ColumnDefinitionTests.cs (151) : Assert.Equal(columnDefinitionPruebaComprobacion1.Type, columnDefinitionPrueba1.Type);
ColumnDefinitionTests.cs (153) : //----------------------------------------------------------------------------------
ColumnDefinitionTests.cs (155) : //Creo la columnaDefinition
ColumnDefinitionTests.cs (156) : ColumnDefinition columnDefinitionPrueba2 = new ColumnDefinition(ColumnDefinition.DataType.Int, "Ed->ad");
ColumnDefinitionTests.cs (157) : Assert.NotNull(columnDefinitionPrueba2);
ColumnDefinitionTests.cs (159) : //Hago el AsText de esa columnaDefinition y lo guardo en el String
ColumnDefinitionTests.cs (160) : string pruebaAsText2 = columnDefinitionPrueba2.AsText();
ColumnDefinitionTests.cs (161) : Assert.NotNull(pruebaAsText2);
ColumnDefinitionTests.cs (162) : Assert.NotEmpty(pruebaAsText2);
ColumnDefinitionTests.cs (164) : //Con ese string del AsText, hago el parse y lo asigno a otra columnaDefinition
ColumnDefinitionTests.cs (165) : ColumnDefinition columnDefinitionPruebaComprobacion2 = ColumnDefinition.Parse(pruebaAsText2);
ColumnDefinitionTests.cs (166) : Assert.NotNull(columnDefinitionPruebaComprobacion2);
ColumnDefinitionTests.cs (168) : //Compruebo que ambas son iguales, comprobando atributo a atributo
ColumnDefinitionTests.cs (169) : Assert.Equal(columnDefinitionPruebaComprobacion2.Name, columnDefinitionPrueba2.Name);
ColumnDefinitionTests.cs (170) : Assert.Equal(columnDefinitionPruebaComprobacion2.Type, columnDefinitionPrueba2.Type);
ColumnDefinitionTests.cs (172) : //----------------------------------------------------------------------------------
ColumnDefinitionTests.cs (174) : //Creo la columnaDefinition
ColumnDefinitionTests.cs (175) : ColumnDefinition columnDefinitionPrueba3 = new ColumnDefinition(ColumnDefinition.DataType.Double, "1->56.23");
ColumnDefinitionTests.cs (176) : Assert.NotNull(columnDefinitionPrueba3);
ColumnDefinitionTests.cs (178) : //Hago el AsText de esa columnaDefinition y lo guardo en el String
ColumnDefinitionTests.cs (179) : string pruebaAsText3 = columnDefinitionPrueba3.AsText();
ColumnDefinitionTests.cs (180) : Assert.NotNull(pruebaAsText3);
ColumnDefinitionTests.cs (181) : Assert.NotEmpty(pruebaAsText3);
ColumnDefinitionTests.cs (183) : //Con ese string del AsText, hago el parse y lo asigno a otra columnaDefinition
ColumnDefinitionTests.cs (184) : ColumnDefinition columnDefinitionPruebaComprobacion3 = ColumnDefinition.Parse(pruebaAsText3);
ColumnDefinitionTests.cs (185) : Assert.NotNull(columnDefinitionPruebaComprobacion3);
ColumnDefinitionTests.cs (187) : //Compruebo que ambas son iguales, comprobando atributo a atributo
ColumnDefinitionTests.cs (188) : Assert.Equal(columnDefinitionPruebaComprobacion3.Name, columnDefinitionPrueba3.Name);
ColumnDefinitionTests.cs (189) : Assert.Equal(columnDefinitionPruebaComprobacion3.Type, columnDefinitionPrueba3.Type);
ColumnDefinitionTests.cs (190) : }
ColumnDefinitionTests.cs (192) : [Fact]
ColumnDefinitionTests.cs (193) : public void TestParse_InvalidValues()
ColumnDefinitionTests.cs (194) : {
ColumnDefinitionTests.cs (195) : // Valor null o vac�o
ColumnDefinitionTests.cs (196) : Assert.Null(ColumnDefinition.Parse(null));
ColumnDefinitionTests.cs (197) : Assert.Null(ColumnDefinition.Parse(""));
ColumnDefinitionTests.cs (198) : Assert.Null(ColumnDefinition.Parse("   "));
ColumnDefinitionTests.cs (200) : // Sin delimitador
ColumnDefinitionTests.cs (201) : Assert.Null(ColumnDefinition.Parse("NombreString"));
ColumnDefinitionTests.cs (203) : // Demasiados delimitadores
ColumnDefinitionTests.cs (204) : Assert.Null(ColumnDefinition.Parse("Nombre->String->Extra"));
ColumnDefinitionTests.cs (206) : // Tipo inv�lido (default en switch)
ColumnDefinitionTests.cs (207) : Assert.Null(ColumnDefinition.Parse("Nombre->Decimal"));
ColumnDefinitionTests.cs (208) : }
ConditionTests.cs (22) : // En comparaciones de String, lexicogr�ficamente, a < b < c < d y d > c > b > a
ConditionTests.cs (23) : //----------
ConditionTests.cs (25) : Condition testConditionStringMayor = new Condition("Nombre", ">", "b"); // value > b
ConditionTests.cs (27) : // Comparo value con LiteralValue: value > b
ConditionTests.cs (29) : Assert.True(testConditionStringMayor.IsTrue("c", ColumnDefinition.DataType.String)); // c > b? = SI --> True
ConditionTests.cs (30) : Assert.False(testConditionStringMayor.IsTrue("a", ColumnDefinition.DataType.String)); // a > b? = NO --> False
ConditionTests.cs (32) : Condition testConditionStringMenor = new Condition("Nombre", "<", "b"); // value < b
ConditionTests.cs (34) : // Comparo value con LiteralValue: value < b
ConditionTests.cs (36) : Assert.True(testConditionStringMenor.IsTrue("a", ColumnDefinition.DataType.String)); // a < b? = SI --> True
ConditionTests.cs (37) : Assert.False(testConditionStringMenor.IsTrue("c", ColumnDefinition.DataType.String)); // c < b? = NO --> False
ConditionTests.cs (39) : Condition testConditionStringIgual = new Condition("Nombre", "=", "Carlos"); // value = Carlos
ConditionTests.cs (41) : // Comparo value con LiteralValue: value = Carlos
ConditionTests.cs (43) : Assert.True(testConditionStringIgual.IsTrue("Carlos", ColumnDefinition.DataType.String)); // Carlos = Carlos? = SI --> True
ConditionTests.cs (44) : Assert.False(testConditionStringIgual.IsTrue("Juan", ColumnDefinition.DataType.String)); // Juan = Carlos? = NO --> False
ConditionTests.cs (46) : // Casos adicionales para el coverage
ConditionTests.cs (47) : Assert.False(testConditionStringIgual.IsTrue(null, ColumnDefinition.DataType.String)); // Null = Carlos? NO --> False
ConditionTests.cs (48) : Assert.False(testConditionStringIgual.IsTrue("", ColumnDefinition.DataType.String)); // String vac�o = Carlos? NO --> False
ConditionTests.cs (54) : // En comparaciones num�ricas: 1600 < 1800 < 2000
ConditionTests.cs (55) : //----------
ConditionTests.cs (57) : Condition testConditionIntMayor = new Condition("Salario", ">", "1800"); // value > 1800
ConditionTests.cs (59) : // Comparo value con LiteralValue: value > 1800
ConditionTests.cs (61) : Assert.True(testConditionIntMayor.IsTrue("2000", ColumnDefinition.DataType.Int)); // 2000 > 1800 ? = SI --> True
ConditionTests.cs (62) : Assert.False(testConditionIntMayor.IsTrue("1600", ColumnDefinition.DataType.Int)); // 1600 > 1800 ? = NO --> False
ConditionTests.cs (64) : Condition testConditionIntMenor = new Condition("Salario", "<", "1800"); // value < 1800
ConditionTests.cs (66) : // Comparo value con LiteralValue: value < 1800
ConditionTests.cs (68) : Assert.True(testConditionIntMenor.IsTrue("1600", ColumnDefinition.DataType.Int)); // 1600 < 1800 ? = SI --> True
ConditionTests.cs (69) : Assert.False(testConditionIntMenor.IsTrue("2000", ColumnDefinition.DataType.Int)); // 2000 < 1800 ? = NO --> False
ConditionTests.cs (71) : Condition testConditionIntIgual = new Condition("Salario", "=", "1800"); // value = 1800
ConditionTests.cs (73) : // Comparo value con LiteralValue: value = 1800
ConditionTests.cs (75) : Assert.True(testConditionIntIgual.IsTrue("1800", ColumnDefinition.DataType.Int)); // 1800 = 1800 ? = SI --> True
ConditionTests.cs (76) : Assert.False(testConditionIntIgual.IsTrue("2000", ColumnDefinition.DataType.Int)); // 2000 = 1800 ? = NO --> False
ConditionTests.cs (78) : // Casos adicionales para cobertura total
ConditionTests.cs (79) : Assert.False(testConditionIntIgual.IsTrue("abc", ColumnDefinition.DataType.Int)); // "abc" no es un int --> False
ConditionTests.cs (80) : Assert.False(testConditionIntIgual.IsTrue("3.14", ColumnDefinition.DataType.Int)); // "3.14" no es un int --> False
ConditionTests.cs (81) : Assert.False(testConditionIntIgual.IsTrue(null, ColumnDefinition.DataType.Int)); // Null no puede ser un int --> False
ConditionTests.cs (87) : // En comparaciones de Double: 30 < 34.6 < 40
ConditionTests.cs (88) : //----------
ConditionTests.cs (90) : Condition testConditionDoubleMayor = new Condition("Distancia al trabajo", ">", "34.6"); // value > 34.6
ConditionTests.cs (92) : // Comparo value con LiteralValue: value > 34.6
ConditionTests.cs (94) : Assert.True(testConditionDoubleMayor.IsTrue("40", ColumnDefinition.DataType.Double)); // 40 > 34.6 ? = SI --> True
ConditionTests.cs (95) : Assert.False(testConditionDoubleMayor.IsTrue("30", ColumnDefinition.DataType.Double)); // 30 > 34.6 ? = NO --> False
ConditionTests.cs (97) : Condition testConditionDoubleMenor = new Condition("Distancia al trabajo", "<", "34.6"); // value < 34.6
ConditionTests.cs (99) : // Comparo value con LiteralValue: value < 34.6
ConditionTests.cs (101) : Assert.True(testConditionDoubleMenor.IsTrue("30", ColumnDefinition.DataType.Double)); // 30 < 34.6 ? = SI --> True
ConditionTests.cs (102) : Assert.False(testConditionDoubleMenor.IsTrue("40", ColumnDefinition.DataType.Double)); // 40 < 34.6 ? = NO --> False
ConditionTests.cs (104) : Condition testConditionDoubleIgual = new Condition("Distancia al trabajo", "=", "34.6"); // value = 34.6
ConditionTests.cs (106) : // Comparo value con LiteralValue: value = 34.6
ConditionTests.cs (108) : Assert.True(testConditionDoubleIgual.IsTrue("34.6", ColumnDefinition.DataType.Double)); // 34.6 = 34.6 ? = SI --> True
ConditionTests.cs (109) : Assert.False(testConditionDoubleIgual.IsTrue("50", ColumnDefinition.DataType.Double)); // 50 = 34.6 ? = NO --> False
ConditionTests.cs (111) : // Casos adicionales para cobertura total
ConditionTests.cs (112) : Assert.False(testConditionDoubleIgual.IsTrue("abc", ColumnDefinition.DataType.Double)); // "abc" no es un double --> False
ConditionTests.cs (113) : Assert.False(testConditionDoubleIgual.IsTrue(null, ColumnDefinition.DataType.Double)); // Null no puede ser un double --> False
ConditionTests.cs (114) : }
DatabaseTests.cs (2) : using System.Runtime.CompilerServices;
DatabaseTests.cs (10) : public class DatabaseTest
DatabaseTests.cs (14) : [Fact]
DatabaseTests.cs (15) : public void TestConstructor()
DatabaseTests.cs (16) : {
DatabaseTests.cs (18) : string expectedUsername = "IkerHervellaEhu";
DatabaseTests.cs (19) : string expectedPassword = "nada";
DatabaseTests.cs (21) : Database db = new Database(expectedUsername, expectedPassword);
DatabaseTests.cs (24) : //Caso 1: Nombre de usuario inicializado correctamente
DatabaseTests.cs (26) : Assert.Equal(expectedUsername, db.GetUsername());
DatabaseTests.cs (29) : //Caso 2: La propiedad LastErrorMessage deber�a estar null al crearse
DatabaseTests.cs (31) : Assert.Null(db.LastErrorMessage);
DatabaseTests.cs (34) : //Caso 3: SecurityManager debe estar null (hasta que se inicialice con Load)
DatabaseTests.cs (40) : //Caso 4: La base de datos se crea vac�a, no debe tener tablas
DatabaseTests.cs (41) : Table table = db.Select("TablaInexistente", new List<string>(), null);
DatabaseTests.cs (42) : Assert.Null(table); // Debe devolver null al no existir
DatabaseTests.cs (43) : }
DatabaseTests.cs (45) : [Fact]
DatabaseTests.cs (46) : public void TestAddTable()
DatabaseTests.cs (47) : {
DatabaseTests.cs (48) : Database database = new Database("admin", "password");
DatabaseTests.cs (50) : List<ColumnDefinition> columns = new List<ColumnDefinition>
DatabaseTests.cs (51) : {
DatabaseTests.cs (52) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Numero"),
DatabaseTests.cs (53) : new ColumnDefinition(ColumnDefinition.DataType.String, "Nombre")
DatabaseTests.cs (54) : };
DatabaseTests.cs (56) : Table validTable = new Table("Personas", columns);
DatabaseTests.cs (57) : Table tableWithNullColumns = new Table("Familiares", null);
DatabaseTests.cs (58) : Table tableWithNullNameAndColumns = new Table(null, null);
DatabaseTests.cs (59) : Table nullTable = null;
DatabaseTests.cs (62) : //Caso 1: A�adir una tabla v�lida con columnas definidas
DatabaseTests.cs (64) : bool result1 = database.AddTable(validTable);
DatabaseTests.cs (66) : Assert.True(result1);
DatabaseTests.cs (67) : Assert.NotNull(validTable);
DatabaseTests.cs (70) : //Caso 2: A�adir una tabla con columnas null
DatabaseTests.cs (72) : bool result2 = database.AddTable(tableWithNullColumns);
DatabaseTests.cs (74) : Assert.True(result2);
DatabaseTests.cs (75) : Assert.NotNull(tableWithNullColumns);
DatabaseTests.cs (78) : //Caso3: A�adir una tabla con nombre y columnas null
DatabaseTests.cs (80) : bool result3 = database.AddTable(tableWithNullNameAndColumns);
DatabaseTests.cs (82) : Assert.True(result3);
DatabaseTests.cs (83) : Assert.NotNull(tableWithNullNameAndColumns);
DatabaseTests.cs (86) : //Caso4: A�adir una tabla null (declarada antes)
DatabaseTests.cs (88) : bool result4 = database.AddTable(nullTable);
DatabaseTests.cs (90) : Assert.False(result4);
DatabaseTests.cs (91) : Assert.Null(nullTable);
DatabaseTests.cs (94) : //Caso5: A�adir una tabla null directamente
DatabaseTests.cs (96) : bool result5 = database.AddTable(null);
DatabaseTests.cs (98) : Assert.False(result5);
DatabaseTests.cs (100) : }
DatabaseTests.cs (102) : [Fact]
DatabaseTests.cs (103) : public void TestTableByName()
DatabaseTests.cs (104) : {
DatabaseTests.cs (105) : Database dataBasePrueba = new Database("admin", "password");
DatabaseTests.cs (107) : List<ColumnDefinition> columns = new List<ColumnDefinition>
DatabaseTests.cs (108) : {
DatabaseTests.cs (109) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Numero"),
DatabaseTests.cs (110) : new ColumnDefinition(ColumnDefinition.DataType.String, "Nombre")
DatabaseTests.cs (111) : };
DatabaseTests.cs (113) : Table tablePrueba1 = new Table("Personas", columns);
DatabaseTests.cs (114) : Table tablePrueba2 = new Table("Familiares", null);
DatabaseTests.cs (115) : Table tablePrueba3 = new Table(null, null);
DatabaseTests.cs (117) : dataBasePrueba.AddTable(tablePrueba1);
DatabaseTests.cs (118) : dataBasePrueba.AddTable(tablePrueba2);
DatabaseTests.cs (119) : dataBasePrueba.AddTable(tablePrueba3);
DatabaseTests.cs (122) : //Caso 1: Buscar una tabla existente devuelve la instancia correspondiente
DatabaseTests.cs (124) : Table resultado1 = dataBasePrueba.TableByName("Personas");
DatabaseTests.cs (126) : Assert.NotNull(resultado1);
DatabaseTests.cs (127) : Assert.Equal(tablePrueba1, resultado1);
DatabaseTests.cs (130) : //Caso 2: Buscar otra tabla existente devuelve la instancia correspondiente
DatabaseTests.cs (132) : Table resultado2 = dataBasePrueba.TableByName("Familiares");
DatabaseTests.cs (134) : Assert.NotNull(resultado2);
DatabaseTests.cs (135) : Assert.Equal(tablePrueba2, resultado2);
DatabaseTests.cs (138) : //Caso 3: Buscar con el string "null" devuelve null (nombre literal)
DatabaseTests.cs (140) : Table resultado3 = dataBasePrueba.TableByName("null");
DatabaseTests.cs (142) : Assert.Null(resultado3);
DatabaseTests.cs (145) : //Caso 4: Buscar con un nombre null devuelve null
DatabaseTests.cs (147) : Table resultado4 = dataBasePrueba.TableByName(null);
DatabaseTests.cs (149) : Assert.Null(resultado4);
DatabaseTests.cs (152) : //Caso 5: Buscar una tabla que no existe devuelve null
DatabaseTests.cs (154) : Table resultado5 = dataBasePrueba.TableByName("tienequedarnull");
DatabaseTests.cs (156) : Assert.Null(resultado5);
DatabaseTests.cs (160) : public void TestCreateTable()
DatabaseTests.cs (163) : Database database = new Database("Test", "1234");
DatabaseTests.cs (165) : List<ColumnDefinition> validColumns = new List<ColumnDefinition>
DatabaseTests.cs (170) : List<ColumnDefinition> emptyColumns = new List<ColumnDefinition>();
DatabaseTests.cs (171) : string tableName = "Joseba";
DatabaseTests.cs (172) : string duplicateTableName = "Existe";
DatabaseTests.cs (175) : //Caso 1: Crear tabla v�lida por primera vez, debe devolver true y mensaje de �xito
DatabaseTests.cs (177) : bool createResult1 = database.CreateTable(tableName, validColumns);
DatabaseTests.cs (179) : Assert.True(createResult1);
DatabaseTests.cs (180) : Assert.Equal(Constants.CreateTableSuccess, database.LastErrorMessage);
DatabaseTests.cs (183) : //Caso 2: Crear tabla duplicada, debe devolver false y mensaje de error "ya existe"
DatabaseTests.cs (185) : database.CreateTable(duplicateTableName, validColumns);
DatabaseTests.cs (186) : bool createResult2 = database.CreateTable(duplicateTableName, validColumns);
DatabaseTests.cs (188) : Assert.False(createResult2);
DatabaseTests.cs (189) : Assert.Equal(Constants.TableAlreadyExistsError, database.LastErrorMessage);
DatabaseTests.cs (192) : //Caso 3: Crear tabla con lista de columnas vac�a, debe devolver false y mensaje de error "no hay columnas"
DatabaseTests.cs (194) : bool createResult3 = database.CreateTable("TablaSinColumnas", emptyColumns);
DatabaseTests.cs (196) : Assert.False(createResult3);
DatabaseTests.cs (201) : public void TestDropTable()
DatabaseTests.cs (203) : //Arrange
DatabaseTests.cs (204) : Database database = new Database("Test", "1234");
DatabaseTests.cs (205) : string existingTableName = "Joseba";
DatabaseTests.cs (206) : string nonExistentTableName = "This table doesnt exist";
DatabaseTests.cs (213) : database.CreateTable(existingTableName, columns);
DatabaseTests.cs (216) : //Caso 1: Eliminar una tabla que existe, debe devolver true y mensaje de �xito
DatabaseTests.cs (218) : bool dropSuccess = database.DropTable(existingTableName);
DatabaseTests.cs (220) : Assert.True(dropSuccess);
DatabaseTests.cs (221) : Assert.Equal(Constants.DropTableSuccess, database.LastErrorMessage);
DatabaseTests.cs (224) : //Caso 2: Intentar eliminar una tabla que no existe , debe devolver false y mensaje de error
DatabaseTests.cs (226) : bool dropFailure = database.DropTable(nonExistentTableName);
DatabaseTests.cs (228) : Assert.False(dropFailure);
DatabaseTests.cs (229) : Assert.Equal(Constants.TableDoesNotExistError, database.LastErrorMessage);
DatabaseTests.cs (233) : public void TestInsert()
DatabaseTests.cs (235) : //Arrange
DatabaseTests.cs (236) : string tableName = "Joseba";
DatabaseTests.cs (242) : Database database = new Database("Test", "1234");
DatabaseTests.cs (243) : database.CreateTable(tableName, columns);
DatabaseTests.cs (246) : //Caso 1: Insert v�lido , devuelve true y mensaje de �xito
DatabaseTests.cs (248) : List<string> validValues = new List<string> { "1", "Joseba" };
DatabaseTests.cs (249) : bool insertSuccess = database.Insert(tableName, validValues);
DatabaseTests.cs (251) : Assert.True(insertSuccess);
DatabaseTests.cs (252) : Assert.Equal(Constants.InsertSuccess, database.LastErrorMessage);
DatabaseTests.cs (255) : //Caso 2: Insert en una tabla inexistente , devuelve false y mensaje de error
DatabaseTests.cs (257) : List<string> valuesForNonExistent = new List<string> { "1", "Joseba" };
DatabaseTests.cs (258) : bool insertTableNotFound = database.Insert("NoExiste", valuesForNonExistent);
DatabaseTests.cs (260) : Assert.False(insertTableNotFound);
DatabaseTests.cs (261) : Assert.Equal(Constants.TableDoesNotExistError, database.LastErrorMessage);
DatabaseTests.cs (264) : //Caso 3: Insert con n�mero incorrecto de values y numColumns , devuelve false y mensaje de error
DatabaseTests.cs (266) : List<string> invalidValues = new List<string> { "SoloUno" };
DatabaseTests.cs (267) : bool insertInvalidValues = database.Insert(tableName, invalidValues);
DatabaseTests.cs (269) : Assert.False(insertInvalidValues);
DatabaseTests.cs (270) : Assert.Equal(Constants.ColumnCountsDontMatch, database.LastErrorMessage);
DatabaseTests.cs (274) : public void TestSelect()
DatabaseTests.cs (277) : string tableName = "Person";
DatabaseTests.cs (280) : new ColumnDefinition(ColumnDefinition.DataType.String, "ID"),
DatabaseTests.cs (284) : Database db = new Database("Test", "123");
DatabaseTests.cs (285) : db.CreateTable(tableName, columns);
DatabaseTests.cs (286) : db.Insert(tableName, new List<string> { "72858695G", "Markel" });
DatabaseTests.cs (287) : db.Insert(tableName, new List<string> { "72858456F", "Joseba" });
DatabaseTests.cs (290) : //Caso 1: Select con tabla existente y condici�n v�lida
DatabaseTests.cs (292) : List<string> selectedColumns1 = new List<string> { "ID", "Name" };
DatabaseTests.cs (293) : Condition conditionMarkel = new Condition("Name", "=", "Markel");
DatabaseTests.cs (294) : Table result1 = db.Select(tableName, selectedColumns1, conditionMarkel);
DatabaseTests.cs (296) : Assert.NotNull(result1);
DatabaseTests.cs (297) : Assert.Equal(1, result1.NumRows());
DatabaseTests.cs (298) : Assert.Equal("72858695G", result1.GetRow(0).GetValue("ID"));
DatabaseTests.cs (299) : Assert.Equal("Markel", result1.GetRow(0).GetValue("Name"));
DatabaseTests.cs (302) : //Caso 2: Select sobre tabla inexistente , debe devolver null y error
DatabaseTests.cs (304) : List<string> selectedColumns2 = new List<string> { "ID", "Name" };
DatabaseTests.cs (305) : Table result2 = db.Select("NonExistentTable", selectedColumns2, conditionMarkel);
DatabaseTests.cs (307) : Assert.Null(result2);
DatabaseTests.cs (308) : Assert.Equal(Constants.TableDoesNotExistError, db.LastErrorMessage);
DatabaseTests.cs (311) : //Caso 3: Select con columna que no existe , debe devolver null y error
DatabaseTests.cs (313) : List<string> invalidColumns = new List<string> { "Age" };
DatabaseTests.cs (314) : Table result3 = db.Select(tableName, invalidColumns, new Condition("ID", "=", "72858695G"));
DatabaseTests.cs (316) : Assert.Null(result3);
DatabaseTests.cs (317) : Assert.Equal(Constants.ColumnDoesNotExistError, db.LastErrorMessage);
DatabaseTests.cs (321) : public void TestDeleteWhere()
DatabaseTests.cs (331) : daBase.Insert(nameTable, new List<string> { "72858695", "Joseba" });
DatabaseTests.cs (332) : daBase.Insert(nameTable, new List<string> { "72858456", "Markel" });
DatabaseTests.cs (335) : //Caso 1: Eliminaci�n correcta de filas que cumplen una condici�n
DatabaseTests.cs (337) : Condition conditionMarkel = new Condition("Name", "=", "Markel");
DatabaseTests.cs (338) : bool result1 = daBase.DeleteWhere(nameTable, conditionMarkel);
DatabaseTests.cs (340) : Assert.True(result1);
DatabaseTests.cs (341) : Assert.Equal(1, daBase.TableByName(nameTable).NumRows());
DatabaseTests.cs (345) : //Caso 2: Intentar eliminar en una tabla que no existe
DatabaseTests.cs (347) : Condition conditionInexistent = new Condition("ID", "=", "72858695");
DatabaseTests.cs (348) : bool result2 = daBase.DeleteWhere("NonExistentTable", conditionInexistent);
DatabaseTests.cs (350) : Assert.False(result2);
DatabaseTests.cs (354) : //Caso 3: Condici�n con una columna que no existe
DatabaseTests.cs (356) : Condition conditionWrongColumn = new Condition("Age", "=", "72858695");
DatabaseTests.cs (357) : bool result3 = daBase.DeleteWhere(nameTable, conditionWrongColumn);
DatabaseTests.cs (359) : Assert.False(result3);
DatabaseTests.cs (364) : public void Test_Update()
DatabaseTests.cs (366) : //Arrange
DatabaseTests.cs (379) : //Caso 1: Update correcto sobre filas que cumplen la condici�n
DatabaseTests.cs (381) : Condition conditionMarkel = new Condition("Name", "=", "Markel");
DatabaseTests.cs (382) : List<SetValue> setIDToNewValue = new List<SetValue>
DatabaseTests.cs (387) : bool result1 = daBase.Update(nameTable, setIDToNewValue, conditionMarkel);
DatabaseTests.cs (389) : Assert.True(result1);
DatabaseTests.cs (390) : Assert.Equal("555555", daBase.TableByName(nameTable).GetRow(1).GetValue("ID"));
DatabaseTests.cs (393) : //Caso 2: Update sobre una tabla inexistente
DatabaseTests.cs (395) : bool result2 = daBase.Update("NoExiste", setIDToNewValue, conditionMarkel);
DatabaseTests.cs (397) : Assert.False(result2);
DatabaseTests.cs (401) : //Caso 3: Update sobre una columna inexistente
DatabaseTests.cs (403) : List<SetValue> invalidColumnSet = new List<SetValue>
DatabaseTests.cs (405) : new SetValue("Edad", "88")
DatabaseTests.cs (407) : bool result3 = daBase.Update(nameTable, invalidColumnSet, conditionMarkel);
DatabaseTests.cs (409) : Assert.False(result3);
DatabaseTests.cs (413) : //Caso 4: Update con condici�n que no coincide con ninguna fila
DatabaseTests.cs (415) : Condition noMatchCondition = new Condition("ID", "=", "00000000");
DatabaseTests.cs (416) : List<SetValue> changeName = new List<SetValue>
DatabaseTests.cs (420) : bool result4 = daBase.Update(nameTable, changeName, noMatchCondition);
DatabaseTests.cs (422) : Assert.False(result4);
DatabaseTests.cs (541) : [Fact]
DatabaseTests.cs (542) : public void Test1CreateTable_ReturnFalse()
DatabaseTests.cs (543) : {
DatabaseTests.cs (544) : Database daBase = new Database("Test", "1234");
DatabaseTests.cs (545) : string nameTable = "Existe";
DatabaseTests.cs (546) : List<ColumnDefinition> columns = new List<ColumnDefinition>
DatabaseTests.cs (547) : {
DatabaseTests.cs (548) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Aa")
DatabaseTests.cs (549) : };
DatabaseTests.cs (550) : daBase.CreateTable(nameTable, columns);
DatabaseTests.cs (551) : bool another = daBase.CreateTable(nameTable, columns);
DatabaseTests.cs (552) : Assert.False(another);
DatabaseTests.cs (553) : Assert.Equal(Constants.TableAlreadyExistsError, daBase.LastErrorMessage);
DatabaseTests.cs (554) : }
DatabaseTests.cs (558) : [Fact]
DatabaseTests.cs (559) : public void Test1_2CreateTable_ReturnFalse()
DatabaseTests.cs (560) : {
DatabaseTests.cs (561) : string nameTable = "Joseba";
DatabaseTests.cs (562) : List<ColumnDefinition> columns = new List<ColumnDefinition>();
DatabaseTests.cs (563) : Database daBase = new Database("Test", "1234");
DatabaseTests.cs (564) : bool yeye = daBase.CreateTable(nameTable, columns);
DatabaseTests.cs (565) : Assert.False(yeye);
DatabaseTests.cs (567) : }
DatabaseTests.cs (568) : [Fact]
DatabaseTests.cs (569) : public void Test1_3CreateTable_ReturnTrue()
DatabaseTests.cs (570) : {
DatabaseTests.cs (571) : string nameTable = "Joseba";
DatabaseTests.cs (572) : List<ColumnDefinition> columns = new List<ColumnDefinition>
DatabaseTests.cs (573) : {
DatabaseTests.cs (574) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Aa")
DatabaseTests.cs (575) : };
DatabaseTests.cs (576) : Database daBase = new Database("Test", "1234");
DatabaseTests.cs (577) : bool yeye = daBase.CreateTable(nameTable, columns);
DatabaseTests.cs (578) : Assert.True(yeye);
DatabaseTests.cs (579) : Assert.Equal(Constants.CreateTableSuccess, daBase.LastErrorMessage);
DatabaseTests.cs (581) : }
DatabaseTests.cs (583) : [Fact]
DatabaseTests.cs (584) : public void Test2DropTable_ReturnTrue()
DatabaseTests.cs (585) : {
DatabaseTests.cs (586) : string nameTable = "Joseba";
DatabaseTests.cs (587) : List<ColumnDefinition> columns = new List<ColumnDefinition>
DatabaseTests.cs (588) : {
DatabaseTests.cs (589) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Aa")
DatabaseTests.cs (590) : };
DatabaseTests.cs (591) : Database daBase = new Database("Test", "1234");
DatabaseTests.cs (592) : daBase.CreateTable(nameTable, columns);
DatabaseTests.cs (593) : bool yoyo = daBase.DropTable(nameTable);
DatabaseTests.cs (594) : Assert.True(yoyo);
DatabaseTests.cs (595) : Assert.Equal(Constants.DropTableSuccess, daBase.LastErrorMessage);
DatabaseTests.cs (596) : }
DatabaseTests.cs (597) : [Fact]
DatabaseTests.cs (598) : public void Test2_2DropTable_ReturnFalse()
DatabaseTests.cs (599) : {
DatabaseTests.cs (600) : Database daBase = new Database("Test", "1234");
DatabaseTests.cs (601) : bool yuyu = daBase.DropTable("This table doesnt exist");
DatabaseTests.cs (602) : Assert.False(yuyu);
DatabaseTests.cs (603) : Assert.Equal(Constants.TableDoesNotExistError, daBase.LastErrorMessage);
DatabaseTests.cs (604) : }
DatabaseTests.cs (606) : [Fact]
DatabaseTests.cs (607) : public void Test3InsertMethod_ReturnTrue()
DatabaseTests.cs (608) : {
DatabaseTests.cs (609) : //preparing variables to execute the test
DatabaseTests.cs (610) : string nameTable = "Joseba";
DatabaseTests.cs (611) : List<ColumnDefinition> columns = new List<ColumnDefinition>
DatabaseTests.cs (612) : {
DatabaseTests.cs (613) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Aa"),
DatabaseTests.cs (614) : new ColumnDefinition(ColumnDefinition.DataType.String,"Nombre")
DatabaseTests.cs (615) : };
DatabaseTests.cs (616) : Database daBase = new Database("Test", "1234");
DatabaseTests.cs (617) : daBase.CreateTable(nameTable, columns);
DatabaseTests.cs (618) : var values = new List<string> { "1", "Joseba" };
DatabaseTests.cs (619) : //mainevenet
DatabaseTests.cs (620) : bool erantzuna = daBase.Insert(nameTable, values);
DatabaseTests.cs (622) : //Asserts to the test
DatabaseTests.cs (623) : Assert.True(erantzuna);
DatabaseTests.cs (624) : Assert.Equal(Constants.InsertSuccess, daBase.LastErrorMessage);
DatabaseTests.cs (626) : }
DatabaseTests.cs (627) : [Fact]
DatabaseTests.cs (628) : public void Test3_2InsertMethod_ReturnFalse()
DatabaseTests.cs (629) : {
DatabaseTests.cs (630) : string nameTable = "Joseba";
DatabaseTests.cs (631) : List<ColumnDefinition> columns = new List<ColumnDefinition>
DatabaseTests.cs (632) : {
DatabaseTests.cs (633) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Codigo"),
DatabaseTests.cs (634) : new ColumnDefinition(ColumnDefinition.DataType.String,"Nombre")
DatabaseTests.cs (635) : };
DatabaseTests.cs (636) : Database daBase = new Database("Test", "1234");
DatabaseTests.cs (637) : daBase.CreateTable(nameTable, columns);
DatabaseTests.cs (638) : var values = new List<string> { "1", "Joseba" };
DatabaseTests.cs (639) : //mainevent1: look if it returns false with a non existing table
DatabaseTests.cs (640) : bool resultado = daBase.Insert("Esta tabla no existe", values);
DatabaseTests.cs (641) : //asserts
DatabaseTests.cs (642) : Assert.False(resultado);
DatabaseTests.cs (643) : Assert.Equal(Constants.TableDoesNotExistError, daBase.LastErrorMessage);
DatabaseTests.cs (645) : //mainevent2: look if it returns false with incorrect valus
DatabaseTests.cs (646) : var valus = new List<string> { "No Valido" };
DatabaseTests.cs (647) : bool resultado2 = daBase.Insert(nameTable, valus);
DatabaseTests.cs (649) : //asserts
DatabaseTests.cs (650) : Assert.False(resultado2);
DatabaseTests.cs (651) : Assert.Equal(Constants.ColumnCountsDontMatch, daBase.LastErrorMessage);
DatabaseTests.cs (653) : }
DatabaseTests.cs (655) : [Fact]
DatabaseTests.cs (656) : public void Test_SelectDatabase_CorrectData()
DatabaseTests.cs (657) : {
DatabaseTests.cs (658) : //create the database and tables with their respective data
DatabaseTests.cs (659) : string nameTable = "Person";
DatabaseTests.cs (660) : List<ColumnDefinition> columns = new List<ColumnDefinition>
DatabaseTests.cs (661) : {
DatabaseTests.cs (662) : new ColumnDefinition(ColumnDefinition.DataType.Int,"ID"),
DatabaseTests.cs (663) : new ColumnDefinition(ColumnDefinition.DataType.String,"Name")
DatabaseTests.cs (665) : };
DatabaseTests.cs (666) : Database daBase = new Database("Test", "123");
DatabaseTests.cs (667) : daBase.CreateTable(nameTable, columns);
DatabaseTests.cs (669) : //insert data in the table
DatabaseTests.cs (670) : daBase.Insert(nameTable, new List<string> { "72858695G", "Markel" });
DatabaseTests.cs (671) : daBase.Insert(nameTable, new List<string> { "72858456F", "Joseba" });
DatabaseTests.cs (672) : //create condition to select the row in which name = Markel
DatabaseTests.cs (673) : Condition markelCondition = new Condition("Name", "=", "Markel");
DatabaseTests.cs (674) : List<string> selectedColumns = new List<string> { "ID", "Name" };
DatabaseTests.cs (676) : //do select
DatabaseTests.cs (677) : Table resultTable = daBase.Select(nameTable, selectedColumns, markelCondition);
DatabaseTests.cs (678) : List<string> selectedValues = new List<string> { "72858695G", "Markel" };
DatabaseTests.cs (679) : Row selectedRow = new Row(columns, selectedValues);
DatabaseTests.cs (680) : //Check that the table is not null and contains the expected data
DatabaseTests.cs (681) : //When we count the rows it has to be 1 and the ID and name have to be Markel's
DatabaseTests.cs (682) : Assert.NotNull(resultTable);
DatabaseTests.cs (683) : Assert.Equal(1, resultTable.NumRows());
DatabaseTests.cs (684) : Assert.Equal(selectedRow.Values, resultTable.GetRow(0).Values);
DatabaseTests.cs (687) : }
DatabaseTests.cs (688) : [Fact]
DatabaseTests.cs (689) : public void Test_SelectDatabase_TableNotExist()
DatabaseTests.cs (690) : {
DatabaseTests.cs (691) : //create the database
DatabaseTests.cs (692) : Database daBase = new Database("Test", "123");
DatabaseTests.cs (693) : List<string> selectedColumns = new List<string> { "ID", "Name" };
DatabaseTests.cs (694) : Condition markelCondition = new Condition("Name", "=", "Markel");
DatabaseTests.cs (695) : //try to obtain data from a non existent table
DatabaseTests.cs (696) : Table resultTable = daBase.Select("NonExistentTable", selectedColumns, markelCondition);
DatabaseTests.cs (697) : //check that the result is null because the table do not exist  with asserts
DatabaseTests.cs (698) : Assert.Null(resultTable);
DatabaseTests.cs (699) : Assert.Equal(Constants.TableDoesNotExistError, daBase.LastErrorMessage);
DatabaseTests.cs (700) : }
DatabaseTests.cs (701) : [Fact]
DatabaseTests.cs (703) : public void Test_SelectDatabase_ColumnDoesNotExist()
DatabaseTests.cs (704) : {
DatabaseTests.cs (705) : ////create the database and tables with their respective data
DatabaseTests.cs (706) : string nameTable = "Person";
DatabaseTests.cs (707) : List<ColumnDefinition> columns = new List<ColumnDefinition>
DatabaseTests.cs (708) : {
DatabaseTests.cs (709) : new ColumnDefinition(ColumnDefinition.DataType.Int,"ID"),
DatabaseTests.cs (710) : new ColumnDefinition(ColumnDefinition.DataType.String,"Name")
DatabaseTests.cs (711) : };
DatabaseTests.cs (712) : Database daBase = new Database("Test", "123");
DatabaseTests.cs (713) : daBase.CreateTable(nameTable, columns);
DatabaseTests.cs (714) : daBase.Insert(nameTable, new List<string> { "72858695G", "Markel" });
DatabaseTests.cs (716) : //select the columns using the condition
DatabaseTests.cs (717) : List<string> selectedColumns = new List<string> { "Age" };
DatabaseTests.cs (718) : Condition markelCondition = new Condition("ID", "=", "72858695G");
DatabaseTests.cs (719) : //try to obtain dat from a nono existing column
DatabaseTests.cs (720) : Table resultTable = daBase.Select(nameTable, selectedColumns, markelCondition);
DatabaseTests.cs (721) : //check that the result is null because the column do not exist  with asserts
DatabaseTests.cs (723) : Assert.Null(resultTable);
DatabaseTests.cs (724) : Assert.Equal(Constants.ColumnDoesNotExistError, daBase.LastErrorMessage);
DatabaseTests.cs (725) : }
DatabaseTests.cs (727) : [Fact]
DatabaseTests.cs (728) : public void Test_DeleteWhereDatabase_DeleteRows()
DatabaseTests.cs (729) : {
DatabaseTests.cs (730) : //create the database
DatabaseTests.cs (731) : string nameTable = "Person";
DatabaseTests.cs (732) : List<ColumnDefinition> columns = new List<ColumnDefinition>
DatabaseTests.cs (733) : {
DatabaseTests.cs (734) : new ColumnDefinition(ColumnDefinition.DataType.Int,"ID"),
DatabaseTests.cs (735) : new ColumnDefinition(ColumnDefinition.DataType.String,"Name")
DatabaseTests.cs (737) : };
DatabaseTests.cs (738) : Database daBase = new Database("Test", "123");
DatabaseTests.cs (739) : daBase.CreateTable(nameTable, columns);
DatabaseTests.cs (741) : //insert data in the table
DatabaseTests.cs (742) : daBase.Insert("Person", new List<string> { "72858695", "Joseba" });
DatabaseTests.cs (743) : daBase.Insert("Person", new List<string> { "72858456", "Markel" });
DatabaseTests.cs (744) : //create the condition:
DatabaseTests.cs (745) : Condition markelCondition = new Condition("Name", "=", "Markel");
DatabaseTests.cs (748) : //do delte and check if it is true
DatabaseTests.cs (749) : bool result = daBase.DeleteWhere(nameTable, markelCondition);
DatabaseTests.cs (750) : Assert.True(result);
DatabaseTests.cs (751) : Table tableResult = daBase.TableByName("Person");
DatabaseTests.cs (752) : Assert.Equal(1, tableResult.NumRows());
DatabaseTests.cs (753) : Assert.Equal(Constants.DeleteSuccess, daBase.LastErrorMessage);
DatabaseTests.cs (756) : }
DatabaseTests.cs (757) : [Fact]
DatabaseTests.cs (758) : public void Test_DeleteWhereDatabase_FalseTableDoNotExist()
DatabaseTests.cs (759) : {
DatabaseTests.cs (760) : //create the database
DatabaseTests.cs (761) : List<ColumnDefinition> columns = new List<ColumnDefinition>
DatabaseTests.cs (762) : {
DatabaseTests.cs (763) : new ColumnDefinition(ColumnDefinition.DataType.Int,"ID"),
DatabaseTests.cs (764) : new ColumnDefinition(ColumnDefinition.DataType.String,"Name")
DatabaseTests.cs (766) : };
DatabaseTests.cs (767) : Database daBase = new Database("Test", "123");
DatabaseTests.cs (768) : daBase.CreateTable("Person", columns);
DatabaseTests.cs (770) : //insert data in the table
DatabaseTests.cs (771) : daBase.Insert("Person", new List<string> { "72858695", "Markel" });
DatabaseTests.cs (772) : daBase.Insert("Person", new List<string> { "72858456", "Joseba" });
DatabaseTests.cs (773) : Condition markelCondition = new Condition("ID", "=", "72858695");
DatabaseTests.cs (774) : //try to delete form the table "nonexistenttable", that is imposible because this table is not inn the database
DatabaseTests.cs (775) : bool result = daBase.DeleteWhere("NonExistentTable", markelCondition);
DatabaseTests.cs (776) : Assert.False(result);
DatabaseTests.cs (777) : Assert.Equal(Constants.TableDoesNotExistError, daBase.LastErrorMessage);
DatabaseTests.cs (778) : }
DatabaseTests.cs (779) : [Fact]
DatabaseTests.cs (780) : public void Test_DeleteWhereDatabase_ColumnDoNotExist()
DatabaseTests.cs (781) : {
DatabaseTests.cs (782) : //create the database
DatabaseTests.cs (783) : List<ColumnDefinition> columns = new List<ColumnDefinition>
DatabaseTests.cs (784) : {
DatabaseTests.cs (785) : new ColumnDefinition(ColumnDefinition.DataType.Int,"ID"),
DatabaseTests.cs (786) : new ColumnDefinition(ColumnDefinition.DataType.String,"Name")
DatabaseTests.cs (788) : };
DatabaseTests.cs (789) : Database daBase = new Database("Test", "123");
DatabaseTests.cs (790) : daBase.CreateTable("Person", columns);
DatabaseTests.cs (792) : //insert data in the table
DatabaseTests.cs (793) : daBase.Insert("Person", new List<string> { "72858695", "Markel" });
DatabaseTests.cs (794) : daBase.Insert("Person", new List<string> { "72858456F", "Joseba" });
DatabaseTests.cs (796) : Condition markelCondition = new Condition("Age", "=", "72858695");
DatabaseTests.cs (797) : //try to delete with the condition, but that column not exist
DatabaseTests.cs (798) : bool result = daBase.DeleteWhere("Person", markelCondition);
DatabaseTests.cs (799) : Assert.False(result);
DatabaseTests.cs (800) : Assert.Equal(Constants.ColumnDoesNotExistError, daBase.LastErrorMessage);
DatabaseTests.cs (801) : }
DatabaseTests.cs (803) : [Fact]
DatabaseTests.cs (804) : public void Test_Update_Succesfull()
DatabaseTests.cs (805) : {
DatabaseTests.cs (806) : //create the database
DatabaseTests.cs (807) : string nameTable = "Person";
DatabaseTests.cs (808) : List<ColumnDefinition> columns = new List<ColumnDefinition>
DatabaseTests.cs (809) : {
DatabaseTests.cs (810) : new ColumnDefinition(ColumnDefinition.DataType.Int,"ID"),
DatabaseTests.cs (811) : new ColumnDefinition(ColumnDefinition.DataType.String,"Name")
DatabaseTests.cs (813) : };
DatabaseTests.cs (814) : Database daBase = new Database("Test", "123");
DatabaseTests.cs (815) : daBase.CreateTable(nameTable, columns);
DatabaseTests.cs (817) : //insert data in the table
DatabaseTests.cs (818) : daBase.Insert("Person", new List<string> { "72858695", "Joseba" });
DatabaseTests.cs (819) : daBase.Insert("Person", new List<string> { "72858456", "Markel" });
DatabaseTests.cs (820) : //create the condition:
DatabaseTests.cs (821) : Condition markelCondition = new Condition("Name", "=", "Markel");
DatabaseTests.cs (822) : //values we want to update un our daBase
DatabaseTests.cs (823) : List<SetValue> newValue = new List<SetValue>
DatabaseTests.cs (824) : {
DatabaseTests.cs (825) : new SetValue("ID", "555555")
DatabaseTests.cs (826) : };
DatabaseTests.cs (827) : //do the update with the new values in the table we want with markelcondition
DatabaseTests.cs (828) : bool result = daBase.Update(nameTable, newValue, markelCondition);
DatabaseTests.cs (829) : Assert.True(result);
DatabaseTests.cs (831) : //verify that the firs row (the one we update) has the new values
DatabaseTests.cs (832) : Row updatedRow = daBase.TableByName(nameTable).GetRow(1);
DatabaseTests.cs (833) : Assert.Equal("555555", updatedRow.GetValue("ID"));
DatabaseTests.cs (834) : }
DatabaseTests.cs (835) : [Fact]
DatabaseTests.cs (836) : public void Test_Update_TableNotExist()
DatabaseTests.cs (837) : {
DatabaseTests.cs (838) : //create the database
DatabaseTests.cs (839) : string nameTable = "Person";
DatabaseTests.cs (840) : List<ColumnDefinition> columns = new List<ColumnDefinition>
DatabaseTests.cs (841) : {
DatabaseTests.cs (842) : new ColumnDefinition(ColumnDefinition.DataType.Int,"ID"),
DatabaseTests.cs (843) : new ColumnDefinition(ColumnDefinition.DataType.String,"Name")
DatabaseTests.cs (845) : };
DatabaseTests.cs (846) : Database daBase = new Database("Test", "123");
DatabaseTests.cs (847) : daBase.CreateTable(nameTable, columns);
DatabaseTests.cs (849) : //insert data in the table
DatabaseTests.cs (850) : daBase.Insert("Person", new List<string> { "72858695", "Joseba" });
DatabaseTests.cs (851) : daBase.Insert("Person", new List<string> { "72858456", "Markel" });
DatabaseTests.cs (852) : //creation of a table that there is not in the daBase and do not exist
DatabaseTests.cs (853) : string tableOutOfdaBase = "AGE";
DatabaseTests.cs (855) : //values we want to update un our daBase
DatabaseTests.cs (856) : List<SetValue> newValue = new List<SetValue>
DatabaseTests.cs (857) : {
DatabaseTests.cs (858) : new SetValue("ID", "555555")
DatabaseTests.cs (859) : };
DatabaseTests.cs (861) : //create the condition:
DatabaseTests.cs (862) : Condition markelCondition = new Condition("Name", "=", "Markel");
DatabaseTests.cs (863) : //try to update an inexistent table of our daBase
DatabaseTests.cs (864) : bool result = daBase.Update(tableOutOfdaBase, newValue, markelCondition);
DatabaseTests.cs (865) : Assert.False(result);
DatabaseTests.cs (866) : Assert.Equal(Constants.TableDoesNotExistError, daBase.LastErrorMessage);
DatabaseTests.cs (867) : }
DatabaseTests.cs (868) : [Fact]
DatabaseTests.cs (869) : public void Test_Update_ColumnNotExist()
DatabaseTests.cs (870) : {
DatabaseTests.cs (871) : //create the database
DatabaseTests.cs (872) : string nameTable = "Person";
DatabaseTests.cs (873) : List<ColumnDefinition> columns = new List<ColumnDefinition>
DatabaseTests.cs (874) : {
DatabaseTests.cs (875) : new ColumnDefinition(ColumnDefinition.DataType.Int,"ID"),
DatabaseTests.cs (876) : new ColumnDefinition(ColumnDefinition.DataType.String,"Name")
DatabaseTests.cs (878) : };
DatabaseTests.cs (879) : Database daBase = new Database("Test", "123");
DatabaseTests.cs (880) : daBase.CreateTable(nameTable, columns);
DatabaseTests.cs (882) : //insert data in the table
DatabaseTests.cs (883) : daBase.Insert("Person", new List<string> { "72858695", "Joseba" });
DatabaseTests.cs (884) : daBase.Insert("Person", new List<string> { "72858456", "Markel" });
DatabaseTests.cs (885) : //create the condition:
DatabaseTests.cs (886) : Condition markelCondition = new Condition("Name", "=", "Markel");
DatabaseTests.cs (887) : //values we want to update un our daBase in a column that not exist
DatabaseTests.cs (888) : List<SetValue> newValue = new List<SetValue>
DatabaseTests.cs (889) : {
DatabaseTests.cs (890) : new SetValue("Age", "555555")
DatabaseTests.cs (891) : };
DatabaseTests.cs (893) : bool result = daBase.Update(nameTable, newValue, markelCondition);
DatabaseTests.cs (894) : Assert.False(result);
DatabaseTests.cs (895) : Assert.Equal(Constants.ColumnDoesNotExistError, daBase.LastErrorMessage);
DatabaseTests.cs (897) : }
DatabaseTests.cs (898) : [Fact]
DatabaseTests.cs (899) : public void Test_Update_NoRowsUpdated()
DatabaseTests.cs (900) : {
DatabaseTests.cs (901) : //create the database
DatabaseTests.cs (902) : string nameTable = "Person";
DatabaseTests.cs (903) : List<ColumnDefinition> columns = new List<ColumnDefinition>
DatabaseTests.cs (904) : {
DatabaseTests.cs (905) : new ColumnDefinition(ColumnDefinition.DataType.Int,"ID"),
DatabaseTests.cs (906) : new ColumnDefinition(ColumnDefinition.DataType.String,"Name")
DatabaseTests.cs (908) : };
DatabaseTests.cs (909) : Database daBase = new Database("Test", "123");
DatabaseTests.cs (910) : daBase.CreateTable(nameTable, columns);
DatabaseTests.cs (912) : //insert data in the table
DatabaseTests.cs (913) : daBase.Insert("Person", new List<string> { "72858695", "Joseba" });
DatabaseTests.cs (914) : daBase.Insert("Person", new List<string> { "72858456", "Markel" });
DatabaseTests.cs (915) : //creation of a condition with a column that not exist
DatabaseTests.cs (916) : Condition peioCondition = new Condition("ID", "=", "55555555");
DatabaseTests.cs (917) : //values we want to update un our daBase in a column that not exist
DatabaseTests.cs (918) : List<SetValue> newValue = new List<SetValue>
DatabaseTests.cs (919) : {
DatabaseTests.cs (920) : new SetValue("Name", "Juan")
DatabaseTests.cs (921) : };
DatabaseTests.cs (922) : bool result = daBase.Update(nameTable, newValue, peioCondition);
DatabaseTests.cs (923) : Assert.False(result);
DatabaseTests.cs (924) : Assert.Equal(Constants.Error, daBase.LastErrorMessage);
DatabaseTests.cs (925) : }
RowTests.cs (3) : using DbManager.Parser;
RowTests.cs (12) : public void TestSetAndGetValue()
RowTests.cs (14) : //Case 1: The columnDefinition doesn't exist
RowTests.cs (16) : List<ColumnDefinition> columns1 = new List<ColumnDefinition>()
RowTests.cs (24) : Row row = new Row(columns1, values);
RowTests.cs (26) : int ind = columns1.FindIndex(x => x.Name == "Estado civil");
RowTests.cs (28) : Assert.Equal(-1, ind);
RowTests.cs (31) : //Case 2: Index of the columnDefinition is over the Values.Count
RowTests.cs (33) : //Subcase a: there ara many columns without values, so the SetValue add automatically nulls
RowTests.cs (35) : List<ColumnDefinition> columns2_a = new List<ColumnDefinition>()
RowTests.cs (36) : {
RowTests.cs (37) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
RowTests.cs (38) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Surname"),
RowTests.cs (39) : new ColumnDefinition(ColumnDefinition.DataType.String, "Age"),
RowTests.cs (40) : new ColumnDefinition(ColumnDefinition.DataType.String, "Gender"),
RowTests.cs (41) : new ColumnDefinition(ColumnDefinition.DataType.String, "NIF")
RowTests.cs (42) : };
RowTests.cs (44) : List<string> values2_a = new List<string>() { "Ramiro", "27", null };
RowTests.cs (45) : Row row2_a = new Row(columns2_a, values2_a);
RowTests.cs (47) : row2_a.SetValue("NIF", "23456");
RowTests.cs (49) : Assert.Equal("23456", row2_a.GetValue("NIF"));
RowTests.cs (50) : Assert.Equal(5, columns2_a.Count);
RowTests.cs (51) : Assert.Equal(5, values2_a.Count);
RowTests.cs (54) : //Sub case b: the column to set is just the next of the last
RowTests.cs (56) : List<ColumnDefinition> columns2_b = new List<ColumnDefinition>()
RowTests.cs (57) : {
RowTests.cs (58) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
RowTests.cs (59) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
RowTests.cs (60) : new ColumnDefinition(ColumnDefinition.DataType.String, "NIF")
RowTests.cs (61) : };
RowTests.cs (63) : List<string> values2_b = new List<string>() { "Ramiro", "27" };
RowTests.cs (64) : Row row2_b = new Row(columns2_b, values2_b);
RowTests.cs (66) : row2_b.SetValue("NIF", "23456");
RowTests.cs (67) : Assert.Equal("23456", row2_a.GetValue("NIF"));
RowTests.cs (68) : Assert.Equal(3, columns2_b.Count);
RowTests.cs (69) : Assert.Equal(3, values2_b.Count);
RowTests.cs (72) : //Cae 3: All things correct
RowTests.cs (73) : List<ColumnDefinition> columns3 = new List<ColumnDefinition>()
RowTests.cs (74) : {
RowTests.cs (75) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
RowTests.cs (76) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Surname"),
RowTests.cs (77) : new ColumnDefinition(ColumnDefinition.DataType.String, "Age"),
RowTests.cs (78) : new ColumnDefinition(ColumnDefinition.DataType.String, "Gender"),
RowTests.cs (79) : new ColumnDefinition(ColumnDefinition.DataType.String, "NIF")
RowTests.cs (80) : };
RowTests.cs (82) : List<string> values3 = new List<string>() { "Ramiro", "27", null, "Male" };
RowTests.cs (84) : Row row3 = new Row(columns3, values3);
RowTests.cs (86) : row3.SetValue("Gender", "Female");
RowTests.cs (88) : Assert.Equal("Female", row3.GetValue("Gender"));
RowTests.cs (89) : Assert.Equal(5, columns3.Count);
RowTests.cs (90) : Assert.Equal(4, values3.Count);
TableTests.cs (19) : [Fact]
TableTests.cs (22) : //Caso 1: GetRow devuelve null si no hay filas
TableTests.cs (23) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (24) : {
TableTests.cs (25) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (26) : new ColumnDefinition(ColumnDefinition.DataType.String, "Surname"),
TableTests.cs (27) : new ColumnDefinition(ColumnDefinition.DataType.String, "NIF")
TableTests.cs (28) : };
TableTests.cs (30) : Table table2 = new Table("Persons", columns);
TableTests.cs (31) : Assert.Null(table2.GetRow(0));
TableTests.cs (34) : //Caso 2: GetRow devuelve la fila a�adida correctamente
TableTests.cs (35) : List<string> rowValues = new List<string> { "Joseba", "Aperribay", "59889594G" };
TableTests.cs (36) : Row row = new Row(columns, rowValues);
TableTests.cs (37) : table2.AddRow(row);
TableTests.cs (38) : Assert.Equal(row, table2.GetRow(0));
TableTests.cs (39) : Assert.Null(table2.GetRow(1));
TableTests.cs (94) : public void TestNumRows()
TableTests.cs (96) : //Caso 1: Tabla reci�n creada, filas = 0
TableTests.cs (97) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (98) : {
TableTests.cs (99) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (100) : new ColumnDefinition(ColumnDefinition.DataType.String, "Surname"),
TableTests.cs (101) : new ColumnDefinition(ColumnDefinition.DataType.String, "NIF")
TableTests.cs (102) : };
TableTests.cs (103) : Table table = new Table("Persons", columns);
TableTests.cs (104) : Assert.Equal(0, table.NumRows());
TableTests.cs (106) : //Caso 2: Despu�s de a�adir filas
TableTests.cs (107) : table.AddRow(new Row(columns, new List<string> { "Iker", "Hervella", "59666994G" }));
TableTests.cs (108) : table.AddRow(new Row(columns, new List<string> { "Peio", "Echezarraga", "78225634L" }));
TableTests.cs (109) : Assert.Equal(2, table.NumRows());
TableTests.cs (113) : public void TestNumColumns()
TableTests.cs (115) : //Caso 1: ColumnDefinitions es null
TableTests.cs (116) : Table tableWithNullColumns = new Table("TableNull", null);
TableTests.cs (117) : Assert.Equal(-1, tableWithNullColumns.NumColumns());
TableTests.cs (119) : //Caso 2: ColumnDefinitions tiene columnas
TableTests.cs (120) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (121) : {
TableTests.cs (122) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (123) : new ColumnDefinition(ColumnDefinition.DataType.String, "Surname"),
TableTests.cs (124) : new ColumnDefinition(ColumnDefinition.DataType.String, "NIF")
TableTests.cs (125) : };
TableTests.cs (126) : Table table = new Table("Table", columns);
TableTests.cs (127) : Assert.Equal(3, table.NumColumns());
TableTests.cs (131) : public void TestGetColumn()
TableTests.cs (133) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (134) : {
TableTests.cs (135) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (136) : new ColumnDefinition(ColumnDefinition.DataType.String, "Surname"),
TableTests.cs (137) : new ColumnDefinition(ColumnDefinition.DataType.String, "NIF")
TableTests.cs (138) : };
TableTests.cs (139) : Table table = new Table("Table", columns);
TableTests.cs (141) : //Caso 1: Obtener columnas existentes
TableTests.cs (142) : Assert.Equal("Name", table.GetColumn(0).Name);
TableTests.cs (143) : Assert.Equal("Surname", table.GetColumn(1).Name);
TableTests.cs (144) : Assert.Equal("NIF", table.GetColumn(2).Name);
TableTests.cs (146) : //Caso 2: �ndice fuera de rango
TableTests.cs (147) : Assert.Null(table.GetColumn(3));
TableTests.cs (151) : public void TestColumnByName()
TableTests.cs (152) : {
TableTests.cs (153) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (154) : {
TableTests.cs (155) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (156) : new ColumnDefinition(ColumnDefinition.DataType.String, "Surname")
TableTests.cs (157) : };
TableTests.cs (158) : Table table = new Table("Table", columns);
TableTests.cs (160) : //Caso 1: Columna existente
TableTests.cs (161) : Assert.NotNull(table.ColumnByName("Name"));
TableTests.cs (163) : //Caso 2: Columna no existente
TableTests.cs (164) : Assert.Null(table.ColumnByName("Age"));
TableTests.cs (165) : }
TableTests.cs (167) : [Fact]
TableTests.cs (170) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (171) : {
TableTests.cs (172) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (173) : new ColumnDefinition(ColumnDefinition.DataType.String, "Surname")
TableTests.cs (174) : };
TableTests.cs (175) : Table table = new Table("Table", columns);
TableTests.cs (177) : //Caso 1: Columna existente
TableTests.cs (180) : //Caso 2: Columna no existente
TableTests.cs (181) : Assert.Equal(-1, table.ColumnIndexByName("NonexistentColumn"));
TableTests.cs (184) : public void TestDeleteIthRow()
TableTests.cs (186) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (187) : {
TableTests.cs (188) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (189) : new ColumnDefinition(ColumnDefinition.DataType.String, "Surname")
TableTests.cs (190) : };
TableTests.cs (191) : Table table = new Table("Table", columns);
TableTests.cs (192) : table.AddRow(new Row(columns, new List<string> { "Joseba", "Aperribay" }));
TableTests.cs (193) : table.AddRow(new Row(columns, new List<string> { "Peio", "Echezarraga" }));
TableTests.cs (195) : //Caso 1: Eliminar una fila existente
TableTests.cs (197) : Assert.Equal(1, table.NumRows());
TableTests.cs (198) : Assert.Equal("Peio", table.GetRow(0).GetValue("Name"));
TableTests.cs (200) : //Caso 2: Intentar eliminar fila inexistente (fuera de rango)
TableTests.cs (201) : table.DeleteIthRow(5);
TableTests.cs (202) : Assert.Equal(1, table.NumRows());
TableTests.cs (206) : public void TestDeleteWhere()
TableTests.cs (208) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (209) : {
TableTests.cs (210) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (211) : new ColumnDefinition(ColumnDefinition.DataType.String, "Surname")
TableTests.cs (212) : };
TableTests.cs (213) : Table table = new Table("Table", columns);
TableTests.cs (214) : table.Insert(new List<string> { "Joseba", "Aperribay" });
TableTests.cs (215) : table.Insert(new List<string> { "Peio", "Echezarraga" });
TableTests.cs (216) : table.Insert(new List<string> { "Joseba", "Garcia" });
TableTests.cs (218) : //Caso 1: Condici�n coincide con m�ltiples filas
TableTests.cs (219) : Condition conditionJoseba = new Condition("Name", "=", "Joseba");
TableTests.cs (220) : table.DeleteWhere(conditionJoseba);
TableTests.cs (221) : Assert.Equal(1, table.NumRows());
TableTests.cs (222) : Assert.Equal("Peio", table.GetRow(0).GetValue("Name"));
TableTests.cs (224) : //Caso 2: Condici�n no coincide con ninguna fila
TableTests.cs (225) : Condition conditionNoMatch = new Condition("Name", "=", "NoExist");
TableTests.cs (226) : table.DeleteWhere(conditionNoMatch);
TableTests.cs (227) : Assert.Equal(1, table.NumRows());
TableTests.cs (230) : [Fact]
TableTests.cs (231) : public void TestInsert()
TableTests.cs (232) : {
TableTests.cs (233) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (234) : {
TableTests.cs (235) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (236) : new ColumnDefinition(ColumnDefinition.DataType.String, "Surname")
TableTests.cs (237) : };
TableTests.cs (238) : Table table = new Table("Table", columns);
TableTests.cs (240) : //Caso 1: Insert v�lido
TableTests.cs (241) : List<string> validValues = new List<string> { "Iker", "Hervella" };
TableTests.cs (242) : Assert.True(table.Insert(validValues));
TableTests.cs (243) : Assert.Equal(1, table.NumRows());
TableTests.cs (245) : //Caso 2: Insert inv�lido por n�mero de valores
TableTests.cs (246) : List<string> invalidValues = new List<string> { "Iker" };
TableTests.cs (247) : Assert.False(table.Insert(invalidValues));
TableTests.cs (248) : Assert.Equal(1, table.NumRows()); // No cambia
TableTests.cs (250) : //Caso 3: Insert con lista de valores vac�a
TableTests.cs (251) : List<string> emptyValues = new List<string>();
TableTests.cs (252) : Assert.False(table.Insert(emptyValues));
TableTests.cs (253) : Assert.Equal(1, table.NumRows()); // No cambia
TableTests.cs (254) : }
TableTests.cs (256) : [Fact]
TableTests.cs (257) : public void TestUpdate()
TableTests.cs (258) : {
TableTests.cs (259) : //Arrange
TableTests.cs (260) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (261) : {
TableTests.cs (262) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (263) : new ColumnDefinition(ColumnDefinition.DataType.String, "Surname")
TableTests.cs (264) : };
TableTests.cs (266) : Table table = new Table("People", columns);
TableTests.cs (267) : table.Insert(new List<string> { "Peio", "Echezarraga" });
TableTests.cs (268) : table.Insert(new List<string> { "Joseba", "Aperribay" });
TableTests.cs (271) : //Caso 1: Actualizaci�n v�lida con condici�n que s� coincide
TableTests.cs (273) : Condition conditionPeio = new Condition("Name", "=", "Peio");
TableTests.cs (274) : List<SetValue> updates = new List<SetValue> { new SetValue("Surname", "Garcia") };
TableTests.cs (276) : bool result = table.Update(updates, conditionPeio);
TableTests.cs (278) : Assert.True(result);
TableTests.cs (279) : Assert.Equal("Garcia", table.GetRow(0).GetValue("Surname"));
TableTests.cs (282) : //Caso 2
TableTests.cs (284) : //Caso 2a: Condici�n que no coincide con ninguna fila
TableTests.cs (286) : Condition conditionNoMatch = new Condition("Name", "=", "NonExistent");
TableTests.cs (287) : bool noMatchResult = table.Update(updates, conditionNoMatch);
TableTests.cs (289) : Assert.False(noMatchResult);
TableTests.cs (293) : //Caso 2b: Condici�n nula , debe devolver false
TableTests.cs (295) : bool nullConditionResult = table.Update(updates, null);
TableTests.cs (297) : Assert.False(nullConditionResult);
TableTests.cs (301) : //Caso 2c: setValues es null , debe devolver false
TableTests.cs (303) : Condition validCondition = new Condition("Name", "=", "Joseba");
TableTests.cs (304) : bool nullSetValuesResult = table.Update(null, validCondition);
TableTests.cs (306) : Assert.False(nullSetValuesResult);
TableTests.cs (310) : //Caso 2d: setValues vac�o . debe devolver false
TableTests.cs (312) : List<SetValue> emptySetValues = new List<SetValue>();
TableTests.cs (313) : bool emptySetValuesResult = table.Update(emptySetValues, validCondition);
TableTests.cs (315) : Assert.False(emptySetValuesResult);
TableTests.cs (316) : }
TableTests.cs (319) : [Fact]
TableTests.cs (320) : public void TestSelect1()
TableTests.cs (321) : {
TableTests.cs (322) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (323) : {
TableTests.cs (324) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (325) : new ColumnDefinition(ColumnDefinition.DataType.String, "Surname"),
TableTests.cs (326) : new ColumnDefinition(ColumnDefinition.DataType.String, "NIF")
TableTests.cs (327) : };
TableTests.cs (329) : Table table = new Table("Table", columns);
TableTests.cs (331) : table.Insert(new List<string> { "Joseba", "Aperribay", "123" });
TableTests.cs (332) : table.Insert(new List<string> { "Iker", "Hervella", "456" });
TableTests.cs (334) : //Caso 1: Select con condici�n null, columnas espec�ficas
TableTests.cs (336) : List<string> selectColumns = new List<string> { "Surname", "Name" };
TableTests.cs (337) : Table selectedTable = table.Select(selectColumns, null);
TableTests.cs (338) : Assert.Equal(2, selectedTable.NumRows());
TableTests.cs (339) : Assert.Equal("Surname", selectedTable.GetColumn(0).Name);
TableTests.cs (340) : Assert.Equal("Aperribay", selectedTable.GetRow(0).GetValue("Surname"));
TableTests.cs (341) : Assert.Equal("Name", selectedTable.GetColumn(1).Name);
TableTests.cs (342) : Assert.Equal("Joseba", selectedTable.GetRow(0).GetValue("Name"));
TableTests.cs (345) : //Caso 2: Select con condici�n que coincide con filas
TableTests.cs (347) : Condition conditionIker = new Condition("Name", "=", "Iker");
TableTests.cs (348) : selectedTable = table.Select(selectColumns, conditionIker);
TableTests.cs (349) : Assert.Equal(1, selectedTable.NumRows());
TableTests.cs (350) : Assert.Equal("Hervella", selectedTable.GetRow(0).GetValue("Surname"));
TableTests.cs (353) : //Caso 3: Select con condici�n que no coincide
TableTests.cs (355) : Condition conditionNoMatch = new Condition("Name", "=", "NonExistent");
TableTests.cs (356) : selectedTable = table.Select(selectColumns, conditionNoMatch);
TableTests.cs (357) : Assert.Equal(0, selectedTable.NumRows());
TableTests.cs (360) : //Caso 4: Select con columna inexistente deber�a devolver tabla vacia, pruebo directamente
TableTests.cs (362) : List<string> invalidSelectColumns = new List<string> { "NoExiste" };
TableTests.cs (363) : Assert.NotNull(table.Select(invalidSelectColumns, null));
TableTests.cs (364) : Assert.Equal("ResultVacia", table.Select(invalidSelectColumns, null).Name);
TableTests.cs (365) : Assert.Equal("", table.Select(invalidSelectColumns, null).ToString());
TableTests.cs (368) : //Caso 5: Select sin especificar columnas (lista vac�a) debe devolver todas las columnas
TableTests.cs (370) : Table allColumnsTable = table.Select(new List<string>(), null);
TableTests.cs (371) : Assert.Equal(3, allColumnsTable.NumColumns());
TableTests.cs (372) : }
TableTests.cs (374) : [Fact]
TableTests.cs (375) : public void TestSelect2()
TableTests.cs (376) : {
TableTests.cs (377) : // Definimos columnas con distintos tipos de dato
TableTests.cs (378) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (379) : {
TableTests.cs (380) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (381) : new ColumnDefinition(ColumnDefinition.DataType.String, "Surname"),
TableTests.cs (382) : new ColumnDefinition(ColumnDefinition.DataType.String, "NIF"),
TableTests.cs (383) : new ColumnDefinition(ColumnDefinition.DataType.String, "Email"),
TableTests.cs (384) : new ColumnDefinition(ColumnDefinition.DataType.Int, "Age"),
TableTests.cs (385) : new ColumnDefinition(ColumnDefinition.DataType.Double, "Height")
TableTests.cs (386) : };
TableTests.cs (388) : Table table = new Table("People", columns);
TableTests.cs (390) : // Insertamos 4 filas
TableTests.cs (391) : table.Insert(new List<string> { "Joseba", "Aperribay", "123", "joseba@mail.com", "25", "1.80" });
TableTests.cs (392) : table.Insert(new List<string> { "Iker", "Hervella", "456", "iker@mail.com", "27", "1.75" });
TableTests.cs (393) : table.Insert(new List<string> { "Peio", "Echezarraga", "789", "peio@mail.com", "32", "1.72" });
TableTests.cs (394) : table.Insert(new List<string> { "Joseba", "Garcia", "999", "otro@mail.com", "28", "1.81" });
TableTests.cs (396) : // Caso 1: Select con condici�n null y columnas espec�ficas desordenadas
TableTests.cs (398) : List<string> selectColumns = new List<string> { "NIF", "Name", "Age" };
TableTests.cs (399) : Table result1 = table.Select(selectColumns, null);
TableTests.cs (401) : Assert.NotNull(result1);
TableTests.cs (402) : Assert.Equal(4, result1.NumRows());
TableTests.cs (403) : Assert.Equal(3, result1.NumColumns());
TableTests.cs (405) : Assert.Equal("NIF", result1.GetColumn(0).Name);
TableTests.cs (406) : Assert.Equal("Name", result1.GetColumn(1).Name);
TableTests.cs (407) : Assert.Equal("Age", result1.GetColumn(2).Name);
TableTests.cs (409) : Assert.Equal("123", result1.GetRow(0).GetValue("NIF"));
TableTests.cs (410) : Assert.Equal("Joseba", result1.GetRow(0).GetValue("Name"));
TableTests.cs (411) : Assert.Equal("25", result1.GetRow(0).GetValue("Age"));
TableTests.cs (413) : Assert.Equal("456", result1.GetRow(1).GetValue("NIF"));
TableTests.cs (414) : Assert.Equal("Iker", result1.GetRow(1).GetValue("Name"));
TableTests.cs (415) : Assert.Equal("27", result1.GetRow(1).GetValue("Age"));
TableTests.cs (417) : Assert.Equal("789", result1.GetRow(2).GetValue("NIF"));
TableTests.cs (418) : Assert.Equal("Peio", result1.GetRow(2).GetValue("Name"));
TableTests.cs (419) : Assert.Equal("32", result1.GetRow(2).GetValue("Age"));
TableTests.cs (421) : Assert.Equal("999", result1.GetRow(3).GetValue("NIF"));
TableTests.cs (422) : Assert.Equal("Joseba", result1.GetRow(3).GetValue("Name"));
TableTests.cs (423) : Assert.Equal("28", result1.GetRow(3).GetValue("Age"));
TableTests.cs (426) : // Caso 2: Select con condici�n que filtra 1 fila
TableTests.cs (428) : Condition conditionIker = new Condition("Name", "=", "Iker");
TableTests.cs (429) : Table result2 = table.Select(selectColumns, conditionIker);
TableTests.cs (430) : Assert.NotNull(result2);
TableTests.cs (431) : Assert.Equal(1, result2.NumRows());
TableTests.cs (432) : Assert.Equal("456", result2.GetRow(0).GetValue("NIF"));
TableTests.cs (433) : Assert.Equal("Iker", result2.GetRow(0).GetValue("Name"));
TableTests.cs (434) : Assert.Equal("27", result2.GetRow(0).GetValue("Age"));
TableTests.cs (437) : // Caso 3: Select con condici�n que no filtra nada
TableTests.cs (439) : Condition conditionNoMatch = new Condition("Surname", "=", "NoExiste");
TableTests.cs (440) : Table result3 = table.Select(selectColumns, conditionNoMatch);
TableTests.cs (441) : Assert.NotNull(result3);
TableTests.cs (442) : Assert.Equal(0, result3.NumRows());
TableTests.cs (445) : // Caso 4: Select con columna inexistente
TableTests.cs (447) : List<string> invalidColumns = new List<string> { "DoesNotExist" };
TableTests.cs (448) : Table result4 = table.Select(invalidColumns, null);
TableTests.cs (449) : Assert.NotNull(result4); // Debe devolver tabl vacia
TableTests.cs (450) : Assert.Equal("ResultVacia", result4.Name);
TableTests.cs (451) : Assert.Equal(0,result4.NumRows());
TableTests.cs (452) : Assert.Equal(0, result4.NumColumns());
TableTests.cs (453) : Assert.Equal("", result4.ToString());
TableTests.cs (455) : // Caso 5: Select sin columnas (todas)
TableTests.cs (457) : Table result5 = table.Select(new List<string>(), null);
TableTests.cs (458) : Assert.NotNull(result5);
TableTests.cs (459) : Assert.Equal(4, result5.NumRows());
TableTests.cs (460) : Assert.Equal(6, result5.NumColumns());
TableTests.cs (462) : Assert.Equal("Name", result5.GetColumn(0).Name);
TableTests.cs (463) : Assert.Equal("Surname", result5.GetColumn(1).Name);
TableTests.cs (464) : Assert.Equal("NIF", result5.GetColumn(2).Name);
TableTests.cs (465) : Assert.Equal("Email", result5.GetColumn(3).Name);
TableTests.cs (466) : Assert.Equal("Age", result5.GetColumn(4).Name);
TableTests.cs (467) : Assert.Equal("Height", result5.GetColumn(5).Name);
TableTests.cs (469) : Assert.Equal("Joseba", result5.GetRow(0).GetValue("Name"));
TableTests.cs (470) : Assert.Equal("25", result5.GetRow(0).GetValue("Age"));
TableTests.cs (471) : Assert.Equal("1.80", result5.GetRow(0).GetValue("Height"));
TableTests.cs (472) : }
TableTests.cs (598) : public void TestToString()
TableTests.cs (600) : //Caso 1: Tabla sin columnas
TableTests.cs (601) : Table emptyTable = new Table("EmptyTable", new List<ColumnDefinition>());
TableTests.cs (602) : Assert.Equal("", emptyTable.ToString());
TableTests.cs (604) : //Caso 2: Tabla con columnas pero sin filas
TableTests.cs (605) : List<ColumnDefinition> columns = new List<ColumnDefinition>
TableTests.cs (606) : {
TableTests.cs (607) : new ColumnDefinition(ColumnDefinition.DataType.String, "Name"),
TableTests.cs (608) : new ColumnDefinition(ColumnDefinition.DataType.String, "Surname")
TableTests.cs (609) : };
TableTests.cs (610) : Table tableWithColumns = new Table("TableWithColumns", columns);
TableTests.cs (611) : Assert.Equal("['Name','Surname']", tableWithColumns.ToString());
TableTests.cs (613) : //Caso 3: Tabla con columnas y filas
TableTests.cs (614) : tableWithColumns.Insert(new List<string> { "Joseba", "Aperribay" });
TableTests.cs (615) : tableWithColumns.Insert(new List<string> { "Iker", "Hervella" });
TableTests.cs (616) : Assert.Equal("['Name','Surname']{'Joseba','Aperribay'}{'Iker','Hervella'}", tableWithColumns.ToString());
TableTests.cs (618) : //Caso 4: Tabla con valores null en filas
TableTests.cs (619) : tableWithColumns.Insert(new List<string> { "Peio", null });
TableTests.cs (620) : Assert.Equal("['Name','Surname']{'Joseba','Aperribay'}{'Iker','Hervella'}{'Peio',''}", tableWithColumns.ToString());
