IntArrayList.cs (55) : if (NumElements == Values.Length)
IntArrayList.cs (56) : {
IntArrayList.cs (57) : Resize(Values.Length * 2);
IntArrayList.cs (58) : }
IntArrayList.cs (70) : if (index < 0 || index > NumElements - 1)
IntArrayList.cs (72) : return -1;
IntArrayList.cs (74) : int devolver = Values[index];
IntArrayList.cs (78) : Values[i - 1] = Values[i];
IntArrayList.cs (81) : return devolver;
IntArrayList.cs (90) : NumElements = 0;
IntArrayList.cs (97) : int[] newArray = new int[(newSize)];
IntArrayList.cs (98) : for (int i = 0; i < Values.Length; i++)
IntArrayList.cs (99) : {
IntArrayList.cs (100) : newArray[i] = Values[i];
IntArrayList.cs (101) : }
IntArrayList.cs (102) : Values = newArray;
IntArrayList.cs (108) : for (int i = 0; i < Values.Length; i++)
IntArrayList.cs (109) : {
IntArrayList.cs (110) : yield return Values[i];
IntArrayList.cs (111) : }
IntList.cs (87) : IntListNode newNode = new IntListNode(value);
IntList.cs (90) : if (First == null)
IntList.cs (91) : {
IntList.cs (92) : First = newNode;
IntList.cs (93) : }
IntList.cs (94) : else if (First.Next != null)
IntList.cs (95) : {
IntList.cs (96) : while (node.Next != null)
IntList.cs (119) : return First.Value;
IntList.cs (130) : int devolver = node.Next.Value;
IntList.cs (132) : return devolver;
IntList.cs (142) : int devolver = node.Next.Value;
IntList.cs (144) : return devolver;
IntList.cs (162) : IntListNode node = First;
IntList.cs (164) : if (First != null)
IntList.cs (165) : {
IntList.cs (168) : {
IntList.cs (170) : yield return node.Value;
IntList.cs (171) : node = node.Next;
IntList.cs (173) : }
IntList.cs (174) : }
IntList.cs (175) : else
IntList.cs (176) : {
IntList.cs (178) : }
Stack.cs (7) : List<T> values;
Stack.cs (11) : values=new List<T>();
Stack.cs (17) : return values.ToString();
Stack.cs (24) : return values.Count();
Stack.cs (30) : values.Clear();
Stack.cs (35) : values.Add(value);
Stack.cs (41) : return values.Remove(values.Count()-1);
