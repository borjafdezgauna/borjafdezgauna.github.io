IntArrayList.cs (36) : return NumElements;
IntArrayList.cs (44) : if (index < 0 || index >= Values.Length)
IntArrayList.cs (45) : {
IntArrayList.cs (47) : }
IntArrayList.cs (48) : else
IntArrayList.cs (49) : {
IntArrayList.cs (50) : return Values[index];
IntArrayList.cs (51) : }
IntArrayList.cs (58) : if (NumElements == Values.Length)
IntArrayList.cs (59) : {
IntArrayList.cs (60) : Resize(Values.Length * 2);
IntArrayList.cs (61) : }
IntArrayList.cs (63) : Values[NumElements] = value;
IntArrayList.cs (64) : NumElements++;
IntArrayList.cs (74) : if (index < 0 || index >= NumElements)
IntArrayList.cs (75) : {
IntArrayList.cs (76) : return -1;
IntArrayList.cs (77) : }
IntArrayList.cs (78) : else
IntArrayList.cs (79) : {
IntArrayList.cs (81) : int numDeleted = Values[index];
IntArrayList.cs (82) : for (int i = index; i <= NumElements - 1; i++)
IntArrayList.cs (83) : {
IntArrayList.cs (84) : Values[i] = Values[i + 1];
IntArrayList.cs (85) : }
IntArrayList.cs (87) : NumElements--;
IntArrayList.cs (89) : return numDeleted;
IntArrayList.cs (90) : }
IntArrayList.cs (98) : NumElements = 0;
IntArrayList.cs (104) : int[] news = new int[newSize];
IntArrayList.cs (105) : for (int i = 0; i < NumElements-1; i++)
IntArrayList.cs (106) : {
IntArrayList.cs (107) : news[i] = Values[i];
IntArrayList.cs (108) : }
IntArrayList.cs (109) : Values = news;
IntArrayList.cs (115) : /*foreach(int value in Values)
IntArrayList.cs (116) : {
IntArrayList.cs (117) : yield return value;
IntArrayList.cs (118) : }
IntArrayList.cs (119) : */
IntArrayList.cs (120) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (121) : {
IntArrayList.cs (122) : yield return Values[i];
IntArrayList.cs (123) : }
IntList.cs (42) : int count = 0;
IntList.cs (43) : IntListNode nextnode= First;
IntList.cs (45) : while(nextnode!=null){
IntList.cs (46) : count++;
IntList.cs (47) : nextnode = nextnode.Next;
IntList.cs (48) : }
IntList.cs (49) : return count;
IntList.cs (55) : //TODO #2: return the element on the index-th position. O if the position
IntList.cs (56) : // is out of bounds
IntList.cs (57) : if (index < 0 || index >= Count())
IntList.cs (58) : /*the index can`t be lower than 0 and also,
IntList.cs (59) : when we used Count() we are going to have the number of elements and if we have 10 numbers
IntList.cs (60) : the index maximun is gonna be 9----> between 0 and 9 =10 numbers*/
IntList.cs (61) : {
IntList.cs (63) : }
IntList.cs (64) : else
IntList.cs (65) : {
IntList.cs (66) : int i = 0; // a variable which I am going to use to move
IntList.cs (67) : IntListNode nextnode = First; //auxiliar
IntList.cs (68) : while (i<index)
IntList.cs (69) : {
IntList.cs (70) : i++;
IntList.cs (71) : nextnode = nextnode.Next;//goes to the next node
IntList.cs (72) : }
IntList.cs (74) : return nextnode.Value;
IntList.cs (75) : }
IntList.cs (83) : IntListNode newnode = new IntListNode(value);//new node created with the value
IntList.cs (84) : if (First == null)
IntList.cs (85) : {
IntList.cs (86) : First = newnode;//we add the value in the first node
IntList.cs (87) : }
IntList.cs (88) : else
IntList.cs (89) : {
IntList.cs (90) : IntListNode nextnode = First;//auxiliar
IntList.cs (91) : while (nextnode.Next != null)
IntList.cs (92) : /* we don`t have to add when we have null
IntList.cs (93) : we need to have a number and add the value in the end of that one
IntList.cs (94) : */
IntList.cs (95) : {
IntList.cs (96) : nextnode = nextnode.Next;
IntList.cs (97) : }
IntList.cs (98) : nextnode.Next = newnode;
IntList.cs (100) : }
IntList.cs (109) : if (index < 0 || index >= Count())
IntList.cs (110) : {
IntList.cs (111) : return -1;
IntList.cs (112) : }
IntList.cs (113) : else if (index == 0)
IntList.cs (114) : {
IntList.cs (115) : int deleted = First.Value;
IntList.cs (116) : First = First.Next;// new value in first, it could be null or other number
IntList.cs (117) : return deleted;
IntList.cs (118) : }
IntList.cs (119) : else
IntList.cs (120) : {
IntList.cs (121) : IntListNode nextnode = First;//auxiliar
IntList.cs (122) : for (int i = 0; i < index - 1; i++)// we have to know which value we are gonna remove
IntList.cs (123) : {
IntList.cs (124) : nextnode = nextnode.Next;
IntList.cs (126) : }
IntList.cs (127) : int deleted = nextnode.Next.Value;//value of the deleted number
IntList.cs (128) : nextnode.Next = nextnode.Next.Next;//we jump de deleted number
IntList.cs (129) : return deleted;
IntList.cs (130) : }
IntList.cs (138) : First = null;
IntList.cs (145) : IntListNode nextnode = First;
IntList.cs (146) : while (nextnode != null)
IntList.cs (147) : {
IntList.cs (149) : yield return nextnode.Value;
IntList.cs (150) : nextnode = nextnode.Next;
IntList.cs (151) : }
ArrayList.cs (34) : return NumElements;
ArrayList.cs (41) : if (index < 0 || index >= NumElements)
ArrayList.cs (42) : {
ArrayList.cs (44) : }
ArrayList.cs (45) : else
ArrayList.cs (46) : {
ArrayList.cs (47) : return Values[index];
ArrayList.cs (48) : }
ArrayList.cs (57) : if (Values.Length == NumElements)
ArrayList.cs (58) : {
ArrayList.cs (59) : Resize(Values.Length * 2);
ArrayList.cs (60) : }
ArrayList.cs (61) : Values[NumElements] = value;
ArrayList.cs (62) : NumElements++;
ArrayList.cs (74) : if (index < 0 || index >= NumElements)
ArrayList.cs (75) : {
ArrayList.cs (77) : }
ArrayList.cs (78) : else
ArrayList.cs (79) : {
ArrayList.cs (80) : T value = Values[index];
ArrayList.cs (81) : for (int i = index; i <= NumElements - 1; i++)
ArrayList.cs (82) : {
ArrayList.cs (83) : Values[i] = Values[i + 1];
ArrayList.cs (84) : }
ArrayList.cs (85) : NumElements--;
ArrayList.cs (86) : return value;
ArrayList.cs (87) : }
ArrayList.cs (94) : NumElements = 0;
ArrayList.cs (102) : T[] newS = new T[newSize];
ArrayList.cs (103) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (104) : {
ArrayList.cs (105) : newS[i] = Values[i];
ArrayList.cs (106) : }
ArrayList.cs (107) : Values = newS;
ArrayList.cs (113) : int i = 0;
ArrayList.cs (114) : while (i == NumElements - 1) {
ArrayList.cs (115) : i++;
ArrayList.cs (116) : }
ArrayList.cs (117) : yield return Values[i];
List.cs (47) : return m_numItems;
List.cs (54) : if (index < 0 || index >= m_numItems)
List.cs (55) : {
List.cs (57) : }
List.cs (58) : else
List.cs (59) : {
List.cs (60) : ListNode<T> f = First;
List.cs (61) : int i = 0;
List.cs (62) : while (i < index)
List.cs (63) : {
List.cs (64) : f = f.Next;
List.cs (65) : i++;
List.cs (66) : }
List.cs (67) : return f.Value;
List.cs (68) : }
List.cs (75) : ListNode<T> lvalue = new ListNode<T>(value);
List.cs (77) : if (First == null)
List.cs (78) : {
List.cs (79) : First = lvalue;
List.cs (80) : Last = lvalue;
List.cs (81) : m_numItems++;
List.cs (82) : }
List.cs (83) : else
List.cs (84) : {
List.cs (85) : Last.Next = lvalue;
List.cs (86) : Last = lvalue;
List.cs (87) : m_numItems++;
List.cs (88) : }
List.cs (96) : if (index == 0)
List.cs (97) : {
List.cs (98) : ListNode<T> f = First;
List.cs (99) : First = First.Next;
List.cs (100) : m_numItems--;
List.cs (101) : return f.Value;
List.cs (102) : }
List.cs (103) : else if (index < m_numItems)
List.cs (104) : {
List.cs (105) : int i = 0;
List.cs (106) : ListNode<T> value = First;
List.cs (108) : while (i < index - 1)
List.cs (109) : {
List.cs (110) : value = value.Next;
List.cs (111) : i++;
List.cs (112) : }
List.cs (114) : value.Next = value.Next.Next;
List.cs (116) : if (index == m_numItems - 1)
List.cs (117) : {
List.cs (118) : Last = value;
List.cs (119) : }
List.cs (120) : m_numItems--;
List.cs (121) : return value.Value;
List.cs (123) : }
List.cs (124) : else
List.cs (125) : {
List.cs (127) : }
List.cs (134) : m_numItems = 0;
List.cs (135) : First = null;
List.cs (136) : Last = null;
List.cs (143) : ListNode<T> value = First;
List.cs (144) : while (value!=null)
List.cs (145) : {
List.cs (146) : yield return value.Value;
List.cs (147) : value=value.Next;
List.cs (148) : }
List.cs (149) : ;
