IntArrayList.cs (36) : return NumElements;
IntArrayList.cs (44) : if (index < 0 || index >= Values.Length)
IntArrayList.cs (45) : {
IntArrayList.cs (47) : }
IntArrayList.cs (48) : else
IntArrayList.cs (49) : {
IntArrayList.cs (50) : return Values[index];
IntArrayList.cs (51) : }
IntArrayList.cs (58) : if (NumElements == Values.Length)
IntArrayList.cs (59) : {
IntArrayList.cs (60) : Resize(Values.Length * 2);
IntArrayList.cs (61) : }
IntArrayList.cs (63) : Values[NumElements] = value;
IntArrayList.cs (64) : NumElements++;
IntArrayList.cs (74) : if (index < 0 || index >= NumElements)
IntArrayList.cs (75) : {
IntArrayList.cs (76) : return -1;
IntArrayList.cs (77) : }
IntArrayList.cs (78) : else
IntArrayList.cs (79) : {
IntArrayList.cs (81) : int numDeleted = Values[index];
IntArrayList.cs (82) : for (int i = index; i <= NumElements - 1; i++)
IntArrayList.cs (83) : {
IntArrayList.cs (84) : Values[i] = Values[i + 1];
IntArrayList.cs (85) : }
IntArrayList.cs (87) : NumElements--;
IntArrayList.cs (89) : return numDeleted;
IntArrayList.cs (90) : }
IntArrayList.cs (98) : NumElements = 0;
IntArrayList.cs (104) : int[] news = new int[newSize];
IntArrayList.cs (105) : for (int i = 0; i < NumElements-1; i++)
IntArrayList.cs (106) : {
IntArrayList.cs (107) : news[i] = Values[i];
IntArrayList.cs (108) : }
IntArrayList.cs (109) : Values = news;
IntArrayList.cs (115) : /*foreach(int value in Values)
IntArrayList.cs (116) : {
IntArrayList.cs (117) : yield return value;
IntArrayList.cs (118) : }
IntArrayList.cs (119) : */
IntArrayList.cs (120) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (121) : {
IntArrayList.cs (122) : yield return Values[i];
IntArrayList.cs (123) : }
IntList.cs (42) : int count = 0;
IntList.cs (43) : IntListNode nextnode= First;
IntList.cs (45) : while(nextnode!=null)
IntList.cs (46) : {
IntList.cs (47) : count++;
IntList.cs (48) : nextnode = nextnode.Next;
IntList.cs (49) : }
IntList.cs (50) : return count;
IntList.cs (56) : //TODO #2: return the element on the index-th position. O if the position
IntList.cs (57) : // is out of bounds
IntList.cs (58) : if (index < 0 || index >= Count())
IntList.cs (59) : {
IntList.cs (60) : /*the index can`t be lower than 0 and also,
IntList.cs (61) : when we used Count() we are going to have the number of elements and if
IntList.cs (62) : we have 10 numbers
IntList.cs (63) : the index maximun is gonna be 9----> between 0 and 9 =10 numbers*/
IntList.cs (65) : }
IntList.cs (66) : else
IntList.cs (67) : {
IntList.cs (68) : int i = 0; // a variable which I am going to use to move
IntList.cs (69) : IntListNode nextnode = First; //auxiliar
IntList.cs (70) : while (i<index)
IntList.cs (71) : {
IntList.cs (72) : i++;
IntList.cs (73) : nextnode = nextnode.Next;//goes to the next node
IntList.cs (74) : }
IntList.cs (76) : return nextnode.Value;
IntList.cs (77) : }
IntList.cs (85) : IntListNode newnode = new IntListNode(value);//new node created with the value
IntList.cs (86) : if (First == null)
IntList.cs (87) : {
IntList.cs (88) : First = newnode;//we add the value in the first node
IntList.cs (89) : }
IntList.cs (90) : else
IntList.cs (91) : {
IntList.cs (92) : IntListNode nextnode = First;//auxiliar
IntList.cs (93) : while (nextnode.Next != null)
IntList.cs (94) : {
IntList.cs (95) : /* we don`t have to add when we have null
IntList.cs (96) : we need to have a number and add the value in the end of that one*/
IntList.cs (97) : nextnode = nextnode.Next;
IntList.cs (98) : }
IntList.cs (99) : nextnode.Next = newnode;
IntList.cs (101) : }
IntList.cs (110) : if (index < 0 || index >= Count())
IntList.cs (111) : {
IntList.cs (112) : return -1;
IntList.cs (113) : }
IntList.cs (114) : else if (index == 0)
IntList.cs (115) : {
IntList.cs (116) : int deleted = First.Value;
IntList.cs (117) : First = First.Next;// new value in first, it could be null or other number
IntList.cs (118) : return deleted;
IntList.cs (119) : }
IntList.cs (120) : else
IntList.cs (121) : {
IntList.cs (122) : IntListNode nextnode = First;//auxiliar
IntList.cs (123) : for (int i = 0; i < index - 1; i++)// we have to know which value we are gonna remove
IntList.cs (124) : {
IntList.cs (125) : nextnode = nextnode.Next;
IntList.cs (127) : }
IntList.cs (128) : int deleted = nextnode.Next.Value;//value of the deleted number
IntList.cs (129) : nextnode.Next = nextnode.Next.Next;//we jump de deleted number
IntList.cs (130) : return deleted;
IntList.cs (131) : }
IntList.cs (139) : First = null;
IntList.cs (146) : IntListNode nextnode = First;
IntList.cs (147) : while (nextnode != null)
IntList.cs (148) : {
IntList.cs (150) : yield return nextnode.Value;
IntList.cs (151) : nextnode = nextnode.Next;
IntList.cs (152) : }
ArrayList.cs (9) : int first = 0;
ArrayList.cs (35) : return NumElements;
ArrayList.cs (43) : if (index < 0 || index >= NumElements)
ArrayList.cs (44) : {
ArrayList.cs (46) : }
ArrayList.cs (47) : else
ArrayList.cs (48) : {
ArrayList.cs (49) : return Values[index+first];// if we deleted the n of the position 0 now our position 0 is gonna be 1
ArrayList.cs (52) : }
ArrayList.cs (58) : if (Values.Length == NumElements+first)//+first because we should know how many space left we have
ArrayList.cs (59) : {
ArrayList.cs (60) : Resize(Values.Length * 2);
ArrayList.cs (61) : }
ArrayList.cs (62) : Values[NumElements+first] = value;//we add value in the last position so we should know if we had deleted any n
ArrayList.cs (63) : NumElements++;
ArrayList.cs (74) : T remoVal = Values[index + first];
ArrayList.cs (75) : //remove the position we needed, if we have remove 2 n,
ArrayList.cs (76) : // then if index=2 ---- [remove][remove][7][6][9][0]---> 2 removes= 2 first
ArrayList.cs (77) : //       0       1     2  3  4  5
ArrayList.cs (78) : // the index we have to deleted will be the index+ first= 2+2=4 so we will deleted 4.position=9
ArrayList.cs (79) : if (index < 0 || index >= NumElements)
ArrayList.cs (80) : {
ArrayList.cs (82) : }
ArrayList.cs (84) : else if (index == 0)
ArrayList.cs (85) : {
ArrayList.cs (86) : first++;
ArrayList.cs (87) : NumElements--;
ArrayList.cs (89) : }
ArrayList.cs (90) : else
ArrayList.cs (91) : {
ArrayList.cs (92) : for (int i = index + first; i <=NumElements + first - 1; i++)
ArrayList.cs (93) : {
ArrayList.cs (94) : Values[i] = Values[i + 1];
ArrayList.cs (95) : }
ArrayList.cs (96) : NumElements--;
ArrayList.cs (97) : }
ArrayList.cs (98) : return remoVal;
ArrayList.cs (106) : NumElements = 0;
ArrayList.cs (107) : first = 0;
ArrayList.cs (115) : T[] newS = new T[newSize];
ArrayList.cs (116) : for (int i = first; i < NumElements; i++)
ArrayList.cs (117) : {
ArrayList.cs (118) : newS[i] = Values[i + first];
ArrayList.cs (119) : }
ArrayList.cs (120) : Values = newS;
ArrayList.cs (121) : first = 0;
ArrayList.cs (127) : int i = 0;
ArrayList.cs (128) : while (i == NumElements - 1)
ArrayList.cs (129) : {
ArrayList.cs (130) : i++;
ArrayList.cs (131) : }
ArrayList.cs (132) : yield return Values[i + first];
List.cs (8) : public ListNode<T> Previous = null;
List.cs (48) : return m_numItems;
List.cs (55) : if (index < 0 || index >= m_numItems)
List.cs (56) : {
List.cs (58) : }
List.cs (59) : else
List.cs (60) : {
List.cs (61) : ListNode<T> f = First;
List.cs (62) : int i = 0;
List.cs (63) : while (i < index)
List.cs (64) : {
List.cs (65) : f = f.Next;
List.cs (66) : i++;
List.cs (67) : }
List.cs (68) : return f.Value;
List.cs (69) : }
List.cs (76) : ListNode<T> lvalue = new ListNode<T>(value);
List.cs (78) : if (First == null)
List.cs (79) : {
List.cs (80) : First = lvalue;
List.cs (81) : Last = lvalue;
List.cs (82) : m_numItems++;
List.cs (84) : }
List.cs (85) : else
List.cs (86) : {
List.cs (87) : Last.Next = lvalue;
List.cs (88) : Last = lvalue;
List.cs (89) : m_numItems++;
List.cs (91) : }
List.cs (100) : if (index == 0)
List.cs (101) : {
List.cs (102) : ListNode<T> f = First;
List.cs (103) : First = First.Next;
List.cs (104) : m_numItems--;
List.cs (105) : return f.Value;
List.cs (106) : }
List.cs (107) : else if (index < m_numItems)
List.cs (108) : {
List.cs (109) : ListNode<T> value = First;
List.cs (111) : value.Previous = value.Next.Next;
List.cs (113) : if (index == m_numItems - 1)
List.cs (114) : {
List.cs (115) : Last = value;
List.cs (116) : }
List.cs (117) : m_numItems--;
List.cs (118) : return value.Value;
List.cs (120) : }
List.cs (121) : else
List.cs (122) : {
List.cs (124) : }
List.cs (131) : m_numItems = 0;
List.cs (132) : First = null;
List.cs (133) : Last = null;
List.cs (140) : ListNode<T> value = First;
List.cs (141) : while (value!=null)
List.cs (142) : {
List.cs (143) : yield return value.Value;
List.cs (144) : value=value.Next;
List.cs (145) : }
Queue.cs (26) : public void Push(T value)//ADD value
Queue.cs (31) : public T Pop()//remove the first one
Stack.cs (5) : public ListNode<T> list1 = null;
Stack.cs (6) : public ListNode<T> Next = null;
Stack.cs (7) : public ListNode<T> Previous = null;
Stack.cs (8) : ListNode<T> First = null;
Stack.cs (9) : ListNode<T> Last = null;
Stack.cs (10) : int numElements = 0;
Stack.cs (21) : return numElements++;
Stack.cs (27) : First = null;
Stack.cs (28) : Last = null;
Stack.cs (29) : numElements = 0;
Stack.cs (32) : public void Push(T value)//ADD VALUE
Stack.cs (37) : public T Pop()//remove the last one
Stack.cs (39) : T dato = Last.Value;
Stack.cs (40) : if (numElements == 0 || Last == null)
Stack.cs (41) : {
Stack.cs (43) : }
Stack.cs (44) : else if (First == Last)
Stack.cs (45) : {
Stack.cs (46) : First = null;
Stack.cs (47) : Last = null;
Stack.cs (48) : numElements--;
Stack.cs (49) : }
Stack.cs (50) : else
Stack.cs (51) : {
Stack.cs (52) : numElements--;
Stack.cs (53) : }
Stack.cs (54) : return dato;
