IntArrayList.cs (35) : return NumElements;
IntArrayList.cs (43) : if(index > NumElements || index < 0)
IntArrayList.cs (44) : {
IntArrayList.cs (46) : }
IntArrayList.cs (47) : return Values[index];
IntArrayList.cs (54) : if(NumElements+1 > Values.Length)
IntArrayList.cs (55) : {
IntArrayList.cs (56) : Resize(Values.Length*2);
IntArrayList.cs (57) : }
IntArrayList.cs (58) : Values[NumElements] = value;
IntArrayList.cs (59) : NumElements++;
IntArrayList.cs (67) : if(index > NumElements || index < 0)
IntArrayList.cs (68) : {
IntArrayList.cs (69) : return -1;
IntArrayList.cs (70) : }
IntArrayList.cs (71) : int aux = Values[index];
IntArrayList.cs (72) : for(int i=index+1; i<NumElements; i++)
IntArrayList.cs (73) : {
IntArrayList.cs (74) : Values[i-1] = Values[i];
IntArrayList.cs (75) : }
IntArrayList.cs (76) : NumElements--;
List.cs (46) : return m_numItems;
List.cs (52) : ListNode<T> node = First;
List.cs (53) : int counter = 0;
List.cs (54) : while (node != null && counter<index)
List.cs (55) : {
List.cs (56) : counter++;
List.cs (57) : node = node.Next;
List.cs (58) : }
List.cs (59) : if (node == null) return default(T);
List.cs (60) : return node.Value;
List.cs (67) : ListNode<T> listNode = new ListNode<T>(value);
List.cs (68) : m_numItems++;
List.cs (69) : if (First == null)
List.cs (70) : {
List.cs (71) : First = listNode;
List.cs (72) : Last = listNode;
List.cs (73) : return;
List.cs (74) : }
List.cs (75) : Last.Next = listNode;
List.cs (76) : Last = listNode;
List.cs (82) : T removedValue = default;
List.cs (83) : ListNode<T> node = First;
List.cs (84) : m_numItems--;
List.cs (85) : if (index == 0)
List.cs (86) : {
List.cs (87) : removedValue = node.Value;
List.cs (88) : First = node.Next;
List.cs (89) : return removedValue;
List.cs (90) : }
List.cs (91) : int counter = 0;
List.cs (92) : while (node != null && counter != index - 1)
List.cs (93) : {
List.cs (94) : counter++;
List.cs (95) : node = node.Next;
List.cs (96) : }
List.cs (98) : if (counter == index - 1)
List.cs (99) : {
List.cs (100) : if (node.Next == null) return removedValue;
List.cs (101) : removedValue = node.Next.Value;
List.cs (102) : node.Next = node.Next.Next;
List.cs (103) : return removedValue;
List.cs (104) : }
List.cs (105) : return removedValue;
List.cs (111) : First = null;
List.cs (112) : Last = null;
List.cs (118) : ListNode<T> node = First;
List.cs (119) : while (node != null)
List.cs (120) : {
List.cs (121) : yield return node.Value;
List.cs (122) : node = node.Next;
List.cs (123) : }
