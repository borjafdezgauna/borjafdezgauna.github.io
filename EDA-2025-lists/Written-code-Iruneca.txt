IntArrayList.cs (35) : return NumElements;
IntArrayList.cs (43) : if(index > NumElements || index < 0)
IntArrayList.cs (44) : {
IntArrayList.cs (46) : }
IntArrayList.cs (47) : return Values[index];
IntArrayList.cs (54) : if(NumElements+1 > Values.Length)
IntArrayList.cs (55) : {
IntArrayList.cs (56) : Resize(Values.Length*2);
IntArrayList.cs (57) : }
IntArrayList.cs (58) : Values[NumElements] = value;
IntArrayList.cs (59) : NumElements++;
IntArrayList.cs (67) : if(index > NumElements || index < 0)
IntArrayList.cs (68) : {
IntArrayList.cs (69) : return -1;
IntArrayList.cs (70) : }
IntArrayList.cs (71) : int aux = Values[index];
IntArrayList.cs (72) : for(int i=index+1; i<NumElements; i++)
IntArrayList.cs (73) : {
IntArrayList.cs (74) : Values[i-1] = Values[i];
IntArrayList.cs (75) : }
IntArrayList.cs (76) : NumElements--;
List.cs (45) : return m_numItems;
List.cs (51) : ListNode<T> node = First;
List.cs (52) : int counter = 0;
List.cs (53) : while (node != null && counter<index)
List.cs (54) : {
List.cs (55) : counter++;
List.cs (56) : node = node.Next;
List.cs (57) : }
List.cs (58) : if (node == null) return default(T);
List.cs (59) : return node.Value;
List.cs (66) : ListNode<T> listNode = new ListNode<T>(value);
List.cs (67) : m_numItems++;
List.cs (68) : if (First == null)
List.cs (69) : {
List.cs (70) : First = listNode;
List.cs (71) : Last = listNode;
List.cs (72) : return;
List.cs (73) : }
List.cs (75) : Last.Next = listNode;
List.cs (76) : Last = listNode;
List.cs (83) : T removedValue = default;
List.cs (84) : if (index == 0)
List.cs (85) : {
List.cs (95) : return removedValue;
List.cs (96) : }
List.cs (98) : {
List.cs (106) : }
List.cs (110) : {
List.cs (114) : }
List.cs (127) : return removedValue;
List.cs (133) : First = null;
List.cs (134) : Last = null;
List.cs (141) : ListNode<T> node = First;
List.cs (142) : while (node != null)
List.cs (143) : {
List.cs (144) : yield return node.Value;
List.cs (145) : node = node.Next;
List.cs (146) : }
Stack.cs (1) : using System;
Stack.cs (7) : ArrayList<T> stack = new ArrayList<T>();
Stack.cs (19) : return stack.Count();
Stack.cs (25) : stack.Clear();
Stack.cs (30) : stack.Add(value);
Stack.cs (36) : return stack.Remove(Count()-1);
