IntArrayList.cs (36) : return NumElements;
IntArrayList.cs (45) : if(index < 0 || index >= Count())
IntArrayList.cs (46) : {
IntArrayList.cs (48) : }
IntArrayList.cs (49) : return Values[index];
IntArrayList.cs (58) : if(NumElements == Values.Length)
IntArrayList.cs (59) : {
IntArrayList.cs (60) : Resize(Values.Length * 2);
IntArrayList.cs (61) : }
IntArrayList.cs (62) : Values[NumElements] = value;
IntArrayList.cs (63) : NumElements++;
IntArrayList.cs (74) : if(index < 0 || index >= Count())
IntArrayList.cs (75) : {
IntArrayList.cs (76) : return -1;
IntArrayList.cs (77) : }
IntArrayList.cs (79) : int removedValue = Values[index];
IntArrayList.cs (81) : for(int i = index; i < NumElements - 1; i++)
IntArrayList.cs (82) : {
IntArrayList.cs (83) : Values[i] = Values[i + 1];
IntArrayList.cs (84) : }
IntArrayList.cs (85) : NumElements--;
IntArrayList.cs (86) : return removedValue;
IntArrayList.cs (96) : NumElements = 0;
IntArrayList.cs (104) : int[] newValues = new int[newSize];
IntArrayList.cs (105) : for(int i = 0; i < NumElements; i++)
IntArrayList.cs (106) : {
IntArrayList.cs (107) : newValues[i] = Values[i];
IntArrayList.cs (108) : }
IntArrayList.cs (115) : for(int i = 0; i < NumElements; i++)
IntArrayList.cs (116) : {
IntArrayList.cs (117) : yield return Values[i];
IntArrayList.cs (118) : }
IntList.cs (42) : int count = 0;
IntList.cs (43) : IntListNode node = First;
IntList.cs (44) : //Va a verificar que el nodo no sea nulo
IntList.cs (45) : while (node != null)
IntList.cs (46) : {
IntList.cs (47) : //Mientras el nodo no sea nulo y tenga siguiente, incrementará el contador y avanzará al siguiente nodo
IntList.cs (48) : if (node.Next != null)
IntList.cs (49) : {
IntList.cs (50) : count++;
IntList.cs (51) : }
IntList.cs (52) : node = node.Next;
IntList.cs (53) : }
IntList.cs (54) : return count;
IntList.cs (62) : if(index < 0 || index >= Count())
IntList.cs (63) : {
IntList.cs (65) : }
IntList.cs (67) : IntListNode node = First;
IntList.cs (68) : int i= 0;
IntList.cs (69) : while(i < index)
IntList.cs (70) : {
IntList.cs (71) : node = node.Next;
IntList.cs (72) : i++;
IntList.cs (73) : }
IntList.cs (75) : return node.Value;
IntList.cs (83) : IntListNode node = new IntListNode(value);
IntList.cs (84) : if(First == null)
IntList.cs (85) : First = node;
IntList.cs (86) : else
IntList.cs (87) : {
IntList.cs (88) : //Recorremos la lista hasta encontrar el último nodo
IntList.cs (89) : //Inicializamos una variable last que apunta al primer nodo
IntList.cs (90) : //Iremos incrementando last hasta que last.Next sea nulo(que es el último nodo)
IntList.cs (91) : //Cuando lo encontremos, haremos que last.Next apunte al nuevo nodo y así lo añadiremos al final de la lista
IntList.cs (92) : IntListNode last = First;
IntList.cs (93) : while(last.Next != null)
IntList.cs (94) : {
IntList.cs (95) : last = last.Next;
IntList.cs (96) : }
IntList.cs (97) : last.Next = node;
IntList.cs (98) : }
IntList.cs (108) : //si estamos fuera de los rangos
IntList.cs (109) : if(index < 0 || index >= Count())
IntList.cs (110) : {
IntList.cs (111) : return -1;
IntList.cs (112) : }
IntList.cs (116) : //Si el elemento a eliminar es el primero
IntList.cs (117) : if(index == 0)
IntList.cs (118) : {
IntList.cs (119) : int value = First.Value;
IntList.cs (120) : First = First.Next;
IntList.cs (121) : return value;
IntList.cs (122) : }
IntList.cs (124) : //Para eliminiar un elemento que esta en medio o es el final
IntList.cs (125) : IntListNode node = First;
IntList.cs (126) : int i= 0;
IntList.cs (127) : while(i < index - 1)
IntList.cs (128) : {
IntList.cs (129) : node = node.Next;
IntList.cs (130) : i++;
IntList.cs (131) : }
IntList.cs (132) : int value2 = node.Next.Value;
IntList.cs (133) : node.Next = node.Next.Next;
IntList.cs (134) : return value2;
IntList.cs (143) : First = null;
IntList.cs (151) : IntList list = new IntList();
IntList.cs (152) : for (int i = 0; i < list.Count(); i++)
IntList.cs (153) : {
IntList.cs (154) : yield return list.Get(i);
IntList.cs (155) : }
