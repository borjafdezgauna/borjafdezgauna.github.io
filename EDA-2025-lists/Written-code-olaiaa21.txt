IntArrayList.cs (36) : return NumElements;
IntArrayList.cs (45) : if(index < 0 || index >= Count())
IntArrayList.cs (46) : {
IntArrayList.cs (48) : }
IntArrayList.cs (49) : return Values[index];
IntArrayList.cs (58) : if (NumElements >= Values.Length)
IntArrayList.cs (59) : {
IntArrayList.cs (60) : Resize(Values.Length * 2);
IntArrayList.cs (61) : }
IntArrayList.cs (62) : Values[NumElements] = value;
IntArrayList.cs (63) : NumElements++;
IntArrayList.cs (73) : if(index < 0 || index >= Count())
IntArrayList.cs (74) : {
IntArrayList.cs (75) : return -1;
IntArrayList.cs (76) : }
IntArrayList.cs (78) : int value = Values[index];
IntArrayList.cs (80) : for(int i = index; i < NumElements - 1; i++)
IntArrayList.cs (81) : {
IntArrayList.cs (82) : Values[i] = Values[i + 1];
IntArrayList.cs (83) : }
IntArrayList.cs (84) : NumElements--;
IntArrayList.cs (85) : return value;
IntArrayList.cs (95) : NumElements = 0;
IntArrayList.cs (103) : int[] newValues = new int[newSize];
IntArrayList.cs (104) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (105) : {
IntArrayList.cs (106) : newValues[i] = Values[i];
IntArrayList.cs (107) : }
IntArrayList.cs (108) : Values = newValues;
IntArrayList.cs (115) : for(int i = 0; i < NumElements; i++)
IntArrayList.cs (116) : {
IntArrayList.cs (117) : yield return Values[i];
IntArrayList.cs (118) : }
IntList.cs (42) : int count = 0;
IntList.cs (43) : IntListNode node = First;
IntList.cs (44) : //Va a verificar que el nodo no sea nulo
IntList.cs (45) : while (node != null)
IntList.cs (46) : {
IntList.cs (47) : //Mientras el nodo no sea nulo y tenga siguiente, incrementará el contador y avanzará al siguiente nodo
IntList.cs (49) : count++;
IntList.cs (51) : node = node.Next;
IntList.cs (52) : }
IntList.cs (53) : return count;
IntList.cs (61) : if(index < 0 || index >= Count())
IntList.cs (62) : {
IntList.cs (64) : }
IntList.cs (66) : IntListNode node = First;
IntList.cs (67) : int i= 0;
IntList.cs (68) : while(i < index)
IntList.cs (69) : {
IntList.cs (70) : node = node.Next;
IntList.cs (71) : i++;
IntList.cs (72) : }
IntList.cs (74) : return node.Value;
IntList.cs (82) : IntListNode node = new IntListNode(value);
IntList.cs (83) : if(First == null)
IntList.cs (84) : First = node;
IntList.cs (85) : else
IntList.cs (86) : {
IntList.cs (87) : //Recorremos la lista hasta encontrar el último nodo
IntList.cs (88) : //Inicializamos una variable last que apunta al primer nodo
IntList.cs (89) : //Iremos incrementando last hasta que last.Next sea nulo(que es el último nodo)
IntList.cs (90) : //Cuando lo encontremos, haremos que last.Next apunte al nuevo nodo y así lo añadiremos al final de la lista
IntList.cs (91) : IntListNode last = First;
IntList.cs (92) : while(last.Next != null)
IntList.cs (93) : {
IntList.cs (94) : last = last.Next;
IntList.cs (95) : }
IntList.cs (96) : last.Next = node;
IntList.cs (97) : }
IntList.cs (107) : //si estamos fuera de los rangos
IntList.cs (108) : if(index < 0 || index >= Count())
IntList.cs (109) : {
IntList.cs (110) : return -1;
IntList.cs (111) : }
IntList.cs (113) : //Si el elemento a eliminar es el primero
IntList.cs (114) : if (index == 0)
IntList.cs (115) : {
IntList.cs (116) : int value = First.Value;
IntList.cs (117) : First = First.Next;
IntList.cs (118) : return value;
IntList.cs (119) : }
IntList.cs (120) : else
IntList.cs (121) : {
IntList.cs (123) : //Para eliminiar un elemento que esta en medio o es el final
IntList.cs (124) : IntListNode node = First;
IntList.cs (125) : int i = 0;
IntList.cs (126) : while (i < index - 1)
IntList.cs (127) : {
IntList.cs (128) : node = node.Next;
IntList.cs (129) : i++;
IntList.cs (130) : }
IntList.cs (131) : int value2 = node.Next.Value;
IntList.cs (132) : node.Next = node.Next.Next;
IntList.cs (133) : return value2;
IntList.cs (134) : }
IntList.cs (142) : First = null;
IntList.cs (150) : IntListNode node = First;
IntList.cs (151) : while (node != null)
IntList.cs (152) : {
IntList.cs (153) : yield return node.Value;
IntList.cs (154) : node = node.Next;
IntList.cs (155) : }
ArrayList.cs (9) : int firstIndex = 0;
ArrayList.cs (10) : int lastIndex = -1;
ArrayList.cs (36) : return NumElements;
ArrayList.cs (44) : if (index < 0 || index >= Count())
ArrayList.cs (45) : {
ArrayList.cs (47) : }
ArrayList.cs (48) : //comportamiento circular
ArrayList.cs (49) : int realIndex = (firstIndex + index) % Values.Length;
ArrayList.cs (50) : return Values[realIndex];
ArrayList.cs (59) : if (NumElements == Values.Length)
ArrayList.cs (60) : {
ArrayList.cs (61) : Resize(Values.Length * 2);
ArrayList.cs (62) : }
ArrayList.cs (63) : lastIndex = (firstIndex + NumElements) % Values.Length;
ArrayList.cs (64) : Values[lastIndex] = value;
ArrayList.cs (65) : NumElements++;
ArrayList.cs (76) : //si está fuera de rango
ArrayList.cs (77) : if (index < 0 || index >= Count())
ArrayList.cs (78) : {
ArrayList.cs (80) : }
ArrayList.cs (82) : //averiguar el índice real teniendo en cuenta la circularidad
ArrayList.cs (83) : int realIndex = (firstIndex + index) % Values.Length;
ArrayList.cs (84) : T removed = Values[realIndex];
ArrayList.cs (85) : //si el index es 0, avanzo firstIndex
ArrayList.cs (86) : if (index == 0)
ArrayList.cs (87) : {
ArrayList.cs (88) : firstIndex = (firstIndex + 1) % Values.Length;
ArrayList.cs (89) : NumElements--;
ArrayList.cs (90) : return removed;
ArrayList.cs (91) : }
ArrayList.cs (93) : // si el index es el último, retrocedo lastIndex
ArrayList.cs (94) : if (index == Count() - 1)
ArrayList.cs (95) : {
ArrayList.cs (96) : //actua para lista circular
ArrayList.cs (97) : lastIndex = (lastIndex - 1 + Values.Length) % Values.Length;
ArrayList.cs (98) : NumElements--;
ArrayList.cs (99) : return removed;
ArrayList.cs (100) : }
ArrayList.cs (102) : //si queremos eliminar un elemento intermedio, movemos los elementos a la izquierda
ArrayList.cs (103) : for (int i = index; i < NumElements - 1; i++)
ArrayList.cs (104) : {
ArrayList.cs (105) : Values[(firstIndex + i) % Values.Length] = Values[(firstIndex + i + 1) % Values.Length];
ArrayList.cs (106) : }
ArrayList.cs (108) : NumElements--;
ArrayList.cs (109) : lastIndex = (firstIndex + NumElements - 1) % Values.Length;
ArrayList.cs (110) : return removed;
ArrayList.cs (118) : NumElements = 0;
ArrayList.cs (119) : firstIndex = 0;
ArrayList.cs (120) : lastIndex = -1;
ArrayList.cs (128) : T[] newValues = new T[newSize];
ArrayList.cs (129) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (130) : {
ArrayList.cs (131) : newValues[i] = Values[i];
ArrayList.cs (132) : }
ArrayList.cs (133) : Values = newValues;
ArrayList.cs (134) : firstIndex = 0;
ArrayList.cs (135) : lastIndex = NumElements - 1;
ArrayList.cs (142) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (143) : {
ArrayList.cs (144) : yield return Values[i];
ArrayList.cs (145) : }
List.cs (8) : public ListNode<T> Previous = null;
List.cs (48) : return m_numItems;
List.cs (56) : if(index < 0 || index >= Count())
List.cs (57) : {
List.cs (59) : }
List.cs (61) : ListNode<T> node = First;
List.cs (62) : int i= 0;
List.cs (63) : while(i < index)
List.cs (64) : {
List.cs (65) : node = node.Next;
List.cs (66) : i++;
List.cs (67) : }
List.cs (69) : return node.Value;
List.cs (76) : ListNode<T> node = new ListNode<T>(value);
List.cs (77) : if (First == null)
List.cs (78) : {
List.cs (79) : First = node;
List.cs (80) : }
List.cs (81) : else
List.cs (82) : {
List.cs (83) : Last.Next = node;
List.cs (84) : node.Previous = Last;
List.cs (85) : }
List.cs (86) : Last = node;
List.cs (88) : m_numItems++;
List.cs (95) : //si estamos fuera de los rangos
List.cs (96) : if(index < 0 || index >= Count())
List.cs (97) : {
List.cs (99) : }
List.cs (101) : //Si el elemento a eliminar es el primero
List.cs (102) : if (index == 0)
List.cs (103) : {
List.cs (104) : T value1 = First.Value;
List.cs (105) : First = First.Next;
List.cs (106) : if (First != null)
List.cs (107) : {
List.cs (108) : First.Previous = null;
List.cs (109) : }
List.cs (110) : else
List.cs (111) : {
List.cs (112) : Last = null;
List.cs (113) : }
List.cs (114) : m_numItems--;
List.cs (115) : return value1;
List.cs (117) : }
List.cs (118) : //Si el elemento a eliminar es el último
List.cs (119) : if (index == Count() - 1)
List.cs (120) : {
List.cs (121) : T value2 = Last.Value;
List.cs (122) : Last = Last.Previous;
List.cs (123) : if (Last != null)
List.cs (124) : {
List.cs (125) : Last.Next = null;
List.cs (126) : }
List.cs (127) : else
List.cs (128) : {
List.cs (129) : First = null;
List.cs (130) : }
List.cs (131) : m_numItems--;
List.cs (132) : return value2;
List.cs (133) : }
List.cs (134) : //Si el elemento a eliminar está en medio
List.cs (135) : ListNode<T> node = First;
List.cs (136) : int i = 0;
List.cs (137) : while (i < index)
List.cs (138) : {
List.cs (139) : node = node.Next;
List.cs (140) : i++;
List.cs (141) : }
List.cs (142) : T value = node.Value; //guerdamos el valor de lo que queremos eliminar para devolverlo al final
List.cs (143) : node.Previous.Next = node.Next; //hacemos que le nodo anterior sea el siguiente del nodo actual
List.cs (144) : node.Next.Previous = node.Previous; //hacemos que el nodo siguiente sea el anterior del nodo actual
List.cs (145) : m_numItems--;
List.cs (146) : return value;
List.cs (153) : First = null;
List.cs (154) : Last = null;
List.cs (155) : m_numItems = 0;
List.cs (163) : ListNode<T> node = First;
List.cs (164) : while (node != null)
List.cs (165) : {
List.cs (166) : yield return node.Value;
List.cs (167) : node = node.Next;
List.cs (168) : }
Queue.cs (1) : using System;
Queue.cs (2) : using System.ComponentModel;
Queue.cs (11) : List<T> list = new List<T>();
Queue.cs (16) : return list.ToString();
Queue.cs (22) : return list.Count();
Queue.cs (29) : list.Clear();
Queue.cs (35) : list.Add(value);
Queue.cs (41) : if (Count() == 0)
Queue.cs (42) : {
Queue.cs (44) : }
Queue.cs (45) : else
Queue.cs (46) : {
Queue.cs (47) : return list.Remove(0);
Queue.cs (48) : }
Stack.cs (6) : ArrayList<T> arrayList = new ArrayList<T>();
Stack.cs (11) : return arrayList.ToString();
Stack.cs (18) : return arrayList.Count();
Stack.cs (26) : arrayList.Clear();
Stack.cs (32) : arrayList.Add(value);
Stack.cs (38) : if (Count() == 0)
Stack.cs (39) : {
Stack.cs (41) : }
Stack.cs (42) : else
Stack.cs (43) : {
Stack.cs (44) : return arrayList.Remove(Count() - 1);
Stack.cs (45) : }
