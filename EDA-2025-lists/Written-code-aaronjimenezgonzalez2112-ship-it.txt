IntArrayList.cs (3) : using System.ComponentModel;
IntArrayList.cs (4) : using System.Linq.Expressions;
IntArrayList.cs (5) : using System.Runtime.InteropServices;
IntArrayList.cs (38) : return NumElements;
IntArrayList.cs (46) : if (index < 0 || index >= NumElements)
IntArrayList.cs (48) : return Values[index];
IntArrayList.cs (56) : if (NumElements >= Values.Length)
IntArrayList.cs (57) : {
IntArrayList.cs (58) : Resize(NumElements * 2);
IntArrayList.cs (59) : }
IntArrayList.cs (60) : Values[NumElements] = value;
IntArrayList.cs (61) : NumElements++;
IntArrayList.cs (69) : if (index < 0 || index >= NumElements || NumElements == 0)
IntArrayList.cs (70) : return -1;
IntArrayList.cs (71) : int auxiliar = 0;
IntArrayList.cs (72) : for (int i = index; i < NumElements - 1; i++)
IntArrayList.cs (73) : {
IntArrayList.cs (74) : auxiliar = Values[i];
IntArrayList.cs (75) : Values[i] = Values[i + 1];
IntArrayList.cs (76) : }
IntArrayList.cs (77) : NumElements--;
IntArrayList.cs (78) : return auxiliar;
IntArrayList.cs (86) : NumElements = 0;
IntArrayList.cs (92) : int[] newArray = new int[newSize];
IntArrayList.cs (93) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (94) : {
IntArrayList.cs (95) : newArray[i] = Values[i];
IntArrayList.cs (96) : }
IntArrayList.cs (97) : Values = newArray;
IntArrayList.cs (104) : for (int i = 0; i < Count(); i++)
IntArrayList.cs (105) : {
IntArrayList.cs (106) : yield return Values[i];
IntArrayList.cs (107) : }
IntList.cs (3) : using System.Xml;
IntList.cs (42) : IntListNode node = First;
IntList.cs (43) : if (First == null)
IntList.cs (44) : return 0;
IntList.cs (45) : int i = 1;
IntList.cs (46) : while (node.Next != null)
IntList.cs (47) : {
IntList.cs (48) : i++;
IntList.cs (49) : node = node.Next;
IntList.cs (50) : }
IntList.cs (53) : return i;
IntList.cs (60) : IntListNode node = First;
IntList.cs (61) : int length = Count();
IntList.cs (62) : if (index >= length)
IntList.cs (63) : return 0;
IntList.cs (64) : for (int i = 0; i < length; i++)
IntList.cs (65) : {
IntList.cs (67) : if (i == index)
IntList.cs (68) : return node.Value;
IntList.cs (69) : node = node.Next;
IntList.cs (70) : }
IntList.cs (78) : IntListNode newNode = new IntListNode(value);
IntList.cs (79) : if (First != null)
IntList.cs (80) : {
IntList.cs (81) : IntListNode node = First;
IntList.cs (82) : while (node.Next != null)
IntList.cs (83) : {
IntList.cs (84) : node = node.Next;
IntList.cs (85) : }
IntList.cs (86) : node.Next = newNode;
IntList.cs (87) : }
IntList.cs (88) : else
IntList.cs (89) : {
IntList.cs (90) : First = newNode;
IntList.cs (91) : }
IntList.cs (97) : IntListNode node = First;
IntList.cs (100) : if (index >= Count() || index < 0)
IntList.cs (101) : return -1;
IntList.cs (102) : if (index == 0)
IntList.cs (103) : {
IntList.cs (104) : node = First;
IntList.cs (105) : First = First.Next;
IntList.cs (106) : return node.Value;
IntList.cs (107) : }
IntList.cs (108) : int i = 0;
IntList.cs (109) : while (i < index - 1)
IntList.cs (110) : {
IntList.cs (111) : node = node.Next;
IntList.cs (112) : i++;
IntList.cs (113) : }
IntList.cs (115) : int value = node.Next.Value;
IntList.cs (116) : node.Next = node.Next.Next;
IntList.cs (117) : return value;
IntList.cs (126) : First = null;
IntList.cs (133) : for (int i = 0; i < Count(); i++)
IntList.cs (134) : {
IntList.cs (135) : yield return Get(i);
IntList.cs (136) : }
ArrayList.cs (9) : int FirstIndex = 0;
ArrayList.cs (10) : int LastIndex = 0;
ArrayList.cs (35) : return NumElements;
ArrayList.cs (41) : if (index < 0 || index >= NumElements)
ArrayList.cs (42) : return default;
ArrayList.cs (43) : return Values[index + FirstIndex];
ArrayList.cs (51) : if (NumElements >= Values.Length - FirstIndex)
ArrayList.cs (52) : {
ArrayList.cs (53) : Resize(NumElements * 2);
ArrayList.cs (54) : }
ArrayList.cs (55) : Values[NumElements] = value;
ArrayList.cs (56) : NumElements++;
ArrayList.cs (57) : LastIndex++;
ArrayList.cs (66) : T auxiliar = default;
ArrayList.cs (67) : if (index == 0)
ArrayList.cs (68) : {
ArrayList.cs (69) : auxiliar = Values[FirstIndex];
ArrayList.cs (70) : FirstIndex++;
ArrayList.cs (71) : NumElements--;
ArrayList.cs (72) : return auxiliar;
ArrayList.cs (73) : }
ArrayList.cs (74) : if (index < 0 || index >= NumElements || NumElements == 0)
ArrayList.cs (75) : return default;
ArrayList.cs (77) : for (int i = index; i < NumElements - 1; i++)
ArrayList.cs (78) : {
ArrayList.cs (79) : auxiliar = Values[i + FirstIndex];
ArrayList.cs (80) : Values[i + FirstIndex] = Values[i + 1 + FirstIndex];
ArrayList.cs (81) : }
ArrayList.cs (82) : if (index == NumElements - 1)
ArrayList.cs (83) : LastIndex--;
ArrayList.cs (84) : NumElements--;
ArrayList.cs (85) : return auxiliar;
ArrayList.cs (93) : NumElements = 0;
ArrayList.cs (94) : FirstIndex = 0;
ArrayList.cs (95) : LastIndex = 0;
ArrayList.cs (102) : T[] newArray = new T[newSize];
ArrayList.cs (103) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (104) : {
ArrayList.cs (105) : newArray[i + FirstIndex] = Values[i];
ArrayList.cs (106) : }
ArrayList.cs (107) : FirstIndex = 0;
ArrayList.cs (108) : Values = newArray;
ArrayList.cs (113) : for (int i = 0; i < Count(); i++)
ArrayList.cs (114) : {
ArrayList.cs (115) : yield return Values[i];
ArrayList.cs (116) : }
List.cs (46) : return m_numItems;
List.cs (53) : ListNode<T> node = First;
List.cs (54) : int length = Count();
List.cs (55) : if (index >= length)
List.cs (56) : return default;
List.cs (57) : for (int i = 0; i < length; i++)
List.cs (58) : {
List.cs (60) : if (i == index)
List.cs (61) : return node.Value;
List.cs (62) : node = node.Next;
List.cs (63) : }
List.cs (64) : return default;
List.cs (71) : if (Last == null)
List.cs (72) : {
List.cs (73) : First = new ListNode<T>(value);
List.cs (74) : Last = First;
List.cs (75) : m_numItems++;
List.cs (76) : }
List.cs (77) : else
List.cs (78) : {
List.cs (79) : Last.Next = new ListNode<T>(value);
List.cs (80) : Last = Last.Next;
List.cs (81) : m_numItems++;
List.cs (82) : }
List.cs (88) : ListNode<T> node = First;
List.cs (89) : if (index >= Count() || index < 0)
List.cs (90) : return default;
List.cs (91) : if (index == 0)
List.cs (92) : {
List.cs (93) : node = First;
List.cs (94) : First = First.Next;
List.cs (95) : m_numItems--;
List.cs (96) : return node.Value;
List.cs (97) : }
List.cs (98) : int i = 0;
List.cs (99) : while (i < index - 1)
List.cs (100) : {
List.cs (101) : node = node.Next;
List.cs (102) : i++;
List.cs (103) : }
List.cs (104) : if (First != Last || index == m_numItems - 1)
List.cs (105) : {
List.cs (106) : Last = node;
List.cs (107) : }
List.cs (108) : T value = node.Next.Value;
List.cs (109) : node.Next = node.Next.Next;
List.cs (110) : m_numItems--;
List.cs (111) : return value;
List.cs (119) : First = null;
List.cs (120) : Last = null;
List.cs (121) : m_numItems = 0;
List.cs (128) : for (int i = 0; i < Count(); i++)
List.cs (129) : {
List.cs (130) : yield return Get(i);
List.cs (131) : }
