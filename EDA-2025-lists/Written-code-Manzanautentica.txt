IntArrayList.cs (3) : using System.Numerics;
IntArrayList.cs (36) : return NumElements;
IntArrayList.cs (44) : if (index <= NumElements)
IntArrayList.cs (45) : {
IntArrayList.cs (46) : return Values[index];
IntArrayList.cs (47) : }
IntArrayList.cs (55) : while (NumElements + 1 < Values.Length)
IntArrayList.cs (56) : {
IntArrayList.cs (57) : if (NumElements >= InitialSize + 1)
IntArrayList.cs (58) : {
IntArrayList.cs (59) : Resize(2 * InitialSize);
IntArrayList.cs (60) : }
IntArrayList.cs (61) : }
IntArrayList.cs (62) : Values[NumElements + 1] = value;
IntArrayList.cs (63) : NumElements++;
IntArrayList.cs (71) : int firstElement = 0;
IntArrayList.cs (72) : int lastElement = NumElements;
IntArrayList.cs (73) : if (index > NumElements)
IntArrayList.cs (74) : {
IntArrayList.cs (75) : return -1;
IntArrayList.cs (76) : }
IntArrayList.cs (77) : int result = Values[index];
IntArrayList.cs (78) : if (index == firstElement)
IntArrayList.cs (79) : {
IntArrayList.cs (80) : firstElement--;
IntArrayList.cs (81) : }
IntArrayList.cs (82) : else
IntArrayList.cs (83) : {
IntArrayList.cs (84) : for (int i = index; i <= NumElements; i++)
IntArrayList.cs (85) : {
IntArrayList.cs (86) : Values[i] = Values[i + 1];
IntArrayList.cs (87) : }
IntArrayList.cs (88) : lastElement--;
IntArrayList.cs (89) : }
IntArrayList.cs (90) : NumElements--;
IntArrayList.cs (91) : return result;
IntArrayList.cs (99) : NumElements = 0;
IntArrayList.cs (105) : //          creo que el texto del TODO de aqui encima esta mal
IntArrayList.cs (106) : Values = new int[newSize];
IntArrayList.cs (112) : for (int i = 0; i <= NumElements; i++)
IntArrayList.cs (113) : {
IntArrayList.cs (114) : yield return Values[i];
IntArrayList.cs (115) : }
IntList.cs (41) : IntListNode node = First;
IntList.cs (42) : int i = 0;
IntList.cs (44) : while (node != null)
IntList.cs (45) : {
IntList.cs (46) : node = node.Next;
IntList.cs (47) : i++;
IntList.cs (48) : }
IntList.cs (49) : return i;
IntList.cs (56) : IntListNode node = First;
IntList.cs (57) : int i = 0;
IntList.cs (58) : while (node != null)
IntList.cs (59) : {
IntList.cs (60) : if (i == index)
IntList.cs (61) : {
IntList.cs (62) : return node.Value;
IntList.cs (63) : }
IntList.cs (64) : node = node.Next;
IntList.cs (65) : i++;
IntList.cs (66) : }
IntList.cs (75) : if (First == null)
IntList.cs (76) : {
IntList.cs (77) : First = new IntListNode(value);
IntList.cs (78) : }
IntList.cs (79) : IntListNode node = First;
IntList.cs (80) : while (node.Next != null)
IntList.cs (81) : {
IntList.cs (82) : node = node.Next;
IntList.cs (83) : }
IntList.cs (84) : node.Next = new IntListNode(value);
IntList.cs (92) : IntListNode node = First;
IntList.cs (93) : int i = 0;
IntList.cs (94) : int result = -1;
IntList.cs (95) : if (index == 1)
IntList.cs (96) : {
IntList.cs (97) : result = node.Value;
IntList.cs (98) : node.Next = First;
IntList.cs (99) : }
IntList.cs (100) : while (node != null && i != index - 1)
IntList.cs (101) : {
IntList.cs (102) : node = node.Next;
IntList.cs (103) : i++;
IntList.cs (104) : }
IntList.cs (105) : if (i == index - 1 && node.Next.Next != null)
IntList.cs (106) : {
IntList.cs (107) : result = node.Next.Value;
IntList.cs (108) : node.Next = node.Next.Next;
IntList.cs (109) : }
IntList.cs (110) : else if (i == index - 1 && node.Next.Next == null)
IntList.cs (111) : {
IntList.cs (112) : result = node.Next.Value;
IntList.cs (113) : node.Next = null;
IntList.cs (114) : }
IntList.cs (115) : return result;
IntList.cs (122) : IntListNode node = First;
IntList.cs (123) : First = null;
IntList.cs (129) : IntListNode node = First;
IntList.cs (131) : while (node != null)
IntList.cs (132) : {
IntList.cs (133) : yield return node.Value;
IntList.cs (134) : node = node.Next;
IntList.cs (135) : }
List.cs (46) : ListNode<T> node = First;
List.cs (47) : int i = 0;
List.cs (48) : //TODO #1: return the number of elements on the list
List.cs (49) : while (node != null)
List.cs (50) : {
List.cs (51) : node = node.Next;
List.cs (52) : i++;
List.cs (53) : }
List.cs (54) : return i;
List.cs (61) : ListNode<T> node = First;
List.cs (62) : int i = 0;
List.cs (63) : while (node != null)
List.cs (64) : {
List.cs (65) : if (i == index)
List.cs (66) : {
List.cs (67) : return node.Value;
List.cs (68) : }
List.cs (69) : node = node.Next;
List.cs (70) : i++;
List.cs (71) : }
List.cs (80) : if (First == null)
List.cs (81) : {
List.cs (82) : First = new ListNode<T>(value);
List.cs (83) : }
List.cs (84) : ListNode<T> node = First;
List.cs (85) : while (node.Next != null)
List.cs (86) : {
List.cs (87) : node = node.Next;
List.cs (89) : node.Next = new ListNode<T>(value);
List.cs (90) : }
List.cs (97) : ListNode<T> node = First;
List.cs (98) : int i = 0;
List.cs (99) : if (index == 1)
List.cs (100) : {
List.cs (101) : node.Next = First;
List.cs (102) : }
List.cs (103) : while (node != null && i != index - 1)
List.cs (104) : {
List.cs (105) : node = node.Next;
List.cs (106) : i++;
List.cs (107) : }
List.cs (108) : if (i == index - 1 && node.Next.Next != null)
List.cs (109) : {
List.cs (110) : node.Next = node.Next.Next;
List.cs (111) : }
List.cs (112) : else if (i == index - 1 && node.Next.Next == null)
List.cs (113) : {
List.cs (114) : node.Next = null;
List.cs (115) : }
List.cs (122) : ListNode<T> node = First;
List.cs (123) : First = null;
List.cs (129) : ListNode<T> node = First;
List.cs (130) : while (node != null)
List.cs (131) : {
List.cs (132) : yield return node.Value;
List.cs (133) : node = node.Next;
List.cs (134) : }
