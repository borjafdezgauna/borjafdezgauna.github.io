IntArrayList.cs (3) : using System.ComponentModel;
IntArrayList.cs (4) : using System.Numerics;
IntArrayList.cs (37) : return NumElements;
IntArrayList.cs (45) : if (index <= NumElements)
IntArrayList.cs (46) : {
IntArrayList.cs (47) : return Values[index];
IntArrayList.cs (48) : }
IntArrayList.cs (56) : while (NumElements >= Values.Length)
IntArrayList.cs (57) : {
IntArrayList.cs (58) : Resize(2 * Values.Length);
IntArrayList.cs (59) : }
IntArrayList.cs (60) : Values[NumElements] = value;
IntArrayList.cs (61) : NumElements++;
IntArrayList.cs (69) : if (index >= NumElements)
IntArrayList.cs (70) : {
IntArrayList.cs (71) : return -1;
IntArrayList.cs (72) : }
IntArrayList.cs (73) : int result = Values[index];
IntArrayList.cs (74) : for (int i = index; i < NumElements - 1; i++)
IntArrayList.cs (75) : {
IntArrayList.cs (76) : Values[i] = Values[i + 1];
IntArrayList.cs (77) : }
IntArrayList.cs (78) : NumElements--;
IntArrayList.cs (79) : return result;
IntArrayList.cs (87) : NumElements = 0;
IntArrayList.cs (93) : //          creo que el texto del TODO de aqui encima esta mal
IntArrayList.cs (94) : int[] newVal = new int[newSize];
IntArrayList.cs (95) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (96) : {
IntArrayList.cs (97) : newVal[i] = Values[i];
IntArrayList.cs (98) : }
IntArrayList.cs (99) : Values = newVal;
IntArrayList.cs (105) : for (int i = 0; i <= NumElements; i++)
IntArrayList.cs (106) : {
IntArrayList.cs (107) : yield return Values[i];
IntArrayList.cs (108) : }
IntList.cs (41) : IntListNode node = First;
IntList.cs (42) : int i = 0;
IntList.cs (44) : while (node != null)
IntList.cs (45) : {
IntList.cs (46) : node = node.Next;
IntList.cs (47) : i++;
IntList.cs (48) : }
IntList.cs (49) : return i;
IntList.cs (56) : IntListNode node = First;
IntList.cs (57) : int i = 0;
IntList.cs (58) : while (node != null)
IntList.cs (59) : {
IntList.cs (60) : if (i == index)
IntList.cs (61) : {
IntList.cs (62) : return node.Value;
IntList.cs (63) : }
IntList.cs (64) : node = node.Next;
IntList.cs (65) : i++;
IntList.cs (66) : }
IntList.cs (75) : if (First == null)
IntList.cs (76) : {
IntList.cs (77) : First = new IntListNode(value);
IntList.cs (78) : return;
IntList.cs (79) : }
IntList.cs (80) : IntListNode node = First;
IntList.cs (81) : while (node.Next != null)
IntList.cs (82) : {
IntList.cs (83) : node = node.Next;
IntList.cs (84) : }
IntList.cs (85) : node.Next = new IntListNode(value);
IntList.cs (93) : IntListNode node = First;
IntList.cs (94) : int i = 0;
IntList.cs (95) : int result = -1;
IntList.cs (96) : if (index == 0)
IntList.cs (97) : {
IntList.cs (98) : result = node.Value;
IntList.cs (99) : First = node.Next;
IntList.cs (100) : return result;
IntList.cs (101) : }
IntList.cs (102) : while (node != null && i != index - 1)
IntList.cs (103) : {
IntList.cs (104) : node = node.Next;
IntList.cs (105) : i++;
IntList.cs (106) : }
IntList.cs (107) : if (i == index - 1 && node.Next.Next != null)
IntList.cs (108) : {
IntList.cs (109) : result = node.Next.Value;
IntList.cs (110) : node.Next = node.Next.Next;
IntList.cs (111) : }
IntList.cs (112) : else if (i == index - 1 && node.Next.Next == null)
IntList.cs (113) : {
IntList.cs (114) : result = node.Next.Value;
IntList.cs (115) : node.Next = null;
IntList.cs (116) : }
IntList.cs (117) : return result;
IntList.cs (124) : IntListNode node = First;
IntList.cs (125) : First = null;
IntList.cs (131) : IntListNode node = First;
IntList.cs (133) : while (node != null)
IntList.cs (134) : {
IntList.cs (135) : yield return node.Value;
IntList.cs (136) : node = node.Next;
IntList.cs (137) : }
ArrayList.cs (34) : return NumElements;
ArrayList.cs (40) : if (index >= 0 && index <= NumElements)
ArrayList.cs (41) : {
ArrayList.cs (42) : return Values[index];
ArrayList.cs (43) : }
ArrayList.cs (51) : if (NumElements >= Values.Length)
ArrayList.cs (52) : {
ArrayList.cs (53) : Resize(2 * Values.Length);
ArrayList.cs (54) : }
ArrayList.cs (55) : Values[NumElements] = value;
ArrayList.cs (56) : NumElements++;
ArrayList.cs (65) : int lastElement = NumElements;
ArrayList.cs (66) : if (index < 0 || index >=  NumElements)
ArrayList.cs (67) : {
ArrayList.cs (69) : }
ArrayList.cs (70) : T result = Values[index];
ArrayList.cs (71) : for(int i = index; i < NumElements -1; i++)
ArrayList.cs (72) : {
ArrayList.cs (73) : Values[i] = Values[i + 1];
ArrayList.cs (74) : }
ArrayList.cs (75) : NumElements--;
ArrayList.cs (76) : return result;
ArrayList.cs (83) : NumElements = 0;
ArrayList.cs (89) : //          creo que el texto del TODO de aqui encima esta mal
ArrayList.cs (90) : T[] newVal = new T[newSize];
ArrayList.cs (91) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (92) : {
ArrayList.cs (93) : newVal[i] = Values[i];
ArrayList.cs (94) : }
ArrayList.cs (95) : Values = newVal;
ArrayList.cs (100) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (101) : {
ArrayList.cs (102) : yield return Values[i];
ArrayList.cs (103) : }
List.cs (25) : //    ListNode<T> Last = null;
List.cs (26) : //    int m_numItems = 0;
List.cs (46) : ListNode<T> node = First;
List.cs (47) : int i = 0;
List.cs (48) : //TODO #1: return the number of elements on the list
List.cs (49) : while (node != null)
List.cs (50) : {
List.cs (51) : node = node.Next;
List.cs (52) : i++;
List.cs (53) : }
List.cs (54) : return i;
List.cs (61) : ListNode<T> node = First;
List.cs (62) : int i = 0;
List.cs (63) : while (node != null)
List.cs (64) : {
List.cs (65) : if (i == index)
List.cs (66) : {
List.cs (67) : return node.Value;
List.cs (68) : }
List.cs (69) : node = node.Next;
List.cs (70) : i++;
List.cs (71) : }
List.cs (80) : if (First == null)
List.cs (81) : {
List.cs (82) : First = new ListNode<T>(value);
List.cs (83) : }
List.cs (84) : else
List.cs (85) : {
List.cs (86) : ListNode<T> node = First;
List.cs (87) : while (node.Next != null)
List.cs (88) : {
List.cs (89) : node = node.Next;
List.cs (91) : node.Next = new ListNode<T>(value);
List.cs (92) : }
List.cs (93) : }
List.cs (100) : ListNode<T> node = First;
List.cs (101) : int i = 0;
List.cs (102) : if (index == 0)
List.cs (103) : {
List.cs (104) : node = node.Next;
List.cs (105) : First = node;
List.cs (106) : }
List.cs (107) : else
List.cs (108) : {
List.cs (109) : while (node != null && i != index - 1)
List.cs (110) : {
List.cs (111) : node = node.Next;
List.cs (112) : i++;
List.cs (113) : }
List.cs (114) : if (i == index - 1 && node.Next.Next != null)
List.cs (115) : {
List.cs (116) : node.Next = node.Next.Next;
List.cs (117) : }
List.cs (118) : else if (i == index - 1 && node.Next.Next == null)
List.cs (119) : {
List.cs (120) : node.Next = null;
List.cs (121) : }
List.cs (122) : }
List.cs (130) : ListNode<T> node = First;
List.cs (131) : First = null;
List.cs (137) : ListNode<T> node = First;
List.cs (138) : while (node != null)
List.cs (139) : {
List.cs (140) : yield return node.Value;
List.cs (141) : node = node.Next;
List.cs (142) : }
Queue.cs (1) : using System;
Queue.cs (2) : using System.ComponentModel.DataAnnotations.Schema;
Queue.cs (10) : ArrayList<T> lista = new ArrayList<T>();
Queue.cs (11) : private int numElements;
Queue.cs (16) : return lista.ToString();
Queue.cs (23) : return lista.Count();
Queue.cs (29) : lista.Clear();
Queue.cs (34) : lista.Add(value);
Queue.cs (40) : return lista.Remove(0);
Stack.cs (7) : ArrayList<T> lista = new ArrayList<T>();
Stack.cs (8) : private int numElements;
Stack.cs (19) : return lista.Count();
Stack.cs (25) : lista.Clear();
Stack.cs (30) : lista.Add(value);
Stack.cs (35) : numElements = lista.Count();
Stack.cs (36) : return lista.Remove(numElements - 1);
