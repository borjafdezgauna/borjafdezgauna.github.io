IntArrayList.cs (36) : return NumElements;
IntArrayList.cs (44) : if (index < 0 || index >= NumElements)
IntArrayList.cs (45) : {
IntArrayList.cs (47) : }
IntArrayList.cs (48) : else
IntArrayList.cs (49) : {
IntArrayList.cs (50) : return Values[index];
IntArrayList.cs (51) : }
IntArrayList.cs (59) : if (NumElements == Values.Length)
IntArrayList.cs (60) : {
IntArrayList.cs (61) : Resize(Values.Length * 2);
IntArrayList.cs (62) : }
IntArrayList.cs (63) : Values[NumElements] = value;
IntArrayList.cs (64) : NumElements++;
IntArrayList.cs (72) : if (index < 0 || index >= NumElements)
IntArrayList.cs (73) : {
IntArrayList.cs (74) : return -1;
IntArrayList.cs (75) : }
IntArrayList.cs (76) : else
IntArrayList.cs (77) : {
IntArrayList.cs (78) : int numRemove = Values[index];
IntArrayList.cs (79) : for (int i = index; i < NumElements - 1; i++)
IntArrayList.cs (80) : {
IntArrayList.cs (81) : Values[i] = Values[i + 1];
IntArrayList.cs (82) : }
IntArrayList.cs (83) : NumElements--;
IntArrayList.cs (84) : return numRemove;
IntArrayList.cs (85) : }
IntArrayList.cs (93) : NumElements = 0;
IntArrayList.cs (100) : int[] newS = new int[newSize];
IntArrayList.cs (101) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (102) : {
IntArrayList.cs (103) : newS[i] = Values[i];
IntArrayList.cs (104) : }
IntArrayList.cs (105) : Values = newS;
IntArrayList.cs (111) : foreach (int value in Values)
IntArrayList.cs (112) : {
IntArrayList.cs (113) : yield return value;
IntArrayList.cs (114) : }
IntList.cs (42) : int count = 0;
IntList.cs (43) : IntListNode aux = First;
IntList.cs (44) : while (aux != null)
IntList.cs (45) : {
IntList.cs (46) : count++;
IntList.cs (47) : aux = aux.Next;
IntList.cs (48) : }
IntList.cs (49) : return count;
IntList.cs (57) : if (index < 0 || index >= Count())
IntList.cs (58) : {
IntList.cs (60) : }
IntList.cs (61) : else
IntList.cs (62) : {
IntList.cs (63) : int i = 0;
IntList.cs (64) : IntListNode aux = First;
IntList.cs (65) : while (i < index)
IntList.cs (66) : {
IntList.cs (67) : i++;
IntList.cs (68) : aux = aux.Next;
IntList.cs (69) : }
IntList.cs (70) : return aux.Value;
IntList.cs (71) : }
IntList.cs (79) : IntListNode newnode = new IntListNode(value);
IntList.cs (80) : if (First == null)
IntList.cs (81) : {
IntList.cs (82) : First = newnode;
IntList.cs (83) : }
IntList.cs (84) : else
IntList.cs (85) : {
IntList.cs (86) : IntListNode aux = First;
IntList.cs (87) : while (aux.Next != null)
IntList.cs (88) : {
IntList.cs (89) : aux = aux.Next;
IntList.cs (90) : }
IntList.cs (91) : aux.Next = newnode;
IntList.cs (92) : }
IntList.cs (100) : if (index < 0 || index >= Count())
IntList.cs (101) : {
IntList.cs (102) : return -1;
IntList.cs (103) : }
IntList.cs (104) : if (index == 0)
IntList.cs (105) : {
IntList.cs (106) : int valueRemove = First.Value;
IntList.cs (107) : First = First.Next;
IntList.cs (108) : return valueRemove;
IntList.cs (109) : }
IntList.cs (110) : else
IntList.cs (111) : {
IntList.cs (112) : IntListNode aux = First;
IntList.cs (113) : for (int i = 0; i < index - 1; i++)
IntList.cs (114) : {
IntList.cs (115) : aux = aux.Next;
IntList.cs (116) : }
IntList.cs (118) : int removeValue = aux.Next.Value;
IntList.cs (119) : aux.Next = aux.Next.Next;
IntList.cs (120) : return removeValue;
IntList.cs (121) : }
IntList.cs (128) : First = null;
IntList.cs (134) : IntListNode aux = First;
IntList.cs (135) : while (aux != null)
IntList.cs (136) : {
IntList.cs (137) : int data = aux.Value;
IntList.cs (138) : aux = aux.Next;
IntList.cs (139) : yield return data;
IntList.cs (140) : }
ArrayList.cs (34) : return NumElements;
ArrayList.cs (42) : if (index < 0 || index >= NumElements)
ArrayList.cs (43) : {
ArrayList.cs (44) : return default(T);
ArrayList.cs (45) : }
ArrayList.cs (46) : else
ArrayList.cs (47) : {
ArrayList.cs (48) : return Values[index];
ArrayList.cs (49) : }
ArrayList.cs (57) : if (NumElements == Values.Length)
ArrayList.cs (58) : {
ArrayList.cs (59) : Resize(NumElements * 2);
ArrayList.cs (60) : }
ArrayList.cs (61) : else
ArrayList.cs (62) : {
ArrayList.cs (63) : Values[NumElements] = value;
ArrayList.cs (64) : NumElements++;
ArrayList.cs (65) : }
ArrayList.cs (75) : if (index < 0 || index >= NumElements)
ArrayList.cs (76) : {
ArrayList.cs (77) : return default(T);
ArrayList.cs (78) : }
ArrayList.cs (79) : else
ArrayList.cs (80) : {
ArrayList.cs (81) : T delate = Values[index];
ArrayList.cs (82) : for (int i = index; i < NumElements - 1; i++)
ArrayList.cs (83) : {
ArrayList.cs (84) : Values[i] = Values[i + 1];
ArrayList.cs (85) : }
ArrayList.cs (86) : NumElements--;
ArrayList.cs (87) : return delate;
ArrayList.cs (88) : }
ArrayList.cs (97) : NumElements = 0;
ArrayList.cs (104) : T[] newS = new T[newSize];
ArrayList.cs (105) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (106) : {
ArrayList.cs (107) : nuevo[i] = Values[i];
ArrayList.cs (108) : }
ArrayList.cs (109) : Values = newS;
ArrayList.cs (114) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (115) : {
ArrayList.cs (116) : yield return Values[i];
ArrayList.cs (117) : }
List.cs (47) : return m_numItems;
List.cs (54) : if (index < 0 || index >= m_numItems)
List.cs (55) : {
List.cs (57) : }
List.cs (58) : else
List.cs (59) : {
List.cs (60) : int i = 0;
List.cs (61) : ListNode<T> aux = First;
List.cs (62) : while (i < index)
List.cs (63) : {
List.cs (64) : aux = aux.Next;
List.cs (65) : i++;
List.cs (66) : }
List.cs (67) : return aux.Value;
List.cs (68) : }
List.cs (75) : ListNode<T> newnode = new ListNode<T>(value);
List.cs (76) : if (First == null)
List.cs (77) : {
List.cs (78) : First = newnode;
List.cs (79) : }
List.cs (80) : else
List.cs (81) : {
List.cs (82) : ListNode<T> aux = First;
List.cs (83) : while (aux.Next != null)
List.cs (84) : {
List.cs (85) : aux = aux.Next;
List.cs (86) : }
List.cs (87) : aux.Next = newnode;
List.cs (88) : }
List.cs (94) : if (index < 0 || index >= m_numItems)
List.cs (95) : {
List.cs (97) : }
List.cs (98) : else if (index == 0)
List.cs (99) : {
List.cs (100) : T data = First.Value;
List.cs (101) : First = First.Next;
List.cs (102) : m_numItems--;
List.cs (103) : return data;
List.cs (104) : }
List.cs (105) : else
List.cs (106) : {
List.cs (107) : ListNode<T> aux = First;
List.cs (108) : int i = 0;
List.cs (109) : while (i < index - 1)
List.cs (110) : {
List.cs (111) : aux = aux.Next;
List.cs (112) : i++;
List.cs (113) : }
List.cs (114) : aux.Next = aux.Next.Next;
List.cs (115) : if (index == m_numItems - 1)
List.cs (116) : {
List.cs (117) : Last = aux;
List.cs (118) : }
List.cs (119) : m_numItems--;
List.cs (120) : return aux.Value;
List.cs (121) : }
List.cs (128) : m_numItems = 0;
List.cs (129) : First = null;
List.cs (130) : Last = null;
List.cs (137) : ListNode<T> aux = First;
List.cs (138) : while (aux != null)
List.cs (139) : {
List.cs (140) : T data = aux.Value;
List.cs (141) : aux = aux.Next;
List.cs (142) : yield return data;
List.cs (143) : }
Queue.cs (6) : T[] elements = new T[10];
Queue.cs (7) : int top = -1;
Queue.cs (8) : int last = -1;
Queue.cs (21) : return last+1;
Queue.cs (27) : top = -1;
Queue.cs (28) : last = -1;
Queue.cs (33) : if (top == -1 && last == -1)
Queue.cs (34) : {
Queue.cs (35) : top = 0;
Queue.cs (36) : last = 0;
Queue.cs (37) : elements[last] = value;
Queue.cs (38) : }
Queue.cs (39) : else
Queue.cs (40) : {
Queue.cs (41) : last = last + 1;
Queue.cs (42) : elements[last] = value;
Queue.cs (43) : }
Stack.cs (29) : if (top == elements.Length - 1)
Stack.cs (30) : {
Stack.cs (31) : T[] element = new T[element.Length * 2];
Stack.cs (32) : }
Stack.cs (33) : top++;
Stack.cs (34) : element[top] = value;
Stack.cs (40) : if (top == -1)
Stack.cs (41) : {
Stack.cs (43) : }
Stack.cs (44) : else
Stack.cs (45) : {
Stack.cs (46) : T dato = element[top];
Stack.cs (47) : top--;
Stack.cs (48) : return dato;
Stack.cs (49) : }
