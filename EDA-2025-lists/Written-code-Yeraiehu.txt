IntArrayList.cs (36) : return NumElements;
IntArrayList.cs (44) : if (Values.Length <= index || index<0)
IntArrayList.cs (45) : {
IntArrayList.cs (47) : }
IntArrayList.cs (48) : return Values[index];
IntArrayList.cs (55) : //[After #12 -> If there is no place, resize (double the size) and add]รง
IntArrayList.cs (56) : if (NumElements == Values.Length)
IntArrayList.cs (57) : {
IntArrayList.cs (58) : Resize(Values.Length*2);
IntArrayList.cs (59) : }
IntArrayList.cs (60) : Values[NumElements] = value;
IntArrayList.cs (61) : NumElements++;
IntArrayList.cs (70) : if (NumElements <= index || index < 0)
IntArrayList.cs (71) : {
IntArrayList.cs (72) : return -1;
IntArrayList.cs (73) : }
IntArrayList.cs (74) : else
IntArrayList.cs (75) : {
IntArrayList.cs (76) : int removed = Values[index];
IntArrayList.cs (77) : NumElements--;
IntArrayList.cs (78) : for (int i = index; i < NumElements; i++)
IntArrayList.cs (79) : {
IntArrayList.cs (80) : Values[i] = Values[i + 1];
IntArrayList.cs (81) : }
IntArrayList.cs (82) : return removed;
IntArrayList.cs (83) : }
IntArrayList.cs (91) : NumElements = 0;
IntArrayList.cs (98) : int[] newValues = new int[newSize];
IntArrayList.cs (99) : for (int i=0;i<Values.Length;i++)
IntArrayList.cs (100) : {
IntArrayList.cs (101) : newValues[i] = Values[i];
IntArrayList.cs (102) : }
IntArrayList.cs (103) : Values = newValues;
IntArrayList.cs (111) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (112) : {
IntArrayList.cs (113) : yield return Get(i);
IntArrayList.cs (114) : }
IntList.cs (42) : int contador=0;
IntList.cs (43) : IntListNode node=First;
IntList.cs (44) : if (node != null)
IntList.cs (45) : {
IntList.cs (46) : contador++;
IntList.cs (47) : while (node.Next != null)
IntList.cs (48) : {
IntList.cs (49) : contador++;
IntList.cs (50) : node = node.Next;
IntList.cs (51) : }
IntList.cs (52) : }
IntList.cs (54) : return contador;
IntList.cs (62) : IntListNode node = First;
IntList.cs (63) : if(index>=Count())
IntList.cs (64) : {
IntList.cs (66) : }
IntList.cs (67) : for(int i=1; i<=index;i++)
IntList.cs (68) : {
IntList.cs (69) : node=node.Next;
IntList.cs (70) : }
IntList.cs (71) : return node.Value;
IntList.cs (78) : IntListNode node = First;
IntList.cs (79) : IntListNode newNode = new IntListNode(value);
IntList.cs (80) : if (node != null)
IntList.cs (81) : {
IntList.cs (82) : while (node.Next != null)
IntList.cs (83) : {
IntList.cs (84) : node = node.Next;
IntList.cs (85) : }
IntList.cs (86) : node.Next = newNode;
IntList.cs (87) : node = node.Next;
IntList.cs (88) : node.Next = null;
IntList.cs (89) : }
IntList.cs (90) : else
IntList.cs (91) : {
IntList.cs (92) : First = newNode;
IntList.cs (93) : node = First;
IntList.cs (94) : node.Next = null;
IntList.cs (95) : }
IntList.cs (105) : int removed;
IntList.cs (106) : if (index >= Count())
IntList.cs (107) : {
IntList.cs (108) : removed = -1;
IntList.cs (109) : }
IntList.cs (110) : else if (index == 0)
IntList.cs (111) : {
IntList.cs (112) : removed = Get(index);
IntList.cs (113) : First = First.Next;
IntList.cs (114) : }
IntList.cs (115) : else
IntList.cs (116) : {
IntList.cs (117) : IntListNode node = First;
IntList.cs (118) : for (int i = 1; i < index; i++)
IntList.cs (119) : {
IntList.cs (120) : node = node.Next;
IntList.cs (121) : }
IntList.cs (122) : removed = Get(index);
IntList.cs (123) : if (index == Count() - 1)
IntList.cs (124) : {
IntList.cs (125) : node.Next = null;
IntList.cs (126) : }
IntList.cs (127) : else
IntList.cs (128) : {
IntList.cs (129) : node.Next = node.Next.Next;
IntList.cs (130) : }
IntList.cs (131) : }
IntList.cs (132) : return removed;
IntList.cs (139) : First = null;
IntList.cs (146) : for (int i = 0; i < Count(); i++)
IntList.cs (147) : {
IntList.cs (148) : yield return Get(i);
IntList.cs (149) : }
ArrayList.cs (9) : int FirstIndex;
ArrayList.cs (10) : int LastIndex;
ArrayList.cs (17) : FirstIndex = 0;
ArrayList.cs (18) : LastIndex = n - 1;
ArrayList.cs (38) : return NumElements;
ArrayList.cs (46) : if (NumElements <= index || index<0)
ArrayList.cs (47) : {
ArrayList.cs (49) : }
ArrayList.cs (50) : return Values[index+FirstIndex];
ArrayList.cs (58) : if (NumElements+FirstIndex == Values.Length)
ArrayList.cs (59) : {
ArrayList.cs (60) : Resize(Values.Length * 2);
ArrayList.cs (61) : }
ArrayList.cs (62) : Values[NumElements+FirstIndex] = value;
ArrayList.cs (63) : NumElements++;
ArrayList.cs (64) : LastIndex++;
ArrayList.cs (75) : if (NumElements <= index || index < 0)
ArrayList.cs (76) : {
ArrayList.cs (78) : }
ArrayList.cs (79) : else
ArrayList.cs (80) : {
ArrayList.cs (81) : T removed = Values[index+FirstIndex];
ArrayList.cs (82) : NumElements--;
ArrayList.cs (83) : if (index == 0)
ArrayList.cs (84) : {
ArrayList.cs (85) : FirstIndex++;
ArrayList.cs (86) : }
ArrayList.cs (87) : else if (index == NumElements - 1)
ArrayList.cs (88) : {
ArrayList.cs (89) : LastIndex--;
ArrayList.cs (90) : }
ArrayList.cs (91) : else
ArrayList.cs (92) : {
ArrayList.cs (93) : for (int i = index + FirstIndex; i < NumElements; i++)
ArrayList.cs (94) : {
ArrayList.cs (95) : Values[i] = Values[i + 1];
ArrayList.cs (96) : }
ArrayList.cs (97) : }
ArrayList.cs (98) : return removed;
ArrayList.cs (100) : }
ArrayList.cs (107) : NumElements = 0;
ArrayList.cs (108) : FirstIndex = 0;
ArrayList.cs (109) : LastIndex = 0;
ArrayList.cs (117) : T[] newValues = new T[newSize];
ArrayList.cs (118) : for (int i=0;i<NumElements;i++)
ArrayList.cs (119) : {
ArrayList.cs (120) : newValues[i] = Values[i+FirstIndex];
ArrayList.cs (121) : }
ArrayList.cs (122) : Values = newValues;
ArrayList.cs (128) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (129) : {
ArrayList.cs (130) : yield return Get(i);
ArrayList.cs (131) : }
List.cs (8) : public int NumElements = 0;
List.cs (28) : int NumElements = 0;
List.cs (48) : return NumElements;
List.cs (56) : ListNode<T> node = First;
List.cs (57) : if(index>=Count())
List.cs (58) : {
List.cs (60) : }
List.cs (61) : for(int i=1; i<=index;i++)
List.cs (62) : {
List.cs (63) : node=node.Next;
List.cs (64) : }
List.cs (65) : return node.Value;
List.cs (72) : ListNode<T> node = Last;
List.cs (73) : ListNode<T> newNode = new ListNode<T>(value);
List.cs (74) : if (node != null)
List.cs (75) : {
List.cs (76) : node.Next = newNode;
List.cs (77) : node = node.Next;
List.cs (78) : node.Next = null;
List.cs (79) : }
List.cs (80) : else
List.cs (81) : {
List.cs (82) : First = newNode;
List.cs (83) : node = First;
List.cs (84) : node.Next = null;
List.cs (85) : }
List.cs (86) : Last = node;
List.cs (87) : NumElements++;
List.cs (93) : T removed;
List.cs (94) : NumElements--;
List.cs (95) : if (index >= Count())
List.cs (96) : {
List.cs (98) : }
List.cs (99) : else if (index == 0)
List.cs (100) : {
List.cs (101) : removed = Get(index);
List.cs (102) : First = First.Next;
List.cs (103) : }
List.cs (104) : else
List.cs (105) : {
List.cs (106) : ListNode<T> node = First;
List.cs (107) : for (int i = 1; i < index; i++)
List.cs (108) : {
List.cs (109) : node = node.Next;
List.cs (110) : }
List.cs (111) : removed = Get(index);
List.cs (112) : if (index == Count() - 1)
List.cs (113) : {
List.cs (114) : node.Next = null;
List.cs (115) : Last = node;
List.cs (116) : }
List.cs (117) : else
List.cs (118) : {
List.cs (119) : node.Next = node.Next.Next;
List.cs (120) : }
List.cs (121) : }
List.cs (122) : return removed;
List.cs (129) : First = null;
List.cs (130) : Last = null;
List.cs (131) : NumElements = 0;
List.cs (137) : for (int i = 0; i < Count(); i++)
List.cs (138) : {
List.cs (139) : yield return Get(i);
List.cs (140) : }
