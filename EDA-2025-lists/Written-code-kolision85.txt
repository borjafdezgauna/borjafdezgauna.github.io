IntArrayList.cs (36) : return NumElements;
IntArrayList.cs (45) : if (index < 0 || index > NumElements)
IntArrayList.cs (46) : {
IntArrayList.cs (48) : }
IntArrayList.cs (49) : else
IntArrayList.cs (50) : {
IntArrayList.cs (51) : return Values[index];
IntArrayList.cs (52) : }
IntArrayList.cs (60) : if (NumElements == Values.Length)
IntArrayList.cs (61) : {
IntArrayList.cs (62) : Resize(Values.Length * 2);
IntArrayList.cs (63) : Add(value);
IntArrayList.cs (66) : }
IntArrayList.cs (67) : else
IntArrayList.cs (68) : {
IntArrayList.cs (69) : Values[NumElements] = value;
IntArrayList.cs (70) : NumElements++;
IntArrayList.cs (71) : }
IntArrayList.cs (80) : int removed = Values[index];
IntArrayList.cs (82) : if (index < 0 || index >= NumElements)
IntArrayList.cs (83) : {
IntArrayList.cs (84) : return -1;
IntArrayList.cs (85) : }
IntArrayList.cs (86) : else
IntArrayList.cs (87) : {
IntArrayList.cs (88) : for (int i = index; i < NumElements - 1; i++)
IntArrayList.cs (89) : {
IntArrayList.cs (90) : Values[i] = Values[i + 1];
IntArrayList.cs (91) : }
IntArrayList.cs (92) : }
IntArrayList.cs (93) : Values[NumElements - 1] = 0;
IntArrayList.cs (94) : NumElements--;
IntArrayList.cs (95) : return removed;
IntArrayList.cs (102) : NumElements = 0;
IntArrayList.cs (108) : int[] newA = new int[newSize];
IntArrayList.cs (109) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (110) : {
IntArrayList.cs (111) : newA[i] = Values[i];
IntArrayList.cs (112) : }
IntArrayList.cs (113) : Values = newA;
IntArrayList.cs (122) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (123) : {
IntArrayList.cs (124) : yield return Values[i];
IntArrayList.cs (125) : }
IntList.cs (3) : using System.Diagnostics;
IntList.cs (4) : using System.Security.AccessControl;
IntList.cs (45) : int count = 0;
IntList.cs (46) : IntListNode node = First;
IntList.cs (48) : while (node != null)
IntList.cs (49) : {
IntList.cs (50) : count++;
IntList.cs (51) : node = node.Next;
IntList.cs (52) : }
IntList.cs (53) : return count;
IntList.cs (61) : int counter = 0;
IntList.cs (62) : int element = 0;
IntList.cs (63) : IntListNode node = First;
IntList.cs (65) : if (node != null)
IntList.cs (66) : {
IntList.cs (67) : while (node != null)
IntList.cs (68) : {
IntList.cs (69) : if (counter == index)
IntList.cs (70) : {
IntList.cs (71) : element = node.Value;
IntList.cs (72) : return element;
IntList.cs (73) : }
IntList.cs (74) : node = node.Next;
IntList.cs (75) : counter++;
IntList.cs (76) : }
IntList.cs (77) : }
IntList.cs (78) : return 0;
IntList.cs (87) : IntListNode node = new IntListNode(value);
IntList.cs (88) : if (First == null)
IntList.cs (89) : {
IntList.cs (90) : First = node;
IntList.cs (91) : }
IntList.cs (92) : else
IntList.cs (93) : {
IntList.cs (94) : IntListNode actual = First;
IntList.cs (95) : while (actual.Next != null)
IntList.cs (96) : {
IntList.cs (97) : actual = actual.Next;
IntList.cs (98) : }
IntList.cs (99) : actual.Next = node;
IntList.cs (100) : }
IntList.cs (108) : int element = 0;
IntList.cs (109) : IntListNode node = First;
IntList.cs (111) : if (index < 0 || index > Count() || First == null)
IntList.cs (112) : {
IntList.cs (113) : return -1;
IntList.cs (114) : }
IntList.cs (115) : else if (index == 0)
IntList.cs (116) : {
IntList.cs (117) : element = First.Value;
IntList.cs (118) : First = First.Next;
IntList.cs (119) : return element;
IntList.cs (120) : }
IntList.cs (121) : else
IntList.cs (122) : {
IntList.cs (124) : for (int i = 0; i < index - 1; i++)
IntList.cs (125) : {
IntList.cs (126) : if (node.Next == null)
IntList.cs (127) : {
IntList.cs (128) : return -1;
IntList.cs (129) : }
IntList.cs (130) : node = node.Next;
IntList.cs (133) : }
IntList.cs (134) : if (node.Next == null)
IntList.cs (135) : {
IntList.cs (136) : return -1;
IntList.cs (138) : element = node.Next.Value;
IntList.cs (139) : node.Next = node.Next.Next;
IntList.cs (140) : }
IntList.cs (141) : return element;
IntList.cs (142) : }
IntList.cs (148) : First = null;
IntList.cs (155) : IntListNode node = First;
IntList.cs (156) : while (node != null)
IntList.cs (157) : {
IntList.cs (158) : yield return node.Value;
IntList.cs (159) : node = node.Next;
IntList.cs (160) : }
ArrayList.cs (34) : return NumElements;
ArrayList.cs (42) : if (index < 0 || index >= NumElements)
ArrayList.cs (43) : {
ArrayList.cs (45) : }
ArrayList.cs (46) : else
ArrayList.cs (47) : {
ArrayList.cs (48) : return Values[index];
ArrayList.cs (49) : }
ArrayList.cs (57) : if (NumElements == Values.Length)
ArrayList.cs (58) : {
ArrayList.cs (59) : Resize(Values.Length * 2);
ArrayList.cs (60) : Add(value);
ArrayList.cs (62) : }
ArrayList.cs (63) : else
ArrayList.cs (64) : {
ArrayList.cs (65) : Values[NumElements] = value;
ArrayList.cs (66) : NumElements++;
ArrayList.cs (67) : }
ArrayList.cs (77) : if (index < 0 || index >= NumElements)
ArrayList.cs (78) : {
ArrayList.cs (80) : }
ArrayList.cs (81) : else
ArrayList.cs (82) : {
ArrayList.cs (83) : for (int i = index; i < NumElements; i++)
ArrayList.cs (84) : {
ArrayList.cs (85) : Values[i] = Values[i + 1];
ArrayList.cs (86) : }
ArrayList.cs (87) : }
ArrayList.cs (88) : NumElements--;
ArrayList.cs (89) : return Values[index];
ArrayList.cs (97) : NumElements = 0;
ArrayList.cs (105) : T[] newA = new T[newSize];
ArrayList.cs (106) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (107) : {
ArrayList.cs (108) : newA[i] = Values[i];
ArrayList.cs (109) : }
ArrayList.cs (110) : Values = newA;
ArrayList.cs (119) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (120) : {
ArrayList.cs (121) : yield return Values[i];
ArrayList.cs (122) : }
List.cs (3) : using System.Reflection;
List.cs (4) : using System.Text.RegularExpressions;
List.cs (5) : using System.Xml;
List.cs (11) : public ListNode<T> Previous = null;
List.cs (50) : ListNode<T> node = First;
List.cs (51) : int count = 0;
List.cs (52) : while (node != null)
List.cs (53) : {
List.cs (54) : node = node.Next;
List.cs (55) : count++;
List.cs (56) : }
List.cs (57) : return count;
List.cs (65) : int counter = 0;
List.cs (66) : ListNode<T> node = First;
List.cs (67) : T value = node.Value;
List.cs (68) : for (int i = 0; i < Count(); i++)
List.cs (69) : {
List.cs (70) : if (index == counter)
List.cs (71) : {
List.cs (72) : value = node.Value;
List.cs (73) : }
List.cs (74) : node = node.Next;
List.cs (75) : counter++;
List.cs (77) : }
List.cs (78) : return value;
List.cs (85) : ListNode<T> node = new ListNode<T>(value);
List.cs (86) : if (First == null)
List.cs (87) : {
List.cs (88) : First = node;
List.cs (89) : Last = node;
List.cs (90) : }
List.cs (91) : else
List.cs (92) : {
List.cs (93) : Last.Previous = node;
List.cs (94) : Last.Next = node;
List.cs (95) : Last = node;
List.cs (96) : }
List.cs (104) : ListNode<T> rNode;
List.cs (105) : ListNode<T> node = First;
List.cs (106) : if (index >= Count() || index < 0)
List.cs (107) : {
List.cs (109) : }
List.cs (110) : else if (index == 0)
List.cs (111) : {
List.cs (112) : rNode = First;
List.cs (113) : First = First.Next;
List.cs (114) : if (First == null)
List.cs (115) : {
List.cs (116) : Last = null;
List.cs (118) : }
List.cs (119) : return rNode.Value;
List.cs (121) : }
List.cs (122) : else
List.cs (123) : {
List.cs (124) : for (int i = 0; i < index - 1; i++)
List.cs (125) : {
List.cs (126) : node = node.Next;
List.cs (127) : }
List.cs (128) : }
List.cs (129) : rNode = node.Next;
List.cs (131) : if (rNode.Next == null)
List.cs (132) : {
List.cs (133) : Last = node;
List.cs (134) : node.Next = null;
List.cs (135) : }
List.cs (136) : else
List.cs (137) : {
List.cs (138) : node.Next = rNode.Next;
List.cs (139) : }
List.cs (141) : return rNode.Value;
List.cs (147) : First = null;
List.cs (155) : ListNode<T> node = First;
List.cs (156) : while (node != null)
List.cs (157) : {
List.cs (158) : yield return node.Value;
List.cs (159) : node = node.Next;
List.cs (160) : }
Queue.cs (7) : private List<T> list = new List<T>();
Queue.cs (11) : return list.ToString();
Queue.cs (18) : return list.Count();
Queue.cs (24) : list.Clear();
Queue.cs (29) : list.Add(value);
Queue.cs (35) : int first = 0;
Queue.cs (36) : return list.Remove(first);
Stack.cs (7) : private List<T> list = new List<T>();
Stack.cs (12) : return list.ToString();
Stack.cs (19) : return list.Count();
Stack.cs (25) : list.Clear();
Stack.cs (30) : list.Add(value);
Stack.cs (35) : int last = list.Count() - 1;
Stack.cs (36) : return list.Remove(last);
