IntArrayList.cs (36) : return NumElements;
IntArrayList.cs (45) : if (Count() <= index)
IntArrayList.cs (46) : {
IntArrayList.cs (48) : }
IntArrayList.cs (50) : return Values[index];
IntArrayList.cs (59) : if (Values.Length == NumElements)
IntArrayList.cs (60) : {
IntArrayList.cs (61) : Resize(Values.Length * 2);
IntArrayList.cs (62) : }
IntArrayList.cs (64) : Values[NumElements] = value;
IntArrayList.cs (65) : NumElements++;
IntArrayList.cs (75) : if (index >= Values.Length)
IntArrayList.cs (76) : {
IntArrayList.cs (77) : return -1;
IntArrayList.cs (78) : }
IntArrayList.cs (80) : int numEliminado = Values[index];
IntArrayList.cs (83) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (84) : {
IntArrayList.cs (85) : if (i > index)
IntArrayList.cs (86) : {
IntArrayList.cs (87) : Values[i - 1] = Values[i];
IntArrayList.cs (88) : }
IntArrayList.cs (90) : }
IntArrayList.cs (92) : NumElements--;
IntArrayList.cs (93) : return numEliminado;
IntArrayList.cs (101) : NumElements = 0;
IntArrayList.cs (109) : int[] Ampliacion = new int[newSize];
IntArrayList.cs (111) : for (int i =0; i<NumElements;i++)
IntArrayList.cs (112) : {
IntArrayList.cs (113) : Ampliacion[i] = Values[i];
IntArrayList.cs (114) : }
IntArrayList.cs (115) : Values = Ampliacion;
IntArrayList.cs (124) : for (int i=0; i<NumElements;i++)
IntArrayList.cs (125) : {
IntArrayList.cs (126) : yield return Values[i];
IntArrayList.cs (127) : }
IntList.cs (44) : IntListNode node = First;
IntList.cs (45) : int cantidad=1;
IntList.cs (47) : while (node != null && node.Next != null)
IntList.cs (48) : {
IntList.cs (49) : cantidad++;
IntList.cs (50) : node = node.Next;
IntList.cs (51) : }
IntList.cs (53) : if (node == null)
IntList.cs (54) : {
IntList.cs (55) : return 0;
IntList.cs (56) : }
IntList.cs (58) : return cantidad;
IntList.cs (67) : if (index >= Count())
IntList.cs (68) : {
IntList.cs (69) : return 0;
IntList.cs (70) : }
IntList.cs (72) : for (int i = 0; i < index; i++)
IntList.cs (77) : return node.Value;
IntList.cs (104) : int valor = -1;
IntList.cs (107) : if (Count() <= index)
IntList.cs (108) : {
IntList.cs (109) : return valor;
IntList.cs (110) : }
IntList.cs (112) : if (node.Next != null && index==0)
IntList.cs (114) : valor = First.Value;
IntList.cs (115) : First = First.Next;
IntList.cs (116) : node = First;
IntList.cs (117) : return valor;
IntList.cs (119) : else if (index ==0)
IntList.cs (121) : valor = First.Value;
IntList.cs (122) : First = null;
IntList.cs (123) : node = First;
IntList.cs (124) : return valor;
IntList.cs (125) : }
IntList.cs (128) : for (int i = 0; i < index-1; i++)
IntList.cs (129) : {
IntList.cs (130) : node = node.Next;
IntList.cs (133) : if (node.Next.Next != null)
IntList.cs (134) : {
IntList.cs (135) : valor = node.Next.Value;
IntList.cs (136) : node.Next = node.Next.Next;
IntList.cs (137) : }
IntList.cs (138) : else
IntList.cs (139) : {
IntList.cs (140) : valor = node.Next.Value;
IntList.cs (141) : node.Next = null;
IntList.cs (142) : }
IntList.cs (144) : return valor;
IntList.cs (153) : First = null;
IntList.cs (162) : IntListNode node = First;
IntList.cs (164) : while (node != null)
IntList.cs (165) : {
IntList.cs (166) : yield return node.Value;
IntList.cs (167) : node = node.Next;
IntList.cs (168) : }
