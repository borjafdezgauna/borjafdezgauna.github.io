IntArrayList.cs (3) : using System.Net.Quic;
IntArrayList.cs (4) : using System.Security.Cryptography;
IntArrayList.cs (5) : using Microsoft.Win32.SafeHandles;
IntArrayList.cs (38) : return NumElements;
IntArrayList.cs (46) : if (index < 0 || index > NumElements - 1)
IntArrayList.cs (47) : {
IntArrayList.cs (49) : }
IntArrayList.cs (50) : return Values[index];
IntArrayList.cs (58) : if (Values.Length == NumElements-1)
IntArrayList.cs (59) : {
IntArrayList.cs (60) : Resize((NumElements-1) * 2);
IntArrayList.cs (61) : Values[NumElements] = value;
IntArrayList.cs (62) : NumElements += 1;
IntArrayList.cs (63) : }
IntArrayList.cs (64) : else
IntArrayList.cs (65) : {
IntArrayList.cs (66) : Values[NumElements] = value;
IntArrayList.cs (67) : NumElements += 1;
IntArrayList.cs (68) : }
IntArrayList.cs (77) : if (index < 0 || index > NumElements - 1)
IntArrayList.cs (78) : {
IntArrayList.cs (79) : return -1;
IntArrayList.cs (80) : }
IntArrayList.cs (81) : int removedItem = Values[index];
IntArrayList.cs (82) : for (int i = index; i < NumElements-1; i++)
IntArrayList.cs (83) : {
IntArrayList.cs (84) : Values[i] = Values[i + 1];
IntArrayList.cs (85) : }
IntArrayList.cs (86) : NumElements -= 1;
IntArrayList.cs (87) : return removedItem;
IntArrayList.cs (94) : NumElements = 0;
IntArrayList.cs (99) : //TODO #11: resize :)
IntArrayList.cs (100) : int[] newValues = new int[newSize];
IntArrayList.cs (101) : for (int i = 0; i < Values.Length; i++)
IntArrayList.cs (102) : {
IntArrayList.cs (103) : newValues[i] = Values[i];
IntArrayList.cs (104) : }
IntArrayList.cs (105) : Values = newValues;
IntArrayList.cs (111) : foreach (int value in Values) {
IntArrayList.cs (112) : yield return value;
IntArrayList.cs (113) : }
IntList.cs (4) : using System.Xml;
IntList.cs (45) : int count = 0;
IntList.cs (79) : IntListNode node = First;
IntList.cs (80) : IntListNode addedNode = new IntListNode(value);
IntList.cs (82) : if (First == null)
IntList.cs (83) : {
IntList.cs (84) : First = addedNode;
IntList.cs (85) : return;
IntList.cs (86) : }
IntList.cs (87) : while (node.Next != null)
IntList.cs (88) : {
IntList.cs (89) : node = node.Next;
IntList.cs (91) : node.Next = addedNode;
IntList.cs (92) : }
IntList.cs (102) : while (node.Next != null && count + 1 != index && index != 0)
IntList.cs (104) : node = node.Next;
IntList.cs (105) : count++;
IntList.cs (106) : }
IntList.cs (107) : int valorRemovido = node.Next.Value;
IntList.cs (109) : if (count + 1 == index && node.Next.Next == null)
IntList.cs (110) : {
IntList.cs (111) : node.Next = null;
IntList.cs (112) : }
IntList.cs (114) : if (count + 1 == index && node.Next.Next != null)
IntList.cs (115) : {
IntList.cs (116) : node.Next = node.Next.Next;
IntList.cs (117) : }
IntList.cs (119) : if (index == 0)
IntList.cs (120) : {
IntList.cs (121) : valorRemovido = First.Value;
IntList.cs (122) : First = First.Next;
IntList.cs (124) : return valorRemovido;
IntList.cs (132) : IntListNode node = First;
IntList.cs (133) : First = null;
IntList.cs (139) : IntListNode node = First;
IntList.cs (140) : while (node != null)
IntList.cs (141) : {
IntList.cs (142) : yield return node.Value;
IntList.cs (143) : node = node.Next;
IntList.cs (144) : }
ArrayList.cs (33) : return NumElements;
