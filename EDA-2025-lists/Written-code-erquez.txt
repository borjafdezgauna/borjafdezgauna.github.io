IntArrayList.cs (3) : using System.Net.Quic;
IntArrayList.cs (4) : using System.Security.Cryptography;
IntArrayList.cs (5) : using Microsoft.Win32.SafeHandles;
IntArrayList.cs (38) : return NumElements;
IntArrayList.cs (46) : if (index < 0 || index > NumElements - 1)
IntArrayList.cs (47) : {
IntArrayList.cs (49) : }
IntArrayList.cs (50) : return Values[index];
IntArrayList.cs (58) : if (Values.Length == NumElements)
IntArrayList.cs (59) : {
IntArrayList.cs (60) : Resize(Values.Length * 2);
IntArrayList.cs (61) : Values[NumElements] = value;
IntArrayList.cs (62) : NumElements += 1;
IntArrayList.cs (63) : }
IntArrayList.cs (64) : else
IntArrayList.cs (65) : {
IntArrayList.cs (66) : Values[NumElements] = value;
IntArrayList.cs (67) : NumElements += 1;
IntArrayList.cs (68) : }
IntArrayList.cs (77) : if (index < 0 || index > NumElements - 1)
IntArrayList.cs (78) : {
IntArrayList.cs (79) : return -1;
IntArrayList.cs (80) : }
IntArrayList.cs (81) : int removedItem = Values[index];
IntArrayList.cs (82) : for (int i = index; i < NumElements-1; i++)
IntArrayList.cs (83) : {
IntArrayList.cs (84) : Values[i] = Values[i + 1];
IntArrayList.cs (85) : }
IntArrayList.cs (86) : NumElements -= 1;
IntArrayList.cs (87) : return removedItem;
IntArrayList.cs (94) : NumElements = 0;
IntArrayList.cs (99) : //TODO #11: resize :)
IntArrayList.cs (100) : int[] newValues = new int[newSize];
IntArrayList.cs (101) : for (int i = 0; i < Values.Length; i++)
IntArrayList.cs (102) : {
IntArrayList.cs (103) : newValues[i] = Values[i];
IntArrayList.cs (104) : }
IntArrayList.cs (105) : Values = newValues;
IntArrayList.cs (111) : foreach (int value in Values)
IntArrayList.cs (112) : {
IntArrayList.cs (113) : yield return value;
IntArrayList.cs (114) : }
IntList.cs (4) : using System.Xml;
IntList.cs (45) : int count = 0;
IntList.cs (60) : while (node != null && count != index)
IntList.cs (79) : IntListNode node = First;
IntList.cs (80) : IntListNode addedNode = new IntListNode(value);
IntList.cs (82) : if (First == null)
IntList.cs (83) : {
IntList.cs (84) : First = addedNode;
IntList.cs (85) : return;
IntList.cs (86) : }
IntList.cs (87) : while (node.Next != null)
IntList.cs (88) : {
IntList.cs (89) : node = node.Next;
IntList.cs (91) : node.Next = addedNode;
IntList.cs (92) : }
IntList.cs (101) : if (index < 0 || First == null)
IntList.cs (103) : return -1;
IntList.cs (104) : }
IntList.cs (105) : int valorRemovido;
IntList.cs (107) : if (index == 0)
IntList.cs (108) : {
IntList.cs (109) : valorRemovido = First.Value;
IntList.cs (110) : First = First.Next;
IntList.cs (111) : return valorRemovido;
IntList.cs (112) : }
IntList.cs (114) : while (node != null && count + 1 < index)
IntList.cs (115) : {
IntList.cs (116) : node = node.Next;
IntList.cs (117) : count++;
IntList.cs (118) : }
IntList.cs (120) : if (node == null || node.Next == null)
IntList.cs (121) : {
IntList.cs (122) : return -1;
IntList.cs (125) : valorRemovido = node.Next.Value;
IntList.cs (126) : node.Next = node.Next.Next;
IntList.cs (128) : return valorRemovido;
IntList.cs (136) : IntListNode node = First;
IntList.cs (137) : First = null;
IntList.cs (143) : IntListNode node = First;
IntList.cs (144) : while (node != null)
IntList.cs (145) : {
IntList.cs (146) : yield return node.Value;
IntList.cs (147) : node = node.Next;
IntList.cs (148) : }
ArrayList.cs (33) : return NumElements;
ArrayList.cs (40) : if (index < 0 || index > NumElements - 1)
ArrayList.cs (41) : {
ArrayList.cs (43) : }
ArrayList.cs (44) : return Values[index];
ArrayList.cs (52) : if (Values.Length == NumElements)
ArrayList.cs (53) : {
ArrayList.cs (54) : Resize(Values.Length * 2);
ArrayList.cs (55) : Values[NumElements] = value;
ArrayList.cs (56) : NumElements += 1;
ArrayList.cs (57) : }
ArrayList.cs (58) : else
ArrayList.cs (59) : {
ArrayList.cs (60) : Values[NumElements] = value;
ArrayList.cs (61) : NumElements += 1;
ArrayList.cs (62) : }
ArrayList.cs (71) : if (index < 0 || index > NumElements - 1)
ArrayList.cs (72) : {
ArrayList.cs (74) : }
ArrayList.cs (75) : T removedItem = Values[index];
ArrayList.cs (76) : for (int i = index; i < NumElements-1; i++)
ArrayList.cs (77) : {
ArrayList.cs (78) : Values[i] = Values[i + 1];
ArrayList.cs (79) : }
ArrayList.cs (80) : NumElements -= 1;
ArrayList.cs (81) : return removedItem;
ArrayList.cs (87) : NumElements = 0;
ArrayList.cs (94) : T[] newValues = new T[newSize];
ArrayList.cs (95) : for (int i = 0; i < Values.Length; i++)
ArrayList.cs (96) : {
ArrayList.cs (97) : newValues[i] = Values[i];
ArrayList.cs (98) : }
ArrayList.cs (99) : Values = newValues;
ArrayList.cs (105) : foreach (T value in Values)
ArrayList.cs (106) : {
ArrayList.cs (107) : yield return value;
ArrayList.cs (108) : }
List.cs (46) : ListNode<T> node = First;
List.cs (47) : int count = 0;
List.cs (48) : while (node != null)
List.cs (49) : {
List.cs (50) : node = node.Next;
List.cs (51) : count++;
List.cs (52) : }
List.cs (53) : return count;
List.cs (60) : ListNode<T> node = First;
List.cs (61) : int count = 0;
List.cs (62) : while (node != null && count != index)
List.cs (63) : {
List.cs (64) : node = node.Next;
List.cs (65) : count++;
List.cs (66) : }
List.cs (67) : if (node == null)
List.cs (68) : {
List.cs (70) : }
List.cs (71) : else
List.cs (72) : {
List.cs (73) : return node.Value;
List.cs (74) : }
List.cs (80) : ListNode<T> node = First;
List.cs (81) : ListNode<T> addedNode = new ListNode<T>(value);
List.cs (83) : if (First == null)
List.cs (84) : {
List.cs (85) : First = addedNode;
List.cs (86) : return;
List.cs (87) : }
List.cs (88) : while (node.Next != null)
List.cs (89) : {
List.cs (90) : node = node.Next;
List.cs (91) : }
List.cs (92) : node.Next = addedNode;
List.cs (98) : ListNode<T> node = First;
List.cs (99) : int count = 0;
List.cs (100) : if (index < 0 || First == null)
List.cs (101) : {
List.cs (102) : return default(T);
List.cs (103) : }
List.cs (104) : T valorRemovido;
List.cs (106) : if (index == 0)
List.cs (107) : {
List.cs (108) : valorRemovido = First.Value;
List.cs (109) : First = First.Next;
List.cs (110) : return valorRemovido;
List.cs (111) : }
List.cs (113) : while (node != null && count + 1 < index)
List.cs (114) : {
List.cs (115) : node = node.Next;
List.cs (116) : count++;
List.cs (117) : }
List.cs (119) : if (node == null || node.Next == null)
List.cs (120) : {
List.cs (122) : }
List.cs (124) : valorRemovido = node.Next.Value;
List.cs (125) : node.Next = node.Next.Next;
List.cs (127) : return valorRemovido;
List.cs (133) : ListNode<T> node = First;
List.cs (134) : First = null;
List.cs (140) : ListNode<T> node = First;
List.cs (141) : while (node != null)
List.cs (142) : {
List.cs (143) : yield return node.Value;
List.cs (144) : node = node.Next;
List.cs (145) : }
Queue.cs (6) : ArrayList<T> items = new ArrayList<T>();
Queue.cs (15) : return items.Count();
Queue.cs (20) : items.Clear();
Queue.cs (25) : items.Add(value);
Queue.cs (30) : return items.Remove(default);
Stack.cs (6) : List<T> items = new List<T>();
Stack.cs (18) : return items.Count();
Stack.cs (23) : items.Clear();
Stack.cs (28) : items.Add(value);
Stack.cs (33) : return items.Remove(0);
