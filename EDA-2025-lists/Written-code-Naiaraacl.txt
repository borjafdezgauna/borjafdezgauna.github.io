IntList.cs (3) : using System.Xml;
IntList.cs (66) : IntListNode node = First;
IntList.cs (73) : {
IntList.cs (74) : node = node.Next;
IntList.cs (75) : }
IntList.cs (84) : IntListNode newNode = new IntListNode(value);
IntList.cs (85) : if (First == null)
IntList.cs (86) : {
IntList.cs (87) : First = newNode;
IntList.cs (88) : return;
IntList.cs (89) : }
IntList.cs (90) : IntListNode node = First;
IntList.cs (91) : while (node.Next != null)
IntList.cs (92) : {
IntList.cs (93) : node = node.Next;
IntList.cs (94) : }
IntList.cs (95) : node.Next = newNode;
IntList.cs (103) : IntListNode node = First;
IntList.cs (113) : {
IntList.cs (118) : }
IntList.cs (120) : {
IntList.cs (131) : }
IntList.cs (155) : IntListNode node = First;
ArrayList.cs (2) : using System.Runtime.CompilerServices;
ArrayList.cs (35) : return NumElements;
ArrayList.cs (42) : if (index < 0 || index >= NumElements)
ArrayList.cs (43) : {
ArrayList.cs (45) : }
ArrayList.cs (47) : return Values[index];
ArrayList.cs (55) : if (Values.Length == NumElements)
ArrayList.cs (56) : {
ArrayList.cs (57) : Resize(Values.Length * 2);
ArrayList.cs (58) : }
ArrayList.cs (59) : Values[NumElements] = value;
ArrayList.cs (60) : NumElements++;
ArrayList.cs (69) : if (index < 0 || index >= NumElements)
ArrayList.cs (70) : {
ArrayList.cs (72) : }
ArrayList.cs (73) : T removed = Values[index];
ArrayList.cs (74) : for (int i = index; i < NumElements - 1; i++)
ArrayList.cs (75) : {
ArrayList.cs (76) : Values[i] = Values[i + 1];
ArrayList.cs (77) : }
ArrayList.cs (78) : NumElements--;
ArrayList.cs (79) : return removed;
ArrayList.cs (85) : NumElements = 0;
ArrayList.cs (92) : T[] Ampliacion = new T[newSize];
ArrayList.cs (94) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (95) : {
ArrayList.cs (96) : Ampliacion[i] = Values[i];
ArrayList.cs (97) : }
ArrayList.cs (98) : Values = Ampliacion;
ArrayList.cs (104) : for (int i = 0; i< NumElements; i++)
ArrayList.cs (105) : {
ArrayList.cs (106) : yield return Values[i];
ArrayList.cs (107) : }
List.cs (3) : using System.Xml;
List.cs (98) : ListNode<T> node = First;
List.cs (99) : if (index < 0 || index > Count())
List.cs (100) : {
List.cs (102) : }
List.cs (103) : for (int i = 0; i < index - 1; i++)
List.cs (104) : {
List.cs (105) : node = node.Next;
List.cs (107) : }
List.cs (108) : T removed = node.Next.Value;
List.cs (109) : for (int i = index - 1; i < Count(); i++)
List.cs (110) : {
List.cs (111) : node.Next = node.Next.Next;
List.cs (112) : }
List.cs (113) : return removed;
List.cs (120) : First = null;
List.cs (121) : ListNode<T> node = First;
List.cs (127) : ListNode<T> node = First;
List.cs (128) : while (node != null)
List.cs (129) : {
List.cs (130) : yield return node.Value;
List.cs (131) : node = node.Next;
List.cs (132) : }
