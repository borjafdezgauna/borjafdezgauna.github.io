IntArrayList.cs (59) : Resize(Values.Length * 2);
IntArrayList.cs (75) : else if (index == NumElements - 1)
IntArrayList.cs (76) : {
IntArrayList.cs (77) : int elem = Values[NumElements - 1];
IntArrayList.cs (78) : NumElements--;
IntArrayList.cs (79) : return elem;
IntArrayList.cs (80) : }
IntArrayList.cs (81) : else
IntArrayList.cs (82) : {
IntArrayList.cs (90) : }
IntList.cs (98) : if (index < 0 || First == null)
IntList.cs (99) : return -1;
IntList.cs (103) : int value = First.Value;
IntList.cs (105) : return value;
IntList.cs (108) : IntListNode prev = First;
IntList.cs (109) : IntListNode curr = First.Next;
IntList.cs (110) : int i = 1;
IntList.cs (113) : while (curr != null && i < index)
IntList.cs (115) : prev = curr;
IntList.cs (116) : curr = curr.Next;
IntList.cs (117) : i++;
IntList.cs (120) : if (curr == null)
IntList.cs (121) : {
IntList.cs (122) : return -1;
IntList.cs (125) : prev.Next = curr.Next;
IntList.cs (126) : return curr.Value;
IntList.cs (143) : IntListNode aux = First;
IntList.cs (144) : while (aux != null)
IntList.cs (146) : yield return aux.Value;
IntList.cs (147) : aux = aux.Next;
List.cs (9) : public ListNode<T> Previous = null;
List.cs (87) : Last.Previous = nuevo;
List.cs (98) : ListNode<T> Aborrar = null;
List.cs (100) : if (index < 0||index == m_numItems)
List.cs (101) : {
List.cs (103) : }
List.cs (104) : if (index == 0)
List.cs (105) : {
List.cs (106) : Aborrar = First;
List.cs (107) : First = First.Next;
List.cs (108) : }
List.cs (109) : else if (index == m_numItems -1)
List.cs (110) : {
List.cs (111) : Aborrar = Last;
List.cs (112) : Last = Last.Previous;
List.cs (113) : }
List.cs (114) : if (index < m_numItems / 2)
List.cs (115) : {
List.cs (116) : for (int i = 0; i < index; i++)
List.cs (117) : {
List.cs (118) : Aborrar = First;
List.cs (119) : First = First.Next;
List.cs (120) : }
List.cs (121) : }
List.cs (122) : else if (index > m_numItems / 2)
List.cs (123) : {
List.cs (124) : for (int i = 0; i < index; i++)
List.cs (125) : {
List.cs (126) : Aborrar = Last;
List.cs (127) : Last = Last.Previous;
List.cs (128) : }
List.cs (129) : }
List.cs (130) : m_numItems--;
List.cs (131) : return Aborrar.Value;
List.cs (146) : ListNode<T> node = First;
Queue.cs (6) : IList<T> Values = new List<T>();
Queue.cs (10) : return Values.ToString();
Queue.cs (16) : return Values.Count();
Queue.cs (22) : Values.Clear();
Queue.cs (28) : Values.Add(value);
Queue.cs (29) : }
Queue.cs (34) : T elem = Values.Remove(0);
Queue.cs (35) : return elem;
Stack.cs (6) : IList<T> Values = new ArrayList<T>();
Stack.cs (11) : return Values.ToString();
Stack.cs (17) : return Values.Count();
Stack.cs (23) : Values.Clear();
Stack.cs (29) : //LIFO
Stack.cs (30) : //Values.Add <-- aï¿½ade al final
Stack.cs (32) : List<T> nueva = new List<T>();
Stack.cs (33) : nueva.Add(value);
Stack.cs (36) : foreach (T v in Values)
Stack.cs (37) : {
Stack.cs (38) : nueva.Add(v);
Stack.cs (39) : }
Stack.cs (42) : Values = nueva;
Stack.cs (44) : }
Stack.cs (47) : public T Pop()
Stack.cs (48) : {
Stack.cs (49) : T elem = Values.Remove(0);
Stack.cs (50) : return elem;
