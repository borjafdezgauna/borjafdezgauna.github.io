Queue.cs (7) : T[] elems = new T[10];
Queue.cs (8) : int top = -1;
Queue.cs (9) : int last = -1;
Queue.cs (21) : return last+1;
Queue.cs (27) : top = -1;
Queue.cs (28) : last = -1;
Queue.cs (34) : if (top == -1 && last == -1)
Queue.cs (35) : {
Queue.cs (36) : top = 0;
Queue.cs (37) : last = 0;
Queue.cs (38) : elems[last] = value;
Queue.cs (39) : }
Queue.cs (40) : else
Queue.cs (41) : {
Queue.cs (42) : last = last + 1;
Queue.cs (43) : elems[last] = value;
Queue.cs (45) : }
Queue.cs (52) : T dato = elems[top];
Queue.cs (53) : top++;
Queue.cs (54) : return dato;
Stack.cs (7) : T[] elementos = new T[10];
Stack.cs (8) : int top = -1;
Stack.cs (20) : return top+1;
Stack.cs (26) : top = -1;
Stack.cs (31) : if (top == elementos.Length - 1)
Stack.cs (32) : {
Stack.cs (33) : T[] nuevo = new T[elementos.Length * 2];
Stack.cs (34) : }
Stack.cs (35) : top++;
Stack.cs (36) : elementos[top] = value;
Stack.cs (43) : if( top == -1 )
Stack.cs (45) : else
Stack.cs (46) : {
Stack.cs (47) : T dato = elementos[top];
Stack.cs (48) : top--;
Stack.cs (49) : return dato;
Stack.cs (50) : }
