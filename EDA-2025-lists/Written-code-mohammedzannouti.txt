IntArrayList.cs (3) : using System.ComponentModel.DataAnnotations;
IntArrayList.cs (4) : using System.Linq;
IntArrayList.cs (37) : return NumElements;
IntArrayList.cs (45) : if (index >= NumElements || index < 0) return 0;
IntArrayList.cs (47) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (48) : {
IntArrayList.cs (49) : if (i == index) return Values[i];
IntArrayList.cs (50) : }
IntArrayList.cs (52) : return Values[index];
IntArrayList.cs (60) : if (Values.Length <= NumElements)
IntArrayList.cs (61) : {
IntArrayList.cs (62) : Resize(Values.Length * 2);
IntArrayList.cs (64) : }
IntArrayList.cs (65) : Values[NumElements] = value;
IntArrayList.cs (66) : NumElements++;
IntArrayList.cs (77) : if (index < 0 || index >= NumElements)
IntArrayList.cs (78) : {
IntArrayList.cs (79) : return -1;
IntArrayList.cs (80) : }
IntArrayList.cs (81) : int valor = Values[index];
IntArrayList.cs (83) : for (int i = index; i < NumElements - 1; i++)
IntArrayList.cs (84) : {
IntArrayList.cs (85) : Values[i] = Values[i + 1];
IntArrayList.cs (86) : }
IntArrayList.cs (88) : Values[NumElements - 1] = 0;
IntArrayList.cs (90) : NumElements--;
IntArrayList.cs (92) : return valor;
IntArrayList.cs (99) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (100) : {
IntArrayList.cs (101) : Values[i] = 0;
IntArrayList.cs (104) : NumElements = 0;
IntArrayList.cs (105) : }
IntArrayList.cs (110) : int[] Nuevo = new int[newSize];
IntArrayList.cs (111) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (112) : {
IntArrayList.cs (113) : Nuevo[i] = Values[i];
IntArrayList.cs (116) : Values = Nuevo;
IntArrayList.cs (117) : }
IntArrayList.cs (122) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (123) : {
IntArrayList.cs (124) : yield return Values[i];
IntArrayList.cs (125) : }
IntList.cs (3) : using System.Xml;
IntList.cs (44) : IntListNode lista = First;
IntList.cs (45) : int i = 0;
IntList.cs (46) : while (lista != null)
IntList.cs (47) : {
IntList.cs (49) : lista = lista.Next;
IntList.cs (50) : i++;
IntList.cs (51) : }
IntList.cs (52) : return i;
IntList.cs (60) : IntListNode lista = First;
IntList.cs (61) : if (index < 0) return -1;
IntList.cs (63) : int i = 0;
IntList.cs (64) : while (lista != null)
IntList.cs (65) : {
IntList.cs (66) : if (i == index) return lista.Value;
IntList.cs (67) : lista = lista.Next;
IntList.cs (68) : i++;
IntList.cs (69) : }
IntList.cs (70) : return -1;
IntList.cs (79) : IntListNode lista = First;
IntList.cs (80) : IntListNode nueva = new IntListNode(value);
IntList.cs (81) : if (First == null)
IntList.cs (82) : {
IntList.cs (83) : First = nueva;
IntList.cs (84) : return;
IntList.cs (85) : }
IntList.cs (87) : while (lista.Next != null)
IntList.cs (88) : {
IntList.cs (89) : lista = lista.Next;
IntList.cs (90) : }
IntList.cs (92) : lista.Next = nueva;
IntList.cs (101) : IntListNode lista = First;
IntList.cs (102) : int i = 0;
IntList.cs (104) : if (lista == null) return -1;
IntList.cs (105) : if (index == 0)
IntList.cs (106) : {
IntList.cs (107) : int value = First.Value;
IntList.cs (108) : First = First.Next;
IntList.cs (109) : return value;
IntList.cs (110) : }
IntList.cs (111) : while (lista.Next != null)
IntList.cs (112) : {
IntList.cs (113) : if (i+1 ==index)
IntList.cs (114) : {
IntList.cs (115) : int item = lista.Next.Value;
IntList.cs (117) : lista.Next = lista.Next.Next;
IntList.cs (119) : return item;
IntList.cs (120) : }
IntList.cs (121) : lista = lista.Next;
IntList.cs (122) : i++;
IntList.cs (123) : }
IntList.cs (124) : return -1;
IntList.cs (131) : First = null;
IntList.cs (137) : IntListNode lista = First;
IntList.cs (139) : while (lista.Next != null)
IntList.cs (140) : {
IntList.cs (141) : lista = lista.Next;
IntList.cs (143) : yield return lista.Value;
IntList.cs (145) : }
ArrayList.cs (2) : using System.Runtime.CompilerServices;
ArrayList.cs (10) : int firstIndex = 0;
ArrayList.cs (11) : int lastIndex = -1;
ArrayList.cs (36) : return NumElements;
ArrayList.cs (44) : if (index >= NumElements || index < 0)
ArrayList.cs (45) : return default;
ArrayList.cs (47) : return Values[index];
ArrayList.cs (58) : if (NumElements >= Values.Length)
ArrayList.cs (59) : {
ArrayList.cs (60) : Resize(Values.Length * 2);
ArrayList.cs (63) : }
ArrayList.cs (65) : Values[NumElements] = value;
ArrayList.cs (66) : NumElements++;
ArrayList.cs (67) : lastIndex++;
ArrayList.cs (78) : if (index < 0 || index >= NumElements)
ArrayList.cs (79) : {
ArrayList.cs (80) : return default;
ArrayList.cs (81) : }
ArrayList.cs (82) : T valor = Values[index];
ArrayList.cs (85) : for (int i = index; i < NumElements - 1; i++)
ArrayList.cs (86) : {
ArrayList.cs (87) : Values[i] = Values[i + 1];
ArrayList.cs (88) : }
ArrayList.cs (90) : Values[NumElements - 1] = default;
ArrayList.cs (91) : lastIndex--;
ArrayList.cs (92) : NumElements--;
ArrayList.cs (94) : return valor;
ArrayList.cs (101) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (102) : {
ArrayList.cs (103) : Values[i] = default;
ArrayList.cs (105) : }
ArrayList.cs (106) : NumElements = 0;
ArrayList.cs (107) : firstIndex = 0;
ArrayList.cs (108) : lastIndex = -1;
ArrayList.cs (117) : T[] Nuevo = new T[newSize];
ArrayList.cs (118) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (119) : {
ArrayList.cs (120) : Nuevo[i] = Values[i];
ArrayList.cs (122) : }
ArrayList.cs (123) : Values = Nuevo;
ArrayList.cs (130) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (131) : {
ArrayList.cs (132) : yield return Values[i];
ArrayList.cs (133) : }
List.cs (46) : return m_numItems;
List.cs (53) : ListNode<T> lista = First;
List.cs (54) : if (index < 0) return default;
List.cs (56) : int i = 0;
List.cs (57) : while (lista != null)
List.cs (58) : {
List.cs (59) : if (i == index) return lista.Value;
List.cs (60) : lista = lista.Next;
List.cs (61) : i++;
List.cs (62) : }
List.cs (63) : return default;
List.cs (71) : ListNode<T> lista = First;
List.cs (73) : ListNode<T> nueva = new ListNode<T> (value);
List.cs (74) : if (First == null)
List.cs (75) : {
List.cs (76) : First = nueva;
List.cs (77) : Last = nueva;
List.cs (78) : m_numItems++;
List.cs (79) : return;
List.cs (80) : }
List.cs (81) : else
List.cs (82) : {
List.cs (84) : lista = Last;
List.cs (85) : Last.Next = new ListNode<T>(value);
List.cs (86) : Last = lista.Next;
List.cs (87) : m_numItems++;
List.cs (89) : }
List.cs (100) : ListNode<T> lista = First;
List.cs (101) : int i = 0;
List.cs (103) : if (lista == null) return default;
List.cs (104) : if (index == 0)
List.cs (105) : {
List.cs (106) : T value = First.Value;
List.cs (107) : First = First.Next;
List.cs (108) : m_numItems--;
List.cs (109) : return value;
List.cs (110) : }
List.cs (111) : while (lista.Next != null)
List.cs (112) : {
List.cs (113) : if (i+1 == index)
List.cs (114) : {
List.cs (115) : T item = lista.Next.Value;
List.cs (117) : lista.Next = lista.Next.Next;
List.cs (118) : m_numItems--;
List.cs (119) : return item;
List.cs (120) : }
List.cs (121) : lista = lista.Next;
List.cs (122) : i++;
List.cs (123) : }
List.cs (124) : return default;
List.cs (132) : First = null;
List.cs (133) : m_numItems = 0;
List.cs (140) : ListNode<T> lista = First;
List.cs (142) : while (lista.Next != null)
List.cs (143) : {
List.cs (144) : lista = lista.Next;
List.cs (146) : yield return lista.Value;
List.cs (148) : }
Queue.cs (1) : using System;
Queue.cs (8) : List<T> things = new List<T>();
Queue.cs (9) : int numElements = 0;
Queue.cs (15) : return things.ToString();
Queue.cs (22) : return things.Count();
Queue.cs (28) : things.Clear();
Queue.cs (33) : things.Add(value);
Queue.cs (34) : numElements++;
Queue.cs (39) : if (numElements == 0) return default(T);
Queue.cs (41) : else
Queue.cs (42) : {
Queue.cs (44) : T value = things.Get(0);
Queue.cs (45) : things.Remove(0);
Queue.cs (46) : numElements--;
Queue.cs (47) : return value;
Queue.cs (48) : }
Stack.cs (2) : using System.Diagnostics;
Stack.cs (8) : ArrayList<T> items = new ArrayList<T>();
Stack.cs (9) : int numElements=0;
Stack.cs (14) : return items.ToString();
Stack.cs (20) : return items.Count();
Stack.cs (25) : items.Clear();
Stack.cs (30) : items.Add(value);
Stack.cs (31) : numElements++;
Stack.cs (36) : if (numElements == 0) return default(T);
Stack.cs (38) : else
Stack.cs (39) : {
Stack.cs (40) : T value = items.Get(numElements - 1);
Stack.cs (41) : items.Remove(numElements - 1);
Stack.cs (42) : numElements--;
Stack.cs (43) : return value;
Stack.cs (44) : }
