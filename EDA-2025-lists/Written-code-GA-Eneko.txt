IntArrayList.cs (36) : return NumElements;
IntArrayList.cs (44) : if (index >= 0 && index < Values.Length)
IntArrayList.cs (46) : return Values[index];
IntArrayList.cs (59) : Values[NumElements] = value;
IntArrayList.cs (60) : NumElements++;
IntArrayList.cs (75) : for (int i = index + 1; i < NumElements; i++)
IntArrayList.cs (76) : {
IntArrayList.cs (79) : }
IntArrayList.cs (80) : NumElements--;
IntList.cs (3) : using System.Diagnostics.Tracing;
IntList.cs (4) : using System.Linq.Expressions;
IntList.cs (5) : using System.Xml;
IntList.cs (24) : public IntList()
IntList.cs (25) : {
IntList.cs (27) : }
IntList.cs (49) : int count = 0;
IntList.cs (50) : IntListNode node = First;
IntList.cs (51) : while (node != null)
IntList.cs (52) : {
IntList.cs (53) : count++;
IntList.cs (54) : node = node.Next;
IntList.cs (55) : }
IntList.cs (58) : return count;
IntList.cs (66) : int position = 0;
IntList.cs (67) : IntListNode node = First;
IntList.cs (68) : while (node != null)
IntList.cs (69) : {
IntList.cs (70) : if (position == index)
IntList.cs (71) : {
IntList.cs (72) : return node.Value;
IntList.cs (73) : }
IntList.cs (74) : node = node.Next;
IntList.cs (75) : position++;
IntList.cs (76) : }
IntList.cs (77) : //TODO #1: return the number of elements on the list
IntList.cs (79) : //TODO #2: return the element on the index-th position. O if the position is out of bounds
IntList.cs (89) : IntListNode node = First;
IntList.cs (97) : {
IntList.cs (99) : node = node.Next;
IntList.cs (101) : }
IntList.cs (102) : node.Next = newNode;
IntList.cs (103) : } else
IntList.cs (104) : First.Next = newNode;
IntList.cs (116) : if (index == 0)
IntList.cs (117) : {
IntList.cs (118) : First = First.Next;
IntList.cs (120) : }
IntList.cs (121) : if (index == Count() - 1)
IntList.cs (122) : {
IntList.cs (124) : IntListNode node = First;
IntList.cs (125) : int ImBlueDaBaDiDaBaDa = Count() - 2;
IntList.cs (126) : for (int i = 0; i < ImBlueDaBaDiDaBaDa; i++)
IntList.cs (127) : {
IntList.cs (128) : node = node.Next;
IntList.cs (129) : }
IntList.cs (131) : node.Next = null;
IntList.cs (134) : }
IntList.cs (135) : else if (index > 0 && index < Count() - 1)
IntList.cs (136) : {
IntList.cs (137) : IntListNode node = First;
IntList.cs (138) : for (int i = 0; i < index; i++)
IntList.cs (139) : {
IntList.cs (140) : node = node.Next;
IntList.cs (141) : }
IntList.cs (143) : node.Next = node.Next.Next;
IntList.cs (145) : }
IntList.cs (146) : return -1;
IntList.cs (155) : First = null;
IntList.cs (163) : int ImBlueDaBaDiDaBaDa = Count();
IntList.cs (167) : for (int i = 0; i < ImBlueDaBaDiDaBaDa; i++)
ArrayList.cs (10) : int FirstIndex = 0;
ArrayList.cs (25) : for (int i = FirstIndex; i < Count(); i++)
ArrayList.cs (36) : return NumElements;
ArrayList.cs (44) : if (index >= 0 && index < NumElements)
ArrayList.cs (46) : return Values[index + FirstIndex];
ArrayList.cs (54) : if (NumElements == Values.Length - FirstIndex)
ArrayList.cs (55) : {
ArrayList.cs (56) : Resize(Values.Length * 2);
ArrayList.cs (57) : }
ArrayList.cs (58) : Values[NumElements + FirstIndex] = value;
ArrayList.cs (59) : NumElements++;
ArrayList.cs (71) : if (index < 0 || index > NumElements - 1)
ArrayList.cs (75) : T devolver = Values[index + FirstIndex];
ArrayList.cs (76) : if (index == 0)
ArrayList.cs (78) : FirstIndex++;
ArrayList.cs (80) : else
ArrayList.cs (81) : {
ArrayList.cs (82) : for (int i = index + FirstIndex + 1; i < NumElements; i++)
ArrayList.cs (83) : {
ArrayList.cs (85) : Values[i - 1] = Values[i];
ArrayList.cs (86) : }
ArrayList.cs (87) : }
ArrayList.cs (88) : NumElements--;
ArrayList.cs (89) : return devolver;
ArrayList.cs (96) : NumElements = 0;
ArrayList.cs (104) : T[] newArray = new T[(newSize)];
ArrayList.cs (105) : for (int i = FirstIndex; i < Values.Length; i++)
ArrayList.cs (106) : {
ArrayList.cs (107) : newArray[i] = Values[i];
ArrayList.cs (108) : }
ArrayList.cs (109) : Values = newArray;
ArrayList.cs (116) : for (int i = FirstIndex; i < Values.Length; i++)
ArrayList.cs (117) : {
ArrayList.cs (118) : yield return Values[i];
ArrayList.cs (119) : }
List.cs (8) : public ListNode<T>  Anterior = null;
List.cs (48) : return m_numItems;
List.cs (55) : int position = 0;
List.cs (56) : ListNode<T> node = First;
List.cs (57) : while (node != null)
List.cs (58) : {
List.cs (59) : if (position == index)
List.cs (60) : {
List.cs (61) : return node.Value;
List.cs (62) : }
List.cs (63) : node = node.Next;
List.cs (64) : position++;
List.cs (65) : }
List.cs (73) : ListNode<T> newNode = new ListNode<T>(value);
List.cs (75) : ListNode<T> nodeLast = Last;
List.cs (76) : if (First == null)
List.cs (77) : {
List.cs (78) : First = newNode;
List.cs (82) : else if (First.Next != null)
List.cs (83) : {
List.cs (84) : nodeLast.Next = newNode;
List.cs (85) : newNode.Anterior = Last;
List.cs (87) : }
List.cs (88) : else
List.cs (89) : {
List.cs (90) : First.Next = newNode;
List.cs (91) : newNode.Anterior = First;
List.cs (92) : }
List.cs (93) : m_numItems++;
List.cs (94) : Last = newNode;
List.cs (95) : }
List.cs (100) : if (index == 0)
List.cs (101) : {
List.cs (102) : T firstValue = First.Value;
List.cs (103) : First = First.Next;
List.cs (104) : if (First != null)
List.cs (105) : {
List.cs (106) : First.Anterior = null;
List.cs (108) : }
List.cs (109) : m_numItems--;
List.cs (110) : return firstValue;
List.cs (112) : }
List.cs (113) : if (index == Count() - 1)
List.cs (114) : {
List.cs (116) : T lastElement = Last.Value;
List.cs (117) : ListNode<T> previo= Last.Anterior;
List.cs (118) : previo.Next = null;
List.cs (119) : Last = previo;
List.cs (120) : m_numItems--;
List.cs (122) : return lastElement;
List.cs (124) : }
List.cs (125) : else if (index > 0 && index < Count() - 1)
List.cs (126) : {
List.cs (127) : ListNode<T> node = First;
List.cs (128) : for (int i = 0; i < index -1; i++)
List.cs (129) : {
List.cs (130) : node = node.Next;
List.cs (131) : }
List.cs (132) : T devolver = node.Next.Value;
List.cs (133) : node.Next = node.Next.Next;
List.cs (134) : node.Next.Anterior = node;
List.cs (135) : m_numItems--;
List.cs (136) : return devolver;
List.cs (137) : }
List.cs (147) : First = null;
List.cs (148) : m_numItems = 0;
List.cs (156) : ListNode<T> node = First;
List.cs (158) : if (First != null)
List.cs (159) : {
List.cs (161) : for (int i = 0; i < m_numItems; i++)
List.cs (162) : {
List.cs (164) : yield return node.Value;
List.cs (165) : node = node.Next;
List.cs (167) : }
List.cs (168) : }
List.cs (169) : else
List.cs (170) : {
List.cs (172) : }
Queue.cs (6) : ArrayList<T> valuesArray;
Queue.cs (7) : public Queue()
Queue.cs (8) : {
Queue.cs (9) : valuesArray = new ArrayList<T>();
Queue.cs (10) : }
Queue.cs (15) : return valuesArray.ToString();
Queue.cs (22) : return valuesArray.Count();
Queue.cs (28) : valuesArray.Clear();
Queue.cs (33) : valuesArray.Add(value);
Queue.cs (38) : return valuesArray.Remove(0);
Stack.cs (9) : public Stack()
Stack.cs (10) : {
Stack.cs (12) : }
