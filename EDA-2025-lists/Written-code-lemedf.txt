IIntList.cs (1) : using System;
IIntList.cs (3) : using System.Text;
IIntList.cs (7) : public interface IIntList : System.Collections.IEnumerable
IIntList.cs (9) : int Count();
IIntList.cs (11) : int Get(int index);
IIntList.cs (13) : void Add(int value);
IIntList.cs (15) : int Remove(int index);
IIntList.cs (17) : void Clear();
IIntList.cs (19) : }
IntList.cs (42) : int count = 0;
IntList.cs (43) : IntListNode newNode = First;
IntList.cs (44) : while (newNode != null)
IntList.cs (45) : {
IntList.cs (46) : newNode = newNode.Next;
IntList.cs (47) : count++;
IntList.cs (49) : }
IntList.cs (50) : return count;
IntList.cs (59) : // int position = 0;
IntList.cs (60) : IntListNode newNode = First;
IntList.cs (61) : int found=0;
IntList.cs (62) : int i=0;
IntList.cs (67) : while (newNode != null && i>index)
IntList.cs (68) : {
IntList.cs (69) : newNode= newNode.Next;
IntList.cs (70) : i++;
IntList.cs (71) : }
IntList.cs (74) : found=newNode.Next.Value;
IntList.cs (75) : }
IntList.cs (76) : return found;
IntList.cs (83) : IntListNode newNode= First;
IntList.cs (84) : int i=0;
IntList.cs (87) : newNode=newNode.Next;
IntList.cs (88) : i++;
IntList.cs (89) : }
IntList.cs (92) : IntListNode newNode1= new IntListNode(value);
IntList.cs (93) : }
IntList.cs (102) : IntListNode newNode=First;
IntList.cs (103) : if(index>Count());
IntList.cs (104) : int notFound=-1;
IntList.cs (105) : int i=0;
IntList.cs (108) : newNode= newNode.Next;
IntList.cs (109) : i++;
IntList.cs (110) : }
IntList.cs (113) : notFound=newNode.Next.Value;
IntList.cs (114) : newNode.Next=newNode.Next.Next;
IntList.cs (115) : }
IntList.cs (116) : return notFound;
IntList.cs (123) : IntListNode newNode=First;
IntList.cs (124) : newNode=null;
IntList.cs (130) : IntListNode newNode = First;
IntList.cs (131) : int i = 0;
IntList.cs (132) : while (newNode != null && Count() > i)
IntList.cs (133) : {
IntList.cs (134) : newNode = newNode.Next;
IntList.cs (135) : i++;
IntList.cs (136) : yield return newNode.Value;
IntList.cs (137) : }
