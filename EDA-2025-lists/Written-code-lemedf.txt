IIntList.cs (1) : using System;
IIntList.cs (3) : using System.Text;
IIntList.cs (7) : public interface IIntList : System.Collections.IEnumerable
IIntList.cs (9) : int Count();
IIntList.cs (11) : int Get(int index);
IIntList.cs (13) : void Add(int value);
IIntList.cs (15) : int Remove(int index);
IIntList.cs (17) : void Clear();
IIntList.cs (19) : }
IntList.cs (42) : int count = 0;
IntList.cs (43) : IntListNode newNode = First;
IntList.cs (44) : while (newNode != null)
IntList.cs (45) : {
IntList.cs (46) : newNode = newNode.Next;
IntList.cs (47) : count++;
IntList.cs (49) : }
IntList.cs (50) : return count;
IntList.cs (59) : // int position = 0;
IntList.cs (60) : IntListNode newNode = First;
IntList.cs (61) : int found=0;
IntList.cs (62) : int i=0;
IntList.cs (63) : if(index>Count()){return 0;}
IntList.cs (64) : while (newNode != null && i>index)
IntList.cs (65) : {
IntList.cs (66) : newNode= newNode.Next;
IntList.cs (67) : i++;
IntList.cs (68) : }
IntList.cs (69) : if(newNode !=null && newNode.Next!=null){
IntList.cs (70) : found=newNode.Next.Value;
IntList.cs (71) : }
IntList.cs (72) : return found;
IntList.cs (79) : IntListNode newNode= First;
IntList.cs (80) : int i=0;
IntList.cs (81) : while(newNode!=null && i>Count()){
IntList.cs (82) : newNode=newNode.Next;
IntList.cs (83) : i++;
IntList.cs (84) : }
IntList.cs (85) : if(newNode.Next!=null && newNode.Next.Next==null){
IntList.cs (86) : IntListNode newNode1= new IntListNode(value);
IntList.cs (87) : }
IntList.cs (96) : IntListNode newNode=First;
IntList.cs (97) : if(index>Count());
IntList.cs (98) : int notFound=-1;
IntList.cs (99) : int i=0;
IntList.cs (100) : while(newNode!=null && index>i){
IntList.cs (101) : newNode= newNode.Next;
IntList.cs (102) : i++;
IntList.cs (103) : }
IntList.cs (104) : if(newNode!=null && newNode.Next!=null){
IntList.cs (105) : notFound=newNode.Next.Value;
IntList.cs (106) : newNode.Next=newNode.Next.Next;
IntList.cs (107) : }
IntList.cs (108) : return notFound;
IntList.cs (115) : IntListNode newNode=First;
IntList.cs (116) : newNode=null;
IntList.cs (122) : IntListNode newNode = First;
IntList.cs (123) : int i = 0;
IntList.cs (124) : while (newNode != null && Count() > i)
IntList.cs (125) : {
IntList.cs (126) : newNode = newNode.Next;
IntList.cs (127) : i++;
IntList.cs (128) : yield return newNode.Value;
IntList.cs (129) : }
