IntArrayList.cs (36) : return NumElements;
IntArrayList.cs (44) : if (index > Count())
IntArrayList.cs (45) : {
IntArrayList.cs (47) : }
IntArrayList.cs (48) : return Values[index];
IntArrayList.cs (55) : if (Values.Length < Count())
IntArrayList.cs (56) : {
IntArrayList.cs (57) : Resize(Count() * 2);
IntArrayList.cs (58) : Values[Count()] = value;
IntArrayList.cs (59) : NumElements++;
IntArrayList.cs (60) : }
IntArrayList.cs (61) : else
IntArrayList.cs (62) : {
IntArrayList.cs (64) : Values[Count()] = value;
IntArrayList.cs (65) : NumElements++;
IntArrayList.cs (66) : }
IntArrayList.cs (77) : int valor = Get(index);
IntArrayList.cs (78) : if (index > Count())
IntArrayList.cs (79) : {
IntArrayList.cs (80) : return -1;
IntArrayList.cs (81) : }
IntArrayList.cs (82) : for (int i = index; i <= Count(); i++)
IntArrayList.cs (83) : {
IntArrayList.cs (84) : Values[i] = Values[i + 1];
IntArrayList.cs (85) : }
IntArrayList.cs (86) : NumElements--;
IntArrayList.cs (87) : return valor;
IntArrayList.cs (95) : NumElements = 0;
IntArrayList.cs (102) : int[] NewValues=new int[newSize];
IntArrayList.cs (103) : for (int i = 0; i < Values.Length; i++)
IntArrayList.cs (104) : {
IntArrayList.cs (105) : NewValues[i] = Values[i];
IntArrayList.cs (106) : }
IntArrayList.cs (107) : Values = NewValues;
IntArrayList.cs (115) : for (int i = 0; i < Count(); i++)
IntArrayList.cs (116) : {
IntArrayList.cs (117) : yield return Get(i);
IntArrayList.cs (118) : }
IntList.cs (3) : using System.Numerics;
IntList.cs (4) : using System.Xml;
IntList.cs (44) : int contador=0;
IntList.cs (45) : IntListNode node= First;
IntList.cs (46) : while(node!=null)
IntList.cs (47) : {
IntList.cs (48) : node=node.Next;
IntList.cs (49) : contador++;
IntList.cs (50) : }
IntList.cs (51) : return contador;
IntList.cs (59) : IntListNode node= First;
IntList.cs (60) : int contador = 0;
IntList.cs (61) : if (index < Count())
IntList.cs (62) : {
IntList.cs (63) : while (contador < index)
IntList.cs (64) : {
IntList.cs (65) : node = node.Next;
IntList.cs (66) : contador++;
IntList.cs (67) : }
IntList.cs (68) : return node.Value;
IntList.cs (69) : }
IntList.cs (78) : IntListNode node = First;
IntList.cs (79) : if (node != null)
IntList.cs (80) : {
IntList.cs (81) : while (node.Next != null)
IntList.cs (82) : {
IntList.cs (83) : node = node.Next;
IntList.cs (84) : }
IntList.cs (85) : node.Next = new IntListNode(value);
IntList.cs (86) : }
IntList.cs (87) : else
IntList.cs (88) : {
IntList.cs (89) : First= new IntListNode(value);
IntList.cs (93) : }
IntList.cs (98) : IntListNode node = First;
IntList.cs (99) : int contador = 0;
IntList.cs (100) : if (index > Count())
IntList.cs (101) : {
IntList.cs (102) : return -1;
IntList.cs (103) : }
IntList.cs (105) : while (contador < index  && node != null)
IntList.cs (106) : {
IntList.cs (108) : node = node.Next;
IntList.cs (109) : contador++;
IntList.cs (110) : }
IntList.cs (111) : return Get(index);
IntList.cs (120) : First = null;
IntList.cs (126) : for (int i = 0; i < Count(); i++)
IntList.cs (127) : {
IntList.cs (128) : yield return Get(i);
IntList.cs (129) : }
