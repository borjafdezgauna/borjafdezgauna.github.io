IntList.cs (43) : int cont = 1;
IntList.cs (44) : while (node != null && node.Next != null)
IntList.cs (48) : }
IntList.cs (50) : if (First == null)
IntList.cs (51) : {
IntList.cs (52) : return 0;
IntList.cs (55) : return cont;
IntList.cs (67) : int i = 0;
IntList.cs (82) : IntListNode nuevoNodo = new IntListNode(value);
IntList.cs (83) : if (First == null)
IntList.cs (84) : {
IntList.cs (85) : First = nuevoNodo;
IntList.cs (86) : return;
IntList.cs (87) : }
IntList.cs (93) : node.Next = nuevoNodo;
IntList.cs (106) : {
IntList.cs (107) : int valorInicio = First.Value;
IntList.cs (109) : return valorInicio;
IntList.cs (112) : IntListNode primerNode = First;
IntList.cs (113) : IntListNode segundoNode = First.Next;
IntList.cs (116) : while (segundoNode != null && i < index)
IntList.cs (118) : primerNode = segundoNode;
IntList.cs (119) : segundoNode = segundoNode.Next;
IntList.cs (121) : }
IntList.cs (123) : if (primerNode == null)
IntList.cs (124) : return -1;
IntList.cs (126) : primerNode.Next = segundoNode.Next;
IntList.cs (127) : return segundoNode.Value;
IntList.cs (128) : }
ArrayList.cs (2) : using System.Collections;
ArrayList.cs (3) : using System.Runtime.Versioning;
ArrayList.cs (39) : if (index < 0 || index >= NumElements)
ArrayList.cs (40) : {
ArrayList.cs (43) : else
ArrayList.cs (44) : {
ArrayList.cs (45) : return Values[index];
ArrayList.cs (46) : }
ArrayList.cs (47) : }
ArrayList.cs (65) : if (index < 0 || index > NumElements)
ArrayList.cs (66) : {
ArrayList.cs (69) : T elem = Values[index];
ArrayList.cs (71) : for (int i = 0; i < NumElements - 1; i++)
ArrayList.cs (72) : {
ArrayList.cs (73) : Values[i] = Values[i + 1];
ArrayList.cs (74) : }
ArrayList.cs (75) : NumElements--;
ArrayList.cs (77) : return elem;
ArrayList.cs (78) : }
ArrayList.cs (102) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (103) : {
ArrayList.cs (104) : yield return Values[i];
ArrayList.cs (105) : }
List.cs (57) : int aux = 0;
List.cs (58) : ListNode<T> listAyuda = First;
List.cs (59) : while (listAyuda.Next != null)
List.cs (60) : {
List.cs (61) : aux++;
List.cs (62) : listAyuda = listAyuda.Next;
List.cs (63) : if (aux == index)
List.cs (64) : {
List.cs (65) : return listAyuda.Value;
List.cs (67) : }
List.cs (68) : }
List.cs (69) : return listAyuda.Value;
List.cs (76) : if (First == null)
List.cs (77) : {
List.cs (78) : ListNode<T> nuevo = new ListNode<T>(value);
List.cs (80) : First = nuevo;
List.cs (81) : Last = nuevo;
List.cs (83) : m_numItems++;
List.cs (84) : }
List.cs (85) : else
List.cs (86) : {
List.cs (87) : ListNode<T> nuevo = new ListNode<T>(value);
List.cs (89) : Last.Next = nuevo;
List.cs (90) : Last = nuevo;
List.cs (92) : m_numItems++;
List.cs (93) : }
