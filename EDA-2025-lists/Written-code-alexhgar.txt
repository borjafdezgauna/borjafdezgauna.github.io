IntList.cs (47) : while (node != null)
IntList.cs (65) : int contador = 0;
IntList.cs (66) : while (contador != index && node.Next != null )
IntList.cs (68) : node = node.Next;
IntList.cs (69) : contador++;
IntList.cs (73) : if (index == 0 || index < contador) {
IntList.cs (77) : return node.Value;
IntList.cs (86) : IntListNode addedNode = new IntListNode(value);
IntList.cs (88) : if (First == null)
IntList.cs (89) : {
IntList.cs (90) : First = addedNode;
IntList.cs (92) : return;
IntList.cs (94) : }
IntList.cs (97) : while (node.Next != null)
IntList.cs (98) : {
IntList.cs (99) : node = node.Next;
IntList.cs (101) : }
IntList.cs (103) : node.Next = addedNode;
IntList.cs (104) : return;
IntList.cs (114) : IntListNode node = First;
IntList.cs (115) : int contador = 0;
IntList.cs (117) : if (index < 0 || index <= Count())
IntList.cs (118) : {
IntList.cs (119) : return -1;
IntList.cs (120) : }
IntList.cs (122) : if (index == 0)
IntList.cs (123) : {
IntList.cs (124) : int primerValor = node.Value;
IntList.cs (126) : First = node.Next;
IntList.cs (127) : return primerValor;
IntList.cs (128) : }
IntList.cs (130) : while (node.Next != null && contador <= (index - 1))
IntList.cs (131) : {
IntList.cs (132) : node = node.Next;
IntList.cs (133) : contador++;
IntList.cs (134) : }
IntList.cs (136) : if (node.Next != null && node != null)
IntList.cs (137) : {
IntList.cs (138) : int eliminado = node.Next.Value;
IntList.cs (139) : node.Next = node.Next.Next;
IntList.cs (140) : return eliminado;
IntList.cs (141) : }
IntList.cs (143) : return -1;
IntList.cs (152) : First = null;
IntList.cs (158) : IntListNode node = First;
IntList.cs (160) : while (node != null)
IntList.cs (161) : {
IntList.cs (162) : yield return node.Value;
IntList.cs (163) : node = node.Next;
IntList.cs (165) : }
