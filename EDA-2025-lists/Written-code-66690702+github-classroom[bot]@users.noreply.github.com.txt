Utils.cs (1) : ﻿using System;
Utils.cs (2) : using System.Globalization;
Utils.cs (4) : namespace Lists
Utils.cs (5) : {
Utils.cs (6) : public class Utils
Utils.cs (7) : {
Utils.cs (8) : public static string ToString(double number, int numMaxDecimalDigits = 0)
Utils.cs (9) : {
Utils.cs (10) : double value = number;
Utils.cs (11) : if (numMaxDecimalDigits > 0)
Utils.cs (12) : value = Math.Round(value, numMaxDecimalDigits);
Utils.cs (13) : return value.ToString(CultureInfo.InvariantCulture);
Utils.cs (14) : }
Utils.cs (15) : }
Utils.cs (16) : }
IIntList.cs (1) : ﻿using System;
IIntList.cs (2) : using System.Collections;
IIntList.cs (3) : using System.Text;
IIntList.cs (5) : namespace Lists
IIntList.cs (6) : {
IIntList.cs (7) : public interface IIntList : System.Collections.IEnumerable
IIntList.cs (8) : {
IIntList.cs (9) : int Count();
IIntList.cs (11) : int Get(int index);
IIntList.cs (13) : void Add(int value);
IIntList.cs (15) : int Remove(int index);
IIntList.cs (17) : void Clear();
IIntList.cs (18) : }
IIntList.cs (19) : }
IntArrayList.cs (1) : using System;
IntArrayList.cs (2) : using System.Collections;
IntArrayList.cs (5) : namespace Lists
IntArrayList.cs (6) : {
IntArrayList.cs (7) : public class IntArrayList : IIntList
IntArrayList.cs (8) : {
IntArrayList.cs (9) : const int InitialSize = 10; //any arbitrary size
IntArrayList.cs (10) : int[] Values;
IntArrayList.cs (11) : int NumElements = 0;
IntArrayList.cs (15) : public IntArrayList(int n)
IntArrayList.cs (16) : {
IntArrayList.cs (17) : Values = new int[n];
IntArrayList.cs (18) : NumElements = 0;
IntArrayList.cs (19) : }
IntArrayList.cs (21) : public override string ToString()
IntArrayList.cs (22) : {
IntArrayList.cs (23) : string output = "[";
IntArrayList.cs (25) : for (int i = 0; i < Count(); i++)
IntArrayList.cs (26) : output += Values[i] + ",";
IntArrayList.cs (27) : output = output.TrimEnd(',') + "] " + Count() + " elements";
IntArrayList.cs (29) : return output;
IntArrayList.cs (30) : }
IntArrayList.cs (33) : public int Count()
IntArrayList.cs (34) : {
IntArrayList.cs (35) : //TODO #6: return the number of elements on the list
IntArrayList.cs (37) : }
IntArrayList.cs (40) : public int Get(int index)
IntArrayList.cs (41) : {
IntArrayList.cs (42) : //TODO #7: return the element on the index-th position. O if the position is out of bounds
IntArrayList.cs (45) : return 0;
IntArrayList.cs (52) : }
IntArrayList.cs (54) : public void Add(int value)
IntArrayList.cs (55) : {
IntArrayList.cs (56) : //TODO #8: add a new integer to the end of the list.
IntArrayList.cs (57) : //[After #12 -> If there is no place, resize (double the size) and add]
IntArrayList.cs (65) : }
IntArrayList.cs (68) : public int Remove(int index)
IntArrayList.cs (69) : {
IntArrayList.cs (70) : //TODO #9: remove the element on the index-th position. Do nothing if position is out of bounds
IntArrayList.cs (71) : //Return the removed item, -1 if the position is incorrect
IntArrayList.cs (84) : }
IntArrayList.cs (87) : public void Clear()
IntArrayList.cs (88) : {
IntArrayList.cs (89) : //TODO #10: remove all the elements on the list
IntArrayList.cs (95) : }
IntArrayList.cs (97) : private void Resize(int newSize)
IntArrayList.cs (98) : {
IntArrayList.cs (105) : }
IntArrayList.cs (107) : public IEnumerator GetEnumerator()
IntArrayList.cs (108) : {
IntArrayList.cs (109) : //TODO #12 : Return an enumerator using "yield return" for each of the values in this list
IntArrayList.cs (114) : }
IntArrayList.cs (115) : }
IntArrayList.cs (116) : }
IntList.cs (1) : using System;
IntList.cs (2) : using System.Collections;
IntList.cs (4) : namespace Lists
IntList.cs (5) : {
IntList.cs (6) : public class IntListNode
IntList.cs (7) : {
IntList.cs (8) : public int Value;
IntList.cs (9) : public IntListNode Next = null;
IntList.cs (11) : public IntListNode(int value)
IntList.cs (12) : {
IntList.cs (13) : Value = value;
IntList.cs (14) : }
IntList.cs (15) : }
IntList.cs (17) : public class IntList : IIntList
IntList.cs (18) : {
IntList.cs (19) : IntListNode First = null;
IntList.cs (21) : //This method returns all the elements on the list as a string
IntList.cs (22) : //Use it as an example on how to access all the elements on the list
IntList.cs (23) : public override string ToString()
IntList.cs (24) : {
IntList.cs (25) : IntListNode node = First;
IntList.cs (26) : string output = "[";
IntList.cs (28) : while (node != null)
IntList.cs (29) : {
IntList.cs (30) : output += node.Value + ",";
IntList.cs (31) : node = node.Next;
IntList.cs (32) : }
IntList.cs (33) : output = output.TrimEnd(',') + "] " + Count() + " elements";
IntList.cs (35) : return output;
IntList.cs (36) : }
IntList.cs (40) : public int Count()
IntList.cs (41) : {
IntList.cs (42) : //TODO #1: return the number of elements on the list
IntList.cs (51) : }
IntList.cs (54) : public int Get(int index)
IntList.cs (55) : {
IntList.cs (56) : //TODO #2: return the element on the index-th position. O if the position is out of bounds
IntList.cs (61) : return 0;
IntList.cs (73) : }
IntList.cs (76) : public void Add(int value)
IntList.cs (77) : {
IntList.cs (78) : //TODO #3: add a new integer to the end of the list
IntList.cs (91) : }
IntList.cs (94) : public int Remove(int index)
IntList.cs (95) : {
IntList.cs (96) : //TODO #4: remove the element on the index-th position. Do nothing if position is out of bounds
IntList.cs (97) : //Return the removed item, -1 if the position is incorrect
IntList.cs (118) : }
IntList.cs (121) : public void Clear()
IntList.cs (122) : {
IntList.cs (123) : //TODO #5: remove all the elements on the list
IntList.cs (125) : }
IntList.cs (127) : public IEnumerator GetEnumerator()
IntList.cs (128) : {
IntList.cs (129) : //TODO #6 : Return an enumerator using "yield return" for each of the values in this list
IntList.cs (136) : }
IntList.cs (137) : }
IntList.cs (138) : }
ArrayList.cs (1) : using System;
ArrayList.cs (3) : namespace Lists
ArrayList.cs (4) : {
ArrayList.cs (5) : public class ArrayList<T> : IList<T>
ArrayList.cs (6) : {
ArrayList.cs (7) : T[] Values = new T[10];
ArrayList.cs (8) : int NumElements = 0;
ArrayList.cs (12) : public ArrayList(int n = 10)
ArrayList.cs (13) : {
ArrayList.cs (14) : Values = new T[n];
ArrayList.cs (15) : Clear();
ArrayList.cs (16) : }
ArrayList.cs (17) : public override string ToString()
ArrayList.cs (18) : {
ArrayList.cs (20) : string output = "[";
ArrayList.cs (22) : for (int i = 0; i < Count(); i++)
ArrayList.cs (23) : output += Values[i].ToString() + ",";
ArrayList.cs (24) : output = output.TrimEnd(',') + "] " + Count() + " elements";
ArrayList.cs (26) : return output;
ArrayList.cs (28) : }
ArrayList.cs (30) : public int Count()
ArrayList.cs (31) : {
ArrayList.cs (32) : //TODO #6: return the number of elements on the list
ArrayList.cs (34) : return 0;
ArrayList.cs (36) : }
ArrayList.cs (38) : public T Get(int index)
ArrayList.cs (39) : {
ArrayList.cs (40) : //TODO #7: return the element on the index-th position. O if the position is out of bounds
ArrayList.cs (42) : return default(T);
ArrayList.cs (44) : }
ArrayList.cs (46) : public void Add(T value)
ArrayList.cs (47) : {
ArrayList.cs (48) : //TODO #8: add a new integer to the end of the list.
ArrayList.cs (49) : //[After #11 -> If there is no place, resize (double the size) and add]
ArrayList.cs (51) : }
ArrayList.cs (55) : public T Remove(int index)
ArrayList.cs (56) : {
ArrayList.cs (57) : //TODO #9: remove the element on the index-th position. Do nothing if position is out of bounds
ArrayList.cs (58) : //Return the removed item, -1 if the position is incorrect
ArrayList.cs (60) : return default(T);
ArrayList.cs (62) : }
ArrayList.cs (64) : public void Clear()
ArrayList.cs (65) : {
ArrayList.cs (66) : //TODO #10: remove all the elements on the list
ArrayList.cs (68) : }
ArrayList.cs (70) : private void Resize(int newSize)
ArrayList.cs (71) : {
ArrayList.cs (72) : //TODO #11: return the element on the index-th position. O if the position is out of bounds
ArrayList.cs (73) : //Once done, finish #8
ArrayList.cs (75) : }
ArrayList.cs (76) : public System.Collections.IEnumerator GetEnumerator()
ArrayList.cs (77) : {
ArrayList.cs (78) : //TODO #12 : Return an enumerator using "yield return" for each of the values in this list
ArrayList.cs (80) : yield return null;
ArrayList.cs (82) : }
ArrayList.cs (83) : }
ArrayList.cs (84) : }
IList.cs (1) : ﻿using System;
IList.cs (2) : using System.Collections;
IList.cs (4) : using System.Linq;
IList.cs (5) : using System.Text;
IList.cs (6) : using System.Threading.Tasks;
IList.cs (8) : namespace Lists
IList.cs (9) : {
IList.cs (10) : public interface IList<T> : IEnumerable
IList.cs (11) : {
IList.cs (12) : int Count();
IList.cs (14) : T Get(int index);
IList.cs (16) : void Add(T value);
IList.cs (18) : T Remove(int index);
IList.cs (20) : void Clear();
IList.cs (21) : }
IList.cs (22) : }
List.cs (1) : using Lists;
List.cs (2) : using System.Collections;
List.cs (4) : public class ListNode<T>
List.cs (5) : {
List.cs (6) : public T Value;
List.cs (7) : public ListNode<T> Next = null;
List.cs (11) : public ListNode(T value)
List.cs (12) : {
List.cs (13) : Value = value;
List.cs (14) : }
List.cs (16) : public override string ToString()
List.cs (17) : {
List.cs (18) : return Value.ToString();
List.cs (19) : }
List.cs (20) : }
List.cs (22) : public class List<T> : IList<T>
List.cs (23) : {
List.cs (24) : ListNode<T> First = null;
List.cs (25) : ListNode<T> Last = null;
List.cs (26) : int m_numItems = 0;
List.cs (28) : public override string ToString()
List.cs (29) : {
List.cs (30) : ListNode<T> node = First;
List.cs (31) : string output = "[";
List.cs (33) : while (node != null)
List.cs (34) : {
List.cs (35) : output += node.ToString() + ",";
List.cs (36) : node = node.Next;
List.cs (37) : }
List.cs (38) : output = output.TrimEnd(',') + "] " + Count() + " elements";
List.cs (40) : return output;
List.cs (41) : }
List.cs (43) : public int Count()
List.cs (44) : {
List.cs (45) : //TODO #1: return the number of elements on the list
List.cs (47) : return 0;
List.cs (49) : }
List.cs (51) : public T Get(int index)
List.cs (52) : {
List.cs (53) : //TODO #2: return the element on the index-th position. O if the position is out of bounds
List.cs (55) : return default(T);
List.cs (57) : }
List.cs (59) : public void Add(T value)
List.cs (60) : {
List.cs (61) : //TODO #3: add a new integer to the end of the list
List.cs (63) : }
List.cs (65) : public T Remove(int index)
List.cs (66) : {
List.cs (67) : //TODO #4: remove the element on the index-th position. Do nothing if position is out of bounds
List.cs (69) : return default(T);
List.cs (71) : }
List.cs (73) : public void Clear()
List.cs (74) : {
List.cs (75) : //TODO #5: remove all the elements on the list
List.cs (77) : }
List.cs (79) : public IEnumerator GetEnumerator()
List.cs (80) : {
List.cs (81) : //TODO #6 : Return an enumerator using "yield return" for each of the values in this list
List.cs (83) : yield return null;
List.cs (85) : }
List.cs (86) : }
IPushPop.cs (2) : namespace Lists
IPushPop.cs (3) : {
IPushPop.cs (4) : public interface IPushPop<T>
IPushPop.cs (5) : {
IPushPop.cs (6) : int Count();
IPushPop.cs (7) : void Clear();
IPushPop.cs (8) : void Push(T value);
IPushPop.cs (9) : T Pop();
IPushPop.cs (10) : }
IPushPop.cs (11) : }
Queue.cs (1) : namespace Lists
Queue.cs (2) : {
Queue.cs (4) : public class Queue<T> : IPushPop<T>
Queue.cs (5) : {
Queue.cs (8) : public override string ToString()
Queue.cs (9) : {
Queue.cs (11) : return null;
Queue.cs (13) : }
Queue.cs (15) : public int Count()
Queue.cs (16) : {
Queue.cs (18) : return 0;
Queue.cs (20) : }
Queue.cs (22) : public void Clear()
Queue.cs (23) : {
Queue.cs (25) : }
Queue.cs (27) : public void Push(T value)
Queue.cs (28) : {
Queue.cs (30) : }
Queue.cs (32) : public T Pop()
Queue.cs (33) : {
Queue.cs (35) : return default(T);
Queue.cs (37) : }
Queue.cs (38) : }
Queue.cs (39) : }
Stack.cs (2) : namespace Lists
Stack.cs (3) : {
Stack.cs (4) : public class Stack<T> : IPushPop<T>
Stack.cs (5) : {
Stack.cs (8) : public override string ToString()
Stack.cs (9) : {
Stack.cs (11) : return null;
Stack.cs (13) : }
Stack.cs (15) : public int Count()
Stack.cs (16) : {
Stack.cs (18) : return 0;
Stack.cs (20) : }
Stack.cs (22) : public void Clear()
Stack.cs (23) : {
Stack.cs (25) : }
Stack.cs (27) : public void Push(T value)
Stack.cs (28) : {
Stack.cs (30) : }
Stack.cs (32) : public T Pop()
Stack.cs (33) : {
Stack.cs (35) : return default(T);
Stack.cs (37) : }
Stack.cs (38) : }
Stack.cs (39) : }
