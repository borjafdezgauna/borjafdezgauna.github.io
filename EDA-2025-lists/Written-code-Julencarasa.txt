IntArrayList.cs (36) : return NumElements;
IntArrayList.cs (44) : if (index < NumElements && index >= 0)
IntArrayList.cs (45) : {
IntArrayList.cs (46) : return Values[index];
IntArrayList.cs (47) : }
IntArrayList.cs (48) : else
IntArrayList.cs (49) : {
IntArrayList.cs (51) : }
IntArrayList.cs (58) : if (NumElements == Values.Length)
IntArrayList.cs (59) : {
IntArrayList.cs (60) : Resize(2 * Values.Length);
IntArrayList.cs (61) : Values[NumElements] = value;
IntArrayList.cs (62) : NumElements++;
IntArrayList.cs (65) : }
IntArrayList.cs (66) : else
IntArrayList.cs (67) : {
IntArrayList.cs (68) : Values[NumElements] = value;
IntArrayList.cs (69) : NumElements++;
IntArrayList.cs (70) : }
IntArrayList.cs (80) : if (index >= NumElements || index < 0)
IntArrayList.cs (81) : {
IntArrayList.cs (82) : return -1;
IntArrayList.cs (83) : }
IntArrayList.cs (84) : else
IntArrayList.cs (85) : {
IntArrayList.cs (86) : int valor = Values[index];
IntArrayList.cs (87) : for (int i = index; i < NumElements - 1; i++)
IntArrayList.cs (88) : {
IntArrayList.cs (89) : Values[i] = Values[i + 1];
IntArrayList.cs (90) : }
IntArrayList.cs (91) : NumElements=NumElements - 1;
IntArrayList.cs (92) : return valor;
IntArrayList.cs (93) : }
IntArrayList.cs (102) : NumElements = 0;
IntArrayList.cs (107) : //TODO #11: crea una matriz de un tamaÃ±o mayor para poder seguir metiendo numeros
IntArrayList.cs (108) : int[] rematriz = new int[newSize];
IntArrayList.cs (109) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (110) : {
IntArrayList.cs (111) : rematriz[i] = Values[i];
IntArrayList.cs (112) : }
IntArrayList.cs (113) : Values = rematriz;
IntArrayList.cs (121) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (122) : {
IntArrayList.cs (123) : yield return i;
IntArrayList.cs (124) : }
IntList.cs (3) : using System.Windows.Markup;
IntList.cs (4) : using System.Xml;
IntList.cs (44) : IntListNode node = First;
IntList.cs (46) : int contador = 0;
IntList.cs (48) : {
IntList.cs (49) : node = node.Next;
IntList.cs (50) : contador++;
IntList.cs (52) : }
IntList.cs (54) : return contador;
IntList.cs (64) : IntListNode node = First;
IntList.cs (66) : while (contador < index && node != null )
IntList.cs (67) : {
IntList.cs (71) : }
IntList.cs (73) : if (node==null)
IntList.cs (74) : {
IntList.cs (76) : }
IntList.cs (86) : IntListNode node = First;
IntList.cs (118) : if (index < 0 || index >= Count())
IntList.cs (131) : while (node != null && contador < (index - 1))
IntList.cs (137) : if (node == null)
IntList.cs (139) : return -1;
IntList.cs (140) : }
ArrayList.cs (34) : return NumElements;
ArrayList.cs (41) : if (index < NumElements && index >= 0)
ArrayList.cs (42) : {
ArrayList.cs (43) : return Values[index];
ArrayList.cs (44) : }
ArrayList.cs (45) : else
ArrayList.cs (46) : {
ArrayList.cs (48) : }
ArrayList.cs (55) : if (NumElements == Values.Length)
ArrayList.cs (56) : {
ArrayList.cs (57) : Resize(2 * Values.Length);
ArrayList.cs (58) : Values[NumElements] = value;
ArrayList.cs (59) : NumElements++;
ArrayList.cs (63) : else
ArrayList.cs (64) : {
ArrayList.cs (65) : Values[NumElements] = value;
ArrayList.cs (66) : NumElements++;
ArrayList.cs (67) : }
ArrayList.cs (68) : }
ArrayList.cs (77) : if (index >= NumElements || index < 0)
ArrayList.cs (78) : {
ArrayList.cs (80) : }
ArrayList.cs (81) : else
ArrayList.cs (82) : {
ArrayList.cs (83) : T valor = Values[index];
ArrayList.cs (84) : for (int i = index; i < NumElements - 1; i++)
ArrayList.cs (85) : {
ArrayList.cs (86) : Values[i] = Values[i + 1];
ArrayList.cs (87) : }
ArrayList.cs (88) : NumElements=NumElements - 1;
ArrayList.cs (89) : return valor;
ArrayList.cs (90) : }
ArrayList.cs (97) : NumElements = 0;
ArrayList.cs (104) : T[] rematriz = new T[newSize];
ArrayList.cs (105) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (106) : {
ArrayList.cs (107) : rematriz[i] = Values[i];
ArrayList.cs (108) : }
ArrayList.cs (109) : Values = rematriz;
ArrayList.cs (115) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (116) : {
ArrayList.cs (117) : yield return Values[i];
ArrayList.cs (118) : }
List.cs (48) : ListNode<T> node = First;
List.cs (50) : int contador = 0;
List.cs (51) : while (node != null)
List.cs (52) : {
List.cs (53) : node = node.Next;
List.cs (54) : contador++;
List.cs (56) : }
List.cs (58) : return contador;
List.cs (66) : ListNode<T> node = First;
List.cs (67) : int contador = 0;
List.cs (68) : while (contador < index && node != null )
List.cs (69) : {
List.cs (70) : node = node.Next;
List.cs (71) : contador++;
List.cs (73) : }
List.cs (75) : if (node==null)
List.cs (76) : {
List.cs (78) : }
List.cs (80) : return node.Value;
List.cs (88) : ListNode<T> node = First;
List.cs (89) : ListNode<T> addedNode = new ListNode<T>(value);
List.cs (91) : if (First == null)
List.cs (92) : {
List.cs (93) : First = addedNode;
List.cs (95) : return;
List.cs (100) : while (node.Next != null)
List.cs (101) : {
List.cs (102) : node = node.Next;
List.cs (104) : }
List.cs (106) : node.Next = addedNode;
List.cs (107) : return;
List.cs (108) : }
List.cs (114) : ListNode<T> node = First;
List.cs (115) : int contador = 0;
List.cs (117) : if (index < 0 || index >= Count())
List.cs (118) : {
List.cs (120) : }
List.cs (122) : if (index == 0)
List.cs (123) : {
List.cs (124) : T primerValor = node.Value;
List.cs (126) : First = node.Next;
List.cs (127) : return primerValor;
List.cs (128) : }
List.cs (130) : while (node != null && contador < (index - 1))
List.cs (131) : {
List.cs (132) : node = node.Next;
List.cs (133) : contador++;
List.cs (134) : }
List.cs (136) : if (node == null)
List.cs (137) : {
List.cs (138) : return default(T);
List.cs (139) : }
List.cs (141) : T eliminado = node.Next.Value;
List.cs (142) : node.Next = node.Next.Next;
List.cs (143) : return eliminado;
List.cs (151) : First = null;
List.cs (158) : ListNode<T> node = First;
List.cs (160) : while (node != null)
List.cs (161) : {
List.cs (162) : yield return node.Value;
List.cs (163) : node = node.Next;
List.cs (165) : }
