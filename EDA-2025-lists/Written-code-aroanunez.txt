IntArrayList.cs (36) : return NumElements;
IntArrayList.cs (44) : if (index < 0 || index >= NumElements)
IntArrayList.cs (45) : {
IntArrayList.cs (47) : }
IntArrayList.cs (48) : else
IntArrayList.cs (49) : {
IntArrayList.cs (50) : return Values[index];
IntArrayList.cs (51) : }
IntArrayList.cs (58) : if (NumElements == Values.Length)
IntArrayList.cs (59) : {
IntArrayList.cs (60) : Resize(Values.Length * 2);
IntArrayList.cs (61) : }
IntArrayList.cs (62) : Values[NumElements] = value;
IntArrayList.cs (63) : NumElements++;
IntArrayList.cs (71) : if (index < 0 || index >= NumElements)
IntArrayList.cs (72) : {
IntArrayList.cs (73) : return -1;
IntArrayList.cs (74) : }
IntArrayList.cs (75) : else
IntArrayList.cs (76) : {
IntArrayList.cs (77) : int numRemove = Values[index];
IntArrayList.cs (78) : for (int i = index; i < NumElements - 1; i++)
IntArrayList.cs (79) : {
IntArrayList.cs (80) : Values[i] = Values[i+1];
IntArrayList.cs (81) : }
IntArrayList.cs (82) : NumElements--;
IntArrayList.cs (83) : return numRemove;
IntArrayList.cs (84) : }
IntArrayList.cs (92) : NumElements = 0;
IntArrayList.cs (98) : int[] newS = new int[newSize];
IntArrayList.cs (99) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (100) : {
IntArrayList.cs (101) : newS[i] = Values[i];
IntArrayList.cs (102) : }
IntArrayList.cs (103) : Values = newS;
IntArrayList.cs (109) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (110) : {
IntArrayList.cs (111) : yield return Values[i];
IntArrayList.cs (112) : }
IntList.cs (3) : using System.Runtime.InteropServices;
IntList.cs (59) : // int position = 0;HEAD
IntList.cs (60) : if (index < 0 || index >= Count())
IntList.cs (62) : return 0;
IntList.cs (63) : }
IntList.cs (64) : else
IntList.cs (65) : {
IntList.cs (66) : int a = 0;
IntList.cs (67) : IntListNode aux = First;
IntList.cs (68) : while (a < index)
IntList.cs (69) : {
IntList.cs (70) : a++;
IntList.cs (71) : aux = aux.Next;
IntList.cs (73) : return aux.Value;
IntList.cs (78) : if (index > Count())
IntList.cs (79) : {
IntList.cs (80) : return 0;
IntList.cs (81) : }
IntList.cs (87) : if (newNode != null && newNode.Next != null)
IntList.cs (88) : {
IntList.cs (97) : //TODO #3: add a new integer to the end of the list HEAD
IntList.cs (98) : IntListNode node = new IntListNode(value);
IntList.cs (99) : if (First == null)
IntList.cs (100) : {
IntList.cs (101) : First = node;
IntList.cs (102) : }
IntList.cs (103) : else
IntList.cs (104) : {
IntList.cs (105) : IntListNode aux = First;
IntList.cs (106) : while (aux.Next != null)
IntList.cs (107) : {
IntList.cs (108) : aux = aux.Next;
IntList.cs (110) : aux.Next = node;
IntList.cs (114) : while (newNode != null && i > Count())
IntList.cs (115) : {
IntList.cs (119) : if (newNode.Next != null && newNode.Next.Next == null)
IntList.cs (120) : {
IntList.cs (126) : }
IntList.cs (132) : //Return the removed item, -1 if the position is incorrect HEAD
IntList.cs (133) : if (index < 0 || index >= Count())
IntList.cs (134) : {
IntList.cs (135) : return -1;
IntList.cs (137) : if (index == 0)
IntList.cs (138) : {
IntList.cs (139) : int remove = First.Value;
IntList.cs (140) : First = First.Next;
IntList.cs (141) : return remove;
IntList.cs (142) : }
IntList.cs (143) : else
IntList.cs (144) : {
IntList.cs (145) : IntListNode aux = First;
IntList.cs (146) : for (int i = 0; i < index - 1; i++)
IntList.cs (147) : {
IntList.cs (148) : aux = aux.Next;
IntList.cs (149) : }
IntList.cs (150) : int remove = aux.Next.Value;
IntList.cs (151) : aux.Next = aux.Next.Next;
IntList.cs (152) : return remove;
IntList.cs (160) : First = null;
IntList.cs (167) : while (newNode != null)
IntList.cs (169) : int data = newNode.Value;
IntList.cs (171) : yield return data;
ArrayList.cs (2) : using System.ComponentModel;
ArrayList.cs (35) : return NumElements;
ArrayList.cs (43) : if (index < 0 || index >= NumElements)
ArrayList.cs (44) : {
ArrayList.cs (46) : }
ArrayList.cs (47) : else
ArrayList.cs (48) : {
ArrayList.cs (49) : return Values[index];
ArrayList.cs (50) : }
ArrayList.cs (58) : if (NumElements == Values.Length)
ArrayList.cs (59) : {
ArrayList.cs (60) : Resize(NumElements * 2);
ArrayList.cs (61) : }
ArrayList.cs (62) : Values[NumElements] = value;
ArrayList.cs (63) : NumElements++;
ArrayList.cs (72) : if (index < 0 || index >= NumElements)
ArrayList.cs (73) : {
ArrayList.cs (75) : }
ArrayList.cs (76) : else
ArrayList.cs (77) : {
ArrayList.cs (78) : T remove = Values[index];
ArrayList.cs (79) : for (int i = index; i < NumElements - 1; i++)
ArrayList.cs (80) : {
ArrayList.cs (81) : Values[i] = Values[i + 1];
ArrayList.cs (82) : }
ArrayList.cs (83) : NumElements--;
ArrayList.cs (84) : return remove;
ArrayList.cs (85) : }
ArrayList.cs (91) : NumElements = 0;
ArrayList.cs (98) : T[] size = new T[newSize];
ArrayList.cs (99) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (100) : {
ArrayList.cs (101) : size[i] = Values[i];
ArrayList.cs (102) : }
ArrayList.cs (103) : Values = size;
ArrayList.cs (108) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (109) : {
ArrayList.cs (110) : yield return Values[i];
ArrayList.cs (111) : }
List.cs (47) : return m_numItems;
List.cs (54) : if (index < 0 || index >= m_numItems)
List.cs (55) : {
List.cs (57) : }
List.cs (58) : else
List.cs (59) : {
List.cs (60) : int i = 0;
List.cs (61) : ListNode<T> aux = First;
List.cs (62) : while (i < index)
List.cs (63) : {
List.cs (64) : aux = aux.Next;
List.cs (65) : i++;
List.cs (66) : }
List.cs (67) : return aux.Value;
List.cs (68) : }
List.cs (74) : ListNode<T> node = new ListNode<T>(value);
List.cs (75) : if (First == null)
List.cs (76) : {
List.cs (77) : First = node;
List.cs (78) : Last = node;
List.cs (79) : }
List.cs (80) : else
List.cs (81) : {
List.cs (82) : ListNode<T> aux = First;
List.cs (83) : while (aux.Next != null)
List.cs (84) : {
List.cs (85) : aux = aux.Next;
List.cs (86) : }
List.cs (87) : aux.Next = node;
List.cs (88) : }
List.cs (89) : m_numItems++;
List.cs (95) : if (index < 0 || index >= m_numItems)
List.cs (96) : {
List.cs (98) : }
List.cs (99) : else if (index == 0)
List.cs (100) : {
List.cs (101) : T data = First.Value;
List.cs (102) : First = First.Next;
List.cs (103) : m_numItems--;
List.cs (104) : return data;
List.cs (105) : }
List.cs (106) : else
List.cs (107) : {
List.cs (108) : ListNode<T> aux = First;
List.cs (109) : int a = 0;
List.cs (110) : while (a < index - 1)
List.cs (111) : {
List.cs (112) : aux = aux.Next;
List.cs (113) : a++;
List.cs (114) : }
List.cs (115) : T data = aux.Next.Value;
List.cs (116) : aux.Next = aux.Next.Next;
List.cs (117) : if (index == m_numItems - 1)
List.cs (118) : {
List.cs (119) : Last = aux;
List.cs (120) : }
List.cs (121) : m_numItems--;
List.cs (122) : return data;
List.cs (123) : }
List.cs (129) : m_numItems = 0;
List.cs (130) : First = null;
List.cs (131) : Last = null;
List.cs (137) : ListNode<T> node = First;
List.cs (138) : while (node != null)
List.cs (139) : {
List.cs (140) : T data = node.Value;
List.cs (141) : node = node.Next;
List.cs (142) : yield return data;
List.cs (143) : }
Queue.cs (1) : using System.Diagnostics;
Queue.cs (2) : using System.Reflection.Emit;
Queue.cs (3) : using System.Windows.Markup;
Queue.cs (10) : public List<T> Elements = new List<T>();
Queue.cs (15) : ListNode<T> node = First;
Queue.cs (16) : string output = "[";
Queue.cs (18) : while (node != null)
Queue.cs (19) : {
Queue.cs (20) : output += node.ToString() + ",";
Queue.cs (21) : node = node.Next;
Queue.cs (22) : }
Queue.cs (23) : output = output.TrimEnd(',') + "] " + Count() + " elements";
Queue.cs (25) : return output;
Queue.cs (32) : return Elements.Count();
Queue.cs (38) : Elements.Clear();
Queue.cs (43) : Elements.Add(value);
Queue.cs (49) : T ele = Elements[0];
Queue.cs (50) : Elements.Remove(0);
Queue.cs (51) : return ele;
Stack.cs (2) : using System.Runtime.CompilerServices;
Stack.cs (3) : using System.Runtime.Serialization.Formatters;
Stack.cs (4) : using System.Windows.Markup;
Stack.cs (10) : public List<T> Elements = new List<T>();
Stack.cs (11) : int top = -1;
Stack.cs (16) : string output = "[";
Stack.cs (18) : for (int i = 0; i < Count(); i++)
Stack.cs (19) : output += Elements[i] + ",";
Stack.cs (20) : output = output.TrimEnd(',') + "] " + Count() + " elements";
Stack.cs (22) : return output;
Stack.cs (29) : return Elements.Count();
Stack.cs (35) : Elements.Clear();
Stack.cs (40) : Elements.Add(value);
Stack.cs (46) : if (top == -1)
Stack.cs (47) : {
Stack.cs (49) : }
Stack.cs (50) : else
Stack.cs (51) : {
Stack.cs (52) : T ele = Elements[top];
Stack.cs (53) : top--;
Stack.cs (54) : return ele;
Stack.cs (55) : }
