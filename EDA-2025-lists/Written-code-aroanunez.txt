IntArrayList.cs (36) : return NumElements;
IntArrayList.cs (44) : if (index < 0 || index >= NumElements)
IntArrayList.cs (45) : {
IntArrayList.cs (47) : }
IntArrayList.cs (48) : else
IntArrayList.cs (49) : {
IntArrayList.cs (50) : return Values[index];
IntArrayList.cs (51) : }
IntArrayList.cs (58) : if (NumElements == Values.Length)
IntArrayList.cs (59) : {
IntArrayList.cs (60) : Resize(Values.Length * 2);
IntArrayList.cs (61) : }
IntArrayList.cs (62) : Values[NumElements] = value;
IntArrayList.cs (63) : NumElements++;
IntArrayList.cs (71) : if (index < 0 || index >= NumElements)
IntArrayList.cs (72) : {
IntArrayList.cs (73) : return -1;
IntArrayList.cs (74) : }
IntArrayList.cs (75) : else
IntArrayList.cs (76) : {
IntArrayList.cs (77) : int numRemove = Values[index];
IntArrayList.cs (78) : for (int i = index; i < NumElements - 1; i++)
IntArrayList.cs (79) : {
IntArrayList.cs (80) : Values[i] = Values[i+1];
IntArrayList.cs (81) : }
IntArrayList.cs (82) : NumElements--;
IntArrayList.cs (83) : return numRemove;
IntArrayList.cs (84) : }
IntArrayList.cs (92) : NumElements = 0;
IntArrayList.cs (98) : int[] newS = new int[newSize];
IntArrayList.cs (99) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (100) : {
IntArrayList.cs (101) : newS[i] = Values[i];
IntArrayList.cs (102) : }
IntArrayList.cs (103) : Values = newS;
IntArrayList.cs (109) : foreach (int value in Values)
IntArrayList.cs (110) : {
IntArrayList.cs (111) : yield return value;
IntArrayList.cs (112) : }
IntList.cs (63) : if(index>Count())
IntList.cs (64) : {
IntList.cs (65) : return 0;
IntList.cs (66) : }
IntList.cs (72) : if(newNode !=null && newNode.Next!=null)
IntList.cs (73) : {
IntList.cs (85) : while(newNode!=null && i>Count())
IntList.cs (86) : {
IntList.cs (90) : if(newNode.Next!=null && newNode.Next.Next==null)
IntList.cs (91) : {
IntList.cs (106) : while(newNode!=null && index>i)
IntList.cs (107) : {
IntList.cs (111) : if(newNode!=null && newNode.Next!=null)
IntList.cs (112) : {
