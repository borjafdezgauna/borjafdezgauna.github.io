IntArrayList.cs (36) : return NumElements;
IntList.cs (3) : using System.Xml;
IntList.cs (43) : IntListNode node = First;
IntList.cs (44) : int count = 0;
IntList.cs (46) : while(node != null)
IntList.cs (47) : {
IntList.cs (48) : count++;
IntList.cs (49) : node = node.Next;
IntList.cs (50) : }
IntList.cs (52) : return count;
IntList.cs (60) : IntListNode node = First;
IntList.cs (61) : int count = 0;
IntList.cs (63) : if (index < 0)
IntList.cs (67) : {
IntList.cs (69) : {
IntList.cs (70) : count++;
IntList.cs (71) : node = node.Next;
IntList.cs (72) : }
IntList.cs (73) : }
IntList.cs (75) : return node.Value;
IntList.cs (83) : IntListNode newNode = new IntListNode(value);
IntList.cs (85) : {
IntList.cs (86) : First = newNode;
IntList.cs (87) : }
IntList.cs (88) : else
IntList.cs (89) : {
IntList.cs (90) : IntListNode node = First;
IntList.cs (91) : while (node.Next != null)
IntList.cs (92) : {
IntList.cs (93) : node = node.Next;
IntList.cs (94) : }
IntList.cs (95) : node.Next = newNode;
IntList.cs (96) : }
IntList.cs (104) : IntListNode node = First;
IntList.cs (108) : {
IntList.cs (109) : int borrado = node.Value;
IntList.cs (111) : return borrado;
IntList.cs (112) : }
IntList.cs (114) : int posicion = 0;
IntList.cs (115) : while (node != null && posicion < index - 1)
IntList.cs (116) : {
IntList.cs (117) : node = node.Next;
IntList.cs (118) : posicion++;
IntList.cs (119) : }
IntList.cs (124) : int borradofin = node.Next.Value;
IntList.cs (125) : node.Next = node.Next.Next;
IntList.cs (127) : return borradofin;
