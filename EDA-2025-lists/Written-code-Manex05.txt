IntArrayList.cs (3) : using System.Runtime.CompilerServices;
IntArrayList.cs (37) : return NumElements;
IntArrayList.cs (45) : if (index < 0 || index >= Values.Length)
IntArrayList.cs (46) : {
IntArrayList.cs (48) : }
IntArrayList.cs (49) : else
IntArrayList.cs (50) : {
IntArrayList.cs (51) : return Values[index];
IntArrayList.cs (52) : }
IntArrayList.cs (61) : if (NumElements < Values.Length)
IntArrayList.cs (62) : {
IntArrayList.cs (63) : Values[NumElements] = value;
IntArrayList.cs (64) : NumElements++;
IntArrayList.cs (65) : }
IntArrayList.cs (66) : else
IntArrayList.cs (67) : {
IntArrayList.cs (68) : Resize(Values.Length * 2);
IntArrayList.cs (69) : Add(value);
IntArrayList.cs (70) : }
IntArrayList.cs (78) : if (index < 0 ||index >= NumElements)
IntArrayList.cs (79) : {
IntArrayList.cs (80) : return -1;
IntArrayList.cs (81) : }
IntArrayList.cs (83) : int removedElement = Values[index];
IntArrayList.cs (85) : for (int i = index; i < NumElements - 1; i++)
IntArrayList.cs (86) : {
IntArrayList.cs (87) : Values[i] = Values[i + 1];
IntArrayList.cs (88) : }
IntArrayList.cs (90) : NumElements--;
IntArrayList.cs (92) : return removedElement;
IntArrayList.cs (100) : NumElements = 0;
IntArrayList.cs (106) : int[] newValues = new int[newSize];
IntArrayList.cs (108) : for (int i = 0; i < Values.Length; i++)
IntArrayList.cs (109) : {
IntArrayList.cs (110) : newValues[i] = Values[i];
IntArrayList.cs (111) : }
IntArrayList.cs (113) : Values = newValues;
IntArrayList.cs (121) : foreach(int i in Values)
IntArrayList.cs (122) : {
IntArrayList.cs (123) : yield return i;
IntArrayList.cs (124) : }
IntList.cs (38) : //TODO #1: return the number of elements on the list
IntList.cs (52) : //TODO #2: return the element on the index-th position. O if the position is out of bounds
IntList.cs (67) : //TODO #3: add a new integer to the end of the list
IntList.cs (83) : //TODO #4: remove the element on the index-th position. Do nothing if position is out of bounds
IntList.cs (84) : //Return the removed item, -1 if the position is incorrect
IntList.cs (98) : return 0;
IntList.cs (99) : }
IntList.cs (101) : //TODO #5: remove all the elements on the list
IntList.cs (107) : //TODO #6 : Return an enumerator using "yield return" for each of the values in this list
