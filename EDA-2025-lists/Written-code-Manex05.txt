IntArrayList.cs (3) : using System.Runtime.CompilerServices;
IntArrayList.cs (37) : return NumElements;
IntArrayList.cs (45) : if (index < 0 || index >= Values.Length)
IntArrayList.cs (46) : {
IntArrayList.cs (48) : }
IntArrayList.cs (49) : else
IntArrayList.cs (50) : {
IntArrayList.cs (51) : return Values[index];
IntArrayList.cs (52) : }
IntArrayList.cs (61) : if (NumElements < Values.Length)
IntArrayList.cs (62) : {
IntArrayList.cs (63) : Values[NumElements] = value;
IntArrayList.cs (64) : NumElements++;
IntArrayList.cs (65) : }
IntArrayList.cs (66) : else
IntArrayList.cs (67) : {
IntArrayList.cs (68) : Resize(Values.Length * 2);
IntArrayList.cs (69) : Add(value);
IntArrayList.cs (70) : }
IntArrayList.cs (78) : if (index < 0 ||index >= NumElements)
IntArrayList.cs (79) : {
IntArrayList.cs (80) : return -1;
IntArrayList.cs (81) : }
IntArrayList.cs (83) : int removedElement = Values[index];
IntArrayList.cs (85) : for (int i = index; i < NumElements - 1; i++)
IntArrayList.cs (86) : {
IntArrayList.cs (87) : Values[i] = Values[i + 1];
IntArrayList.cs (88) : }
IntArrayList.cs (90) : NumElements--;
IntArrayList.cs (92) : return removedElement;
IntArrayList.cs (100) : NumElements = 0;
IntArrayList.cs (106) : int[] newValues = new int[newSize];
IntArrayList.cs (108) : for (int i = 0; i < Values.Length; i++)
IntArrayList.cs (109) : {
IntArrayList.cs (110) : newValues[i] = Values[i];
IntArrayList.cs (111) : }
IntArrayList.cs (113) : Values = newValues;
IntArrayList.cs (121) : foreach(int i in Values)
IntArrayList.cs (122) : {
IntArrayList.cs (123) : yield return i;
IntArrayList.cs (124) : }
IntList.cs (38) : //TODO #1: return the number of elements on the list
IntList.cs (53) : //TODO #2: return the element on the index-th position. O if the position is out of bounds
IntList.cs (58) : if(index < 0 || index >= Count())
IntList.cs (59) : {
IntList.cs (60) : return 0;
IntList.cs (61) : }
IntList.cs (74) : //TODO #3: add a new integer to the end of the list
IntList.cs (94) : //TODO #4: remove the element on the index-th position. Do nothing if position is out of bounds
IntList.cs (95) : //Return the removed item, -1 if the position is incorrect
IntList.cs (100) : return -1;
IntList.cs (121) : }
IntList.cs (123) : //TODO #5: remove all the elements on the list
IntList.cs (130) : //TODO #6 : Return an enumerator using "yield return" for each of the values in this list
IntList.cs (135) : while (actual.Next != null)
ArrayList.cs (34) : return NumElements;
ArrayList.cs (42) : if (index < 0 || index >= Values.Length)
ArrayList.cs (43) : {
ArrayList.cs (45) : }
ArrayList.cs (47) : return Values[index];
ArrayList.cs (56) : if (NumElements < Values.Length)
ArrayList.cs (57) : {
ArrayList.cs (58) : Values[NumElements] = value;
ArrayList.cs (59) : NumElements++;
ArrayList.cs (60) : }
ArrayList.cs (61) : else
ArrayList.cs (62) : {
ArrayList.cs (63) : Resize(Values.Length * 2);
ArrayList.cs (64) : Add(value);
ArrayList.cs (65) : }
ArrayList.cs (75) : if(index < 0 || index >= NumElements)
ArrayList.cs (76) : {
ArrayList.cs (78) : }
ArrayList.cs (80) : T removeElement = Values[index];
ArrayList.cs (82) : if (index == NumElements - 1)
ArrayList.cs (83) : {
ArrayList.cs (84) : NumElements--;
ArrayList.cs (85) : }
ArrayList.cs (86) : else
ArrayList.cs (87) : {
ArrayList.cs (88) : for (int i = index; i < NumElements - 1; i++)
ArrayList.cs (89) : {
ArrayList.cs (90) : Values[i] = Values[i + 1];
ArrayList.cs (91) : }
ArrayList.cs (92) : NumElements--;
ArrayList.cs (93) : }
ArrayList.cs (95) : return removeElement;
ArrayList.cs (102) : NumElements = 0;
ArrayList.cs (110) : T[] newValues = new T[newSize];
ArrayList.cs (112) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (113) : {
ArrayList.cs (114) : newValues[i] = Values[i];
ArrayList.cs (115) : }
ArrayList.cs (117) : Values = newValues;
ArrayList.cs (123) : foreach (T i in Values)
ArrayList.cs (124) : {
ArrayList.cs (125) : yield return i;
ArrayList.cs (126) : }
List.cs (3) : using System.Runtime.InteropServices;
List.cs (48) : return m_numItems;
List.cs (55) : if (index < 0)
List.cs (56) : {
List.cs (57) : return default(T);
List.cs (58) : }
List.cs (60) : ListNode<T> current = First;
List.cs (61) : int count = 0;
List.cs (63) : while (current != null)
List.cs (64) : {
List.cs (65) : if (count == index)
List.cs (66) : {
List.cs (67) : return current.Value;
List.cs (68) : }
List.cs (69) : current = current.Next;
List.cs (70) : count++;
List.cs (71) : }
List.cs (81) : ListNode<T> newNode = new ListNode<T>(value);
List.cs (83) : if (First == null)
List.cs (84) : {
List.cs (85) : First = newNode;
List.cs (86) : Last = newNode;
List.cs (87) : }
List.cs (88) : else
List.cs (89) : {
List.cs (90) : Last.Next = newNode;
List.cs (91) : Last = newNode;
List.cs (92) : }
List.cs (94) : m_numItems++;
List.cs (101) : if (index < 0 || index >= m_numItems)
List.cs (102) : {
List.cs (104) : }
List.cs (106) : T value = Get(index);
List.cs (108) : if (index == 0)
List.cs (109) : {
List.cs (110) : First = First.Next;
List.cs (112) : if (First == null)
List.cs (113) : {
List.cs (114) : Last = null;
List.cs (115) : }
List.cs (116) : m_numItems--;
List.cs (117) : return value;
List.cs (118) : }
List.cs (120) : ListNode<T> previus = First;
List.cs (121) : for(int i = 0; i < index - 1; i++)
List.cs (122) : {
List.cs (123) : previus = previus.Next;
List.cs (124) : }
List.cs (126) : ListNode<T> nodeToEliminated = previus.Next;
List.cs (127) : previus.Next = nodeToEliminated.Next;
List.cs (129) : if (nodeToEliminated == Last)
List.cs (130) : {
List.cs (131) : Last = previus;
List.cs (132) : }
List.cs (134) : m_numItems--;
List.cs (136) : return value;
List.cs (143) : First = null;
List.cs (144) : Last = null;
List.cs (145) : m_numItems = 0;
List.cs (151) : ListNode<T> current = First;
List.cs (153) : while(current != null)
List.cs (154) : {
List.cs (155) : yield return current.Value;
List.cs (156) : current = current.Next;
List.cs (157) : }
Queue.cs (6) : List<T> list = new List<T>();
Queue.cs (18) : return list.Count();
Queue.cs (24) : list.Clear();
Queue.cs (29) : list.Add(value);
Queue.cs (34) : return list.Remove(0);
Stack.cs (6) : ArrayList<T> array = new ArrayList<T>();
Stack.cs (17) : return array.Count();
Stack.cs (23) : array.Clear();
Stack.cs (28) : array.Add(value);
Stack.cs (33) : int lastIndex = array.Count() - 1;
Stack.cs (34) : return array.Remove(lastIndex);
