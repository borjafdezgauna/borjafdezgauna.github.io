IntArrayList.cs (35) : return NumElements;
IntArrayList.cs (42) : if (index < 0)
IntArrayList.cs (43) : {
IntArrayList.cs (45) : }
IntArrayList.cs (46) : return Values[index];
IntArrayList.cs (53) : int i = Count();
IntArrayList.cs (54) : Values[i + 1] = value;
IntList.cs (43) : IntListNode node = First;
IntList.cs (44) : int i = 0;
IntList.cs (45) : while (node != null)
IntList.cs (46) : {
IntList.cs (47) : node = node.Next;
IntList.cs (48) : i++;
IntList.cs (49) : }
IntList.cs (50) : return i;
IntList.cs (57) : IntListNode node = First;
IntList.cs (58) : int i = 0;
IntList.cs (59) : if (index < 0)
IntList.cs (60) : {
IntList.cs (62) : }
IntList.cs (63) : while (node != null && i < index)
IntList.cs (64) : {
IntList.cs (65) : node = node.Next;
IntList.cs (66) : i++;
IntList.cs (67) : }
IntList.cs (68) : if (node == null)
IntList.cs (69) : {
IntList.cs (70) : return 0;
IntList.cs (71) : }
IntList.cs (72) : return node.Value;
IntList.cs (79) : IntListNode addNode = new IntListNode(value);
IntList.cs (80) : IntListNode node = First;
IntList.cs (81) : if (First == null)
IntList.cs (82) : {
IntList.cs (83) : First = addNode;
IntList.cs (84) : return;
IntList.cs (85) : }
IntList.cs (86) : while (node.Next != null)
IntList.cs (87) : {
IntList.cs (88) : node = node.Next;
IntList.cs (89) : }
IntList.cs (90) : node.Next = addNode;
IntList.cs (98) : IntListNode node = First;
IntList.cs (99) : int i = 0;
IntList.cs (100) : if (index < 0) {
IntList.cs (101) : return -1;
IntList.cs (102) : }
IntList.cs (103) : else if (index == 0)
IntList.cs (104) : {
IntList.cs (105) : int removedValue = First.Value;
IntList.cs (106) : First = First.Next;
IntList.cs (107) : return removedValue;
IntList.cs (108) : }
IntList.cs (110) : while (node != null && i < index - 1)
IntList.cs (111) : {
IntList.cs (112) : node = node.Next;
IntList.cs (113) : i++;
IntList.cs (114) : }
IntList.cs (115) : int remove = node.Next.Value;
IntList.cs (116) : node.Next = node.Next.Next; // saltamos el nodo a eliminar
IntList.cs (117) : return remove;
IntList.cs (124) : First = null;
IntList.cs (130) : IntListNode node = First;
IntList.cs (131) : while (node != null)
IntList.cs (132) : {
IntList.cs (133) : yield return node.Value;
IntList.cs (134) : node = node.Next;
IntList.cs (135) : }
