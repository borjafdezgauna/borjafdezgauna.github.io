IntArrayList.cs (3) : using System.Runtime.ExceptionServices;
IntArrayList.cs (36) : return NumElements;
IntArrayList.cs (43) : if (index < 0 || index >= Count())
IntArrayList.cs (44) : {
IntArrayList.cs (46) : }
IntArrayList.cs (47) : return Values[index];
IntArrayList.cs (55) : if (Values.Length == NumElements)
IntArrayList.cs (56) : {
IntArrayList.cs (57) : Resize(Count() * 2);
IntArrayList.cs (58) : }
IntArrayList.cs (59) : Values[Count()] = value;
IntArrayList.cs (60) : NumElements++;
IntArrayList.cs (68) : int memoRemove = Values[index];
IntArrayList.cs (69) : if (index < 0 || index > Count())
IntArrayList.cs (70) : {
IntArrayList.cs (71) : return -1;
IntArrayList.cs (72) : }
IntArrayList.cs (73) : for (int i = index; i < NumElements - 1; i++)
IntArrayList.cs (74) : {
IntArrayList.cs (75) : Values[i] = Values[i + 1];
IntArrayList.cs (76) : }
IntArrayList.cs (77) : Values[Count()] = 0;
IntArrayList.cs (78) : NumElements = NumElements - 1;
IntArrayList.cs (79) : return memoRemove;
IntArrayList.cs (86) : for (int i = 0; i < Count(); i++)
IntArrayList.cs (87) : {
IntArrayList.cs (88) : Remove(i);
IntArrayList.cs (89) : }
IntArrayList.cs (90) : NumElements = 0;
IntArrayList.cs (95) : int[] newArrayList = new int[newSize];
IntArrayList.cs (96) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (97) : {
IntArrayList.cs (98) : newArrayList[i] = Values[i];
IntArrayList.cs (99) : }
IntArrayList.cs (100) : Values = newArrayList;
IntArrayList.cs (106) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (107) : {
IntArrayList.cs (108) : yield return Values[i];
IntArrayList.cs (109) : }
IntList.cs (43) : IntListNode node = First;
IntList.cs (44) : int i = 0;
IntList.cs (45) : while (node != null)
IntList.cs (46) : {
IntList.cs (47) : node = node.Next;
IntList.cs (48) : i++;
IntList.cs (49) : }
IntList.cs (50) : return i;
IntList.cs (57) : IntListNode node = First;
IntList.cs (58) : int i = 0;
IntList.cs (59) : if (index < 0)
IntList.cs (60) : {
IntList.cs (62) : }
IntList.cs (63) : while (node != null && i < index)
IntList.cs (64) : {
IntList.cs (65) : node = node.Next;
IntList.cs (66) : i++;
IntList.cs (67) : }
IntList.cs (68) : if (node == null)
IntList.cs (69) : {
IntList.cs (70) : return 0;
IntList.cs (71) : }
IntList.cs (72) : return node.Value;
IntList.cs (79) : IntListNode addNode = new IntListNode(value);
IntList.cs (80) : IntListNode node = First;
IntList.cs (81) : if (First == null)
IntList.cs (82) : {
IntList.cs (83) : First = addNode;
IntList.cs (84) : return;
IntList.cs (85) : }
IntList.cs (86) : while (node.Next != null)
IntList.cs (87) : {
IntList.cs (88) : node = node.Next;
IntList.cs (89) : }
IntList.cs (90) : node.Next = addNode;
IntList.cs (98) : IntListNode node = First;
IntList.cs (99) : int i = 0;
IntList.cs (100) : if (index < 0) {
IntList.cs (101) : return -1;
IntList.cs (102) : }
IntList.cs (103) : else if (index == 0)
IntList.cs (104) : {
IntList.cs (105) : int removedValue = First.Value;
IntList.cs (106) : First = First.Next;
IntList.cs (107) : return removedValue;
IntList.cs (108) : }
IntList.cs (110) : while (node != null && i < index - 1)
IntList.cs (111) : {
IntList.cs (112) : node = node.Next;
IntList.cs (113) : i++;
IntList.cs (114) : }
IntList.cs (115) : int remove = node.Next.Value;
IntList.cs (116) : node.Next = node.Next.Next; // saltamos el nodo a eliminar
IntList.cs (117) : return remove;
IntList.cs (124) : First = null;
IntList.cs (130) : IntListNode node = First;
IntList.cs (131) : while (node != null)
IntList.cs (132) : {
IntList.cs (133) : yield return node.Value;
IntList.cs (134) : node = node.Next;
IntList.cs (135) : }
