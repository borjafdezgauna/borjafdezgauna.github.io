IntArrayList.cs (3) : using System.Windows.Markup;
IntArrayList.cs (43) : if (index < 0 || index >= NumElements)
IntArrayList.cs (44) : {
IntArrayList.cs (46) : }
IntArrayList.cs (47) : return Values[index];
IntArrayList.cs (56) : Values[NumElements] = value;
IntArrayList.cs (57) : NumElements++;
IntArrayList.cs (65) : int numReturned = -1;
IntArrayList.cs (66) : if (index >= 0 && index < NumElements)
IntArrayList.cs (67) : {
IntArrayList.cs (68) : numReturned = Values[index];
IntArrayList.cs (69) : for(int i = index; i < NumElements - 1; i++)
IntArrayList.cs (70) : {
IntArrayList.cs (71) : numReturned = Values[index];
IntArrayList.cs (72) : Values[i] = Values[i + 1];
IntArrayList.cs (73) : }
IntArrayList.cs (74) : NumElements--;
IntArrayList.cs (76) : if (NumElements >= 0 && NumElements < Values.Length)
IntArrayList.cs (77) : {
IntArrayList.cs (78) : Values[NumElements] = 0;
IntArrayList.cs (79) : }
IntArrayList.cs (80) : }
IntArrayList.cs (81) : return numReturned;
IntArrayList.cs (89) : NumElements = 0;
IntArrayList.cs (96) : int[] newValues = new int[newSize];
IntArrayList.cs (97) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (98) : {
IntArrayList.cs (99) : newValues[i] = Values[i];
IntArrayList.cs (100) : }
IntArrayList.cs (101) : Values = newValues;
IntArrayList.cs (107) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (108) : {
IntArrayList.cs (109) : yield return Values[i];
IntArrayList.cs (110) : }
IntList.cs (64) : return 0;
IntList.cs (66) : if (index > 0)
IntList.cs (68) : while (node != null && count < index)
IntList.cs (84) : if (First == null)
IntList.cs (105) : if (index < 0 || node == null)
IntList.cs (106) : return -1;
IntList.cs (107) : if (index == 0)
IntList.cs (110) : First = node.Next;
IntList.cs (121) : if (node == null || node.Next == null)
IntList.cs (122) : return -1;
IntList.cs (135) : First = null;
ArrayList.cs (33) : return NumElements;
ArrayList.cs (40) : if (index < 0 || index >= NumElements)
ArrayList.cs (41) : {
ArrayList.cs (43) : }
ArrayList.cs (44) : return Values[index];
ArrayList.cs (52) : Values[NumElements] = value;
ArrayList.cs (53) : NumElements++;
ArrayList.cs (62) : if (index < 0 || index >= NumElements)
ArrayList.cs (63) : {
ArrayList.cs (65) : }
ArrayList.cs (66) : T removed = Values[index];
ArrayList.cs (67) : for (int i = index; i< NumElements-1; i++)
ArrayList.cs (68) : {
ArrayList.cs (69) : Values[i] = Values[i +1];
ArrayList.cs (70) : }
ArrayList.cs (71) : NumElements--;
ArrayList.cs (73) : return removed;
ArrayList.cs (80) : NumElements = 0;
ArrayList.cs (89) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (90) : {
ArrayList.cs (91) : newValues[i] = Values[i];
ArrayList.cs (92) : }
ArrayList.cs (93) : Values = newValues;
ArrayList.cs (99) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (100) : {
ArrayList.cs (101) : yield return Values[i];
ArrayList.cs (102) : }
List.cs (8) : public ListNode<T> Privious = null;
List.cs (47) : return m_numItems;
List.cs (54) : if (index < 0 || index >= Count() || First == null )
List.cs (56) : ListNode<T> node = First;
List.cs (57) : int currentIndex = 0;
List.cs (59) : while (node != null && currentIndex < index)
List.cs (60) : {
List.cs (62) : node = node.Next;
List.cs (63) : currentIndex++;
List.cs (64) : }
List.cs (66) : if (node != null)
List.cs (67) : {
List.cs (68) : return node.Value;
List.cs (69) : }
List.cs (70) : else
List.cs (71) : {
List.cs (72) : return default(T);
List.cs (73) : }
List.cs (79) : ListNode<T> newNode = new ListNode<T>(value);
List.cs (80) : if (First == null)
List.cs (81) : {
List.cs (82) : First = newNode;
List.cs (83) : Last = newNode;
List.cs (84) : }
List.cs (85) : else
List.cs (86) : {
List.cs (87) : Last.Next = newNode;
List.cs (89) : Last = newNode;
List.cs (90) : }
List.cs (91) : m_numItems++;
List.cs (99) : return default(T);
List.cs (104) : {
List.cs (107) : }
List.cs (110) : {
List.cs (112) : }
List.cs (114) : {
List.cs (128) : }
List.cs (137) : First = null;
List.cs (138) : Last = null;
