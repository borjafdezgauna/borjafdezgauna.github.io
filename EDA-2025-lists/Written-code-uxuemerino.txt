IntArrayList.cs (3) : using System.Drawing;
IntArrayList.cs (37) : return NumElements;
IntArrayList.cs (45) : if (index < 0 || index >= NumElements)
IntArrayList.cs (46) : {
IntArrayList.cs (48) : }
IntArrayList.cs (49) : else
IntArrayList.cs (50) : {
IntArrayList.cs (51) : return Values[index];
IntArrayList.cs (52) : }
IntArrayList.cs (59) : int i = Values.Length;
IntArrayList.cs (60) : if (NumElements == Values.Length)
IntArrayList.cs (61) : {
IntArrayList.cs (62) : Resize(NumElements * 2);
IntArrayList.cs (63) : }
IntArrayList.cs (64) : Values[NumElements] = value;
IntArrayList.cs (65) : NumElements++;
IntArrayList.cs (74) : if (index < 0 || index > NumElements)
IntArrayList.cs (75) : {
IntArrayList.cs (76) : return -1;
IntArrayList.cs (77) : }
IntArrayList.cs (78) : else
IntArrayList.cs (79) : {
IntArrayList.cs (80) : int removedItem = Values[index];
IntArrayList.cs (81) : for (int i=index;i<NumElements;i++)
IntArrayList.cs (82) : {
IntArrayList.cs (83) : Values[i] = Values[i+1];
IntArrayList.cs (84) : }
IntArrayList.cs (86) : Values[Values.Length - 1] = 0;
IntArrayList.cs (87) : NumElements--;
IntArrayList.cs (88) : return removedItem;
IntArrayList.cs (90) : }
IntArrayList.cs (98) : NumElements = 0;
IntArrayList.cs (104) : int[] newArrayList = new int[newSize];
IntArrayList.cs (105) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (106) : {
IntArrayList.cs (107) : newArrayList[i] = Values[i];
IntArrayList.cs (108) : }
IntArrayList.cs (109) : Values = newArrayList;
IntArrayList.cs (115) : foreach(int i in Values)
IntArrayList.cs (116) : {
IntArrayList.cs (117) : yield return i;
IntArrayList.cs (118) : }
IntList.cs (3) : using System.Diagnostics;
IntList.cs (44) : IntListNode actual = First;
IntList.cs (45) : int i = 0;
IntList.cs (46) : while (actual != null)
IntList.cs (47) : {
IntList.cs (48) : i++;
IntList.cs (49) : actual = actual.Next;
IntList.cs (50) : }
IntList.cs (51) : return i;
IntList.cs (59) : IntListNode actual = First;
IntList.cs (60) : if (index<0 || actual==null)
IntList.cs (61) : {
IntList.cs (63) : }
IntList.cs (64) : int i = 0;
IntList.cs (65) : while(actual != null && i<index)
IntList.cs (66) : {
IntList.cs (67) : i++;
IntList.cs (68) : actual = actual.Next;
IntList.cs (69) : }
IntList.cs (70) : return actual.Value;
IntList.cs (77) : IntListNode newnode = new IntListNode(value);
IntList.cs (78) : IntListNode actual = First;
IntList.cs (79) : int i = 0;
IntList.cs (80) : if (First == null)
IntList.cs (81) : {
IntList.cs (82) : First = newnode;
IntList.cs (83) : }
IntList.cs (84) : else
IntList.cs (85) : {
IntList.cs (86) : while (actual.Next != null)
IntList.cs (87) : {
IntList.cs (88) : i++;
IntList.cs (89) : actual = actual.Next;
IntList.cs (90) : }
IntList.cs (91) : actual.Next = newnode;
IntList.cs (92) : }
IntList.cs (101) : int i = 0;
IntList.cs (102) : if (First == null || index < 0)
IntList.cs (103) : {
IntList.cs (104) : return -1;
IntList.cs (105) : }
IntList.cs (106) : if (index==0)
IntList.cs (107) : {
IntList.cs (108) : int removedValue = First.Value;
IntList.cs (109) : First = First.Next;
IntList.cs (110) : return removedValue;
IntList.cs (111) : }
IntList.cs (112) : IntListNode actual = First;
IntList.cs (113) : while (actual.Next != null && i < index - 1)
IntList.cs (114) : {
IntList.cs (115) : i++;
IntList.cs (116) : actual = actual.Next;
IntList.cs (117) : }
IntList.cs (118) : if (actual.Next == null)
IntList.cs (119) : {
IntList.cs (120) : return -1;
IntList.cs (121) : }
IntList.cs (122) : int value = actual.Next.Value;
IntList.cs (123) : actual.Next = actual.Next.Next;
IntList.cs (124) : return value;
IntList.cs (131) : First = null;
IntList.cs (137) : IntListNode actual = First;
IntList.cs (138) : int i = 0;
IntList.cs (139) : while (actual.Next != null)
IntList.cs (140) : {
IntList.cs (141) : i++;
IntList.cs (142) : actual = actual.Next;
IntList.cs (144) : }
IntList.cs (145) : yield return actual.Value;
ArrayList.cs (34) : return NumElements;
ArrayList.cs (41) : if (index < 0 || index >= NumElements)
ArrayList.cs (42) : {
ArrayList.cs (44) : }
ArrayList.cs (46) : return Values[index];
ArrayList.cs (54) : int i = Values.Length;
ArrayList.cs (55) : if (NumElements == i)
ArrayList.cs (56) : {
ArrayList.cs (57) : Resize(NumElements * 2);
ArrayList.cs (58) : }
ArrayList.cs (59) : Values[NumElements] = value;
ArrayList.cs (60) : NumElements++;
ArrayList.cs (70) : if (index < 0 || index > NumElements)
ArrayList.cs (71) : {
ArrayList.cs (73) : }
ArrayList.cs (74) : else
ArrayList.cs (75) : {
ArrayList.cs (76) : T removedItem = Values[index];
ArrayList.cs (77) : for (int i=index;i<NumElements;i++)
ArrayList.cs (78) : {
ArrayList.cs (79) : Values[i] = Values[i+1];
ArrayList.cs (80) : }
ArrayList.cs (82) : Values[Values.Length - 1] = default(T);
ArrayList.cs (83) : NumElements--;
ArrayList.cs (84) : return removedItem;
ArrayList.cs (87) : }
ArrayList.cs (92) : NumElements = 0;
ArrayList.cs (99) : T[] newArrayList = new T[newSize];
ArrayList.cs (100) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (101) : {
ArrayList.cs (102) : newArrayList[i] = Values[i];
ArrayList.cs (103) : }
ArrayList.cs (104) : Values = newArrayList;
ArrayList.cs (110) : foreach(T i in Values)
ArrayList.cs (111) : {
ArrayList.cs (112) : yield return i;
ArrayList.cs (113) : }
List.cs (46) : return m_numItems;
List.cs (54) : ListNode<T> actual = First;
List.cs (55) : if (index<0 || actual==null)
List.cs (56) : {
List.cs (58) : }
List.cs (59) : int i = 0;
List.cs (60) : while(actual != null && i<index)
List.cs (61) : {
List.cs (62) : i++;
List.cs (63) : actual = actual.Next;
List.cs (64) : }
List.cs (65) : return actual.Value;
List.cs (72) : ListNode<T> newnode = new ListNode<T>(value);
List.cs (73) : if (First == null)
List.cs (74) : {
List.cs (75) : First = newnode;
List.cs (76) : Last = newnode;
List.cs (79) : else
List.cs (80) : {
List.cs (81) : Last.Next = newnode;
List.cs (82) : Last = newnode;
List.cs (83) : }
List.cs (84) : m_numItems++;
List.cs (85) : }
List.cs (90) : int i = 0;
List.cs (91) : if (First == null || index < 0||index>=m_numItems)
List.cs (92) : {
List.cs (94) : }
List.cs (95) : if (index==0)
List.cs (96) : {
List.cs (97) : T removedValue = First.Value;
List.cs (98) : First = First.Next;
List.cs (99) : if (First==null)
List.cs (100) : {
List.cs (101) : Last = null;
List.cs (102) : }
List.cs (103) : m_numItems--;
List.cs (104) : return removedValue;
List.cs (105) : }
List.cs (106) : else
List.cs (107) : {
List.cs (108) : ListNode<T> actual = First;
List.cs (109) : while (actual.Next != null && i < index - 1)
List.cs (110) : {
List.cs (111) : i++;
List.cs (112) : actual = actual.Next;
List.cs (113) : }
List.cs (114) : if (actual.Next == null)
List.cs (115) : {
List.cs (116) : Last=actual;
List.cs (117) : }
List.cs (118) : T value = actual.Next.Value;
List.cs (119) : actual.Next = actual.Next.Next;
List.cs (120) : m_numItems--;
List.cs (121) : return value;
List.cs (122) : }
List.cs (129) : First = null;
List.cs (130) : Last = null;
List.cs (131) : m_numItems= 0;
List.cs (138) : ListNode<T> actual = First;
List.cs (139) : int i = 0;
List.cs (140) : while (actual.Next != null)
List.cs (141) : {
List.cs (142) : i++;
List.cs (143) : actual = actual.Next;
List.cs (144) : }
List.cs (145) : yield return actual.Value;
Queue.cs (7) : List<T> list = new List<T>();
Queue.cs (16) : return list.Count();
Queue.cs (22) : list.Clear();
Queue.cs (27) : list.Add(value);
Queue.cs (32) : return list.Remove(0);
Stack.cs (7) : ArrayList<T> array=new ArrayList<T>();
Stack.cs (17) : return array.Count();
Stack.cs (23) : array.Clear();
Stack.cs (28) : array.Add(value);
Stack.cs (33) : int lastIndex = array.Count() - 1;
Stack.cs (34) : return array.Remove(lastIndex);
