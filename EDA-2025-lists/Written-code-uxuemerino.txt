IntArrayList.cs (3) : using System.Drawing;
IntArrayList.cs (37) : return NumElements;
IntArrayList.cs (45) : if (index < 0 || index >= NumElements)
IntArrayList.cs (46) : {
IntArrayList.cs (48) : }
IntArrayList.cs (49) : else
IntArrayList.cs (50) : {
IntArrayList.cs (51) : return Values[index];
IntArrayList.cs (52) : }
IntArrayList.cs (59) : int i = Values.Length;
IntArrayList.cs (60) : if (NumElements == Values.Length)
IntArrayList.cs (61) : {
IntArrayList.cs (62) : Resize(NumElements * 2);
IntArrayList.cs (63) : }
IntArrayList.cs (64) : Values[NumElements] = value;
IntArrayList.cs (65) : NumElements++;
IntArrayList.cs (74) : if (index < 0 || index > NumElements)
IntArrayList.cs (75) : {
IntArrayList.cs (76) : return -1;
IntArrayList.cs (77) : }
IntArrayList.cs (78) : else
IntArrayList.cs (79) : {
IntArrayList.cs (80) : int removedItem = Values[index];
IntArrayList.cs (81) : for (int i=index;i<NumElements;i++)
IntArrayList.cs (82) : {
IntArrayList.cs (83) : Values[i] = Values[i+1];
IntArrayList.cs (84) : }
IntArrayList.cs (86) : Values[Values.Length - 1] = 0;
IntArrayList.cs (87) : NumElements--;
IntArrayList.cs (88) : return removedItem;
IntArrayList.cs (90) : }
IntArrayList.cs (98) : NumElements = 0;
IntArrayList.cs (104) : int[] newArrayList = new int[newSize];
IntArrayList.cs (105) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (106) : {
IntArrayList.cs (107) : newArrayList[i] = Values[i];
IntArrayList.cs (108) : }
IntArrayList.cs (109) : Values = newArrayList;
IntArrayList.cs (115) : foreach(int i in Values)
IntArrayList.cs (116) : {
IntArrayList.cs (117) : yield return i;
IntArrayList.cs (118) : }
IntList.cs (3) : using System.Diagnostics;
IntList.cs (44) : IntListNode actual = First;
IntList.cs (45) : int i = 0;
IntList.cs (46) : while (actual != null)
IntList.cs (47) : {
IntList.cs (48) : i++;
IntList.cs (49) : actual = actual.Next;
IntList.cs (50) : }
IntList.cs (51) : return i;
IntList.cs (59) : IntListNode actual = First;
IntList.cs (60) : if (index<0 || actual==null)
IntList.cs (61) : {
IntList.cs (63) : }
IntList.cs (64) : int i = 0;
IntList.cs (65) : while(actual != null && i<index)
IntList.cs (66) : {
IntList.cs (67) : i++;
IntList.cs (68) : actual = actual.Next;
IntList.cs (69) : }
IntList.cs (70) : return actual.Value;
IntList.cs (77) : IntListNode newnode = new IntListNode(value);
IntList.cs (78) : IntListNode actual = First;
IntList.cs (79) : int i = 0;
IntList.cs (80) : if (First == null)
IntList.cs (81) : {
IntList.cs (82) : First = newnode;
IntList.cs (83) : }
IntList.cs (84) : else
IntList.cs (85) : {
IntList.cs (86) : while (actual.Next != null)
IntList.cs (87) : {
IntList.cs (88) : i++;
IntList.cs (89) : actual = actual.Next;
IntList.cs (90) : }
IntList.cs (91) : actual.Next = newnode;
IntList.cs (92) : }
IntList.cs (101) : int i = 0;
IntList.cs (102) : if (First == null || index < 0)
IntList.cs (103) : {
IntList.cs (104) : return -1;
IntList.cs (105) : }
IntList.cs (106) : if (index==0)
IntList.cs (107) : {
IntList.cs (108) : int removedValue = First.Value;
IntList.cs (109) : First = First.Next;
IntList.cs (110) : return removedValue;
IntList.cs (111) : }
IntList.cs (112) : IntListNode actual = First;
IntList.cs (113) : while (actual.Next != null && i < index - 1)
IntList.cs (114) : {
IntList.cs (115) : i++;
IntList.cs (116) : actual = actual.Next;
IntList.cs (117) : }
IntList.cs (118) : if (actual.Next == null)
IntList.cs (119) : {
IntList.cs (120) : return -1;
IntList.cs (121) : }
IntList.cs (122) : int value = actual.Next.Value;
IntList.cs (123) : actual.Next = actual.Next.Next;
IntList.cs (124) : return value;
IntList.cs (131) : First = null;
IntList.cs (137) : IntListNode actual = First;
IntList.cs (138) : int i = 0;
IntList.cs (139) : while (actual.Next != null)
IntList.cs (140) : {
IntList.cs (141) : i++;
IntList.cs (142) : actual = actual.Next;
IntList.cs (144) : }
IntList.cs (145) : yield return actual.Value;
