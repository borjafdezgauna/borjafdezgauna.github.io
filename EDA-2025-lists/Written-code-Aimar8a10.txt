IntArrayList.cs (33) : return NumElements;
IntArrayList.cs (39) : if (index < 0 || index >= NumElements)
IntArrayList.cs (40) : {
IntArrayList.cs (42) : }
IntArrayList.cs (43) : else
IntArrayList.cs (44) : {
IntArrayList.cs (45) : return Values[index];
IntArrayList.cs (46) : }
IntArrayList.cs (53) : if (NumElements == Values.Length)
IntArrayList.cs (54) : {
IntArrayList.cs (55) : Resize(Values.Length * 2);
IntArrayList.cs (56) : }
IntArrayList.cs (57) : Values[NumElements] = value;
IntArrayList.cs (58) : NumElements++;
IntArrayList.cs (65) : if (index < 0 || index >= NumElements)
IntArrayList.cs (66) : {
IntArrayList.cs (67) : return -1;
IntArrayList.cs (68) : }
IntArrayList.cs (69) : else if (index == NumElements - 1)
IntArrayList.cs (70) : {
IntArrayList.cs (71) : int element = Values[NumElements - 1];
IntArrayList.cs (72) : NumElements--;
IntArrayList.cs (73) : return element;
IntArrayList.cs (74) : }
IntArrayList.cs (75) : else
IntArrayList.cs (76) : {
IntArrayList.cs (77) : int numAEliminar = Values[index];
IntArrayList.cs (79) : for (int i = index; i < NumElements - 1; i++)
IntArrayList.cs (80) : {
IntArrayList.cs (81) : Values[i] = Values[i + 1];
IntArrayList.cs (82) : }
IntArrayList.cs (84) : NumElements--;
IntArrayList.cs (86) : return numAEliminar;
IntArrayList.cs (87) : }
IntArrayList.cs (93) : NumElements = 0;
IntArrayList.cs (99) : int[] nuevo = new int[newSize];
IntArrayList.cs (100) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (101) : {
IntArrayList.cs (102) : nuevo[i] = Values[i];
IntArrayList.cs (103) : }
IntArrayList.cs (104) : Values = nuevo;
IntArrayList.cs (110) : foreach (int value in Values)
IntArrayList.cs (111) : {
IntArrayList.cs (112) : yield return value;
IntArrayList.cs (113) : }
IntList.cs (42) : IntListNode node = First;
IntList.cs (45) : {
IntList.cs (46) : cont++;
IntList.cs (47) : node = node.Next;
IntList.cs (53) : }
IntList.cs (61) : if (index >= Count() || index < 0)
IntList.cs (62) : {
IntList.cs (64) : }
IntList.cs (65) : else
IntList.cs (66) : {
IntList.cs (68) : IntListNode node = First;
IntList.cs (69) : while (i < index)
IntList.cs (70) : {
IntList.cs (71) : i++;
IntList.cs (72) : node = node.Next;
IntList.cs (73) : }
IntList.cs (74) : return node.Value;
IntList.cs (75) : }
IntList.cs (81) : IntListNode node = First;
IntList.cs (88) : while (node.Next != null)
IntList.cs (89) : {
IntList.cs (90) : node = node.Next;
IntList.cs (91) : }
IntList.cs (101) : if (index < 0 || First == null)
IntList.cs (102) : return -1;
IntList.cs (104) : // Caso: eliminar la cabeza
IntList.cs (105) : if (index == 0)
IntList.cs (108) : First = First.Next;
IntList.cs (114) : int i = 1;
IntList.cs (117) : {
IntList.cs (120) : i++;
IntList.cs (133) : First = null;
IntList.cs (139) : for (int i = 0; i < Count(); i++)
IntList.cs (140) : {
IntList.cs (141) : yield return Get(i);
IntList.cs (142) : }
ArrayList.cs (33) : return NumElements;
ArrayList.cs (53) : if (NumElements == Values.Length)
ArrayList.cs (54) : {
ArrayList.cs (55) : Resize(Values.Length * 2);
ArrayList.cs (56) : }
ArrayList.cs (57) : Values[NumElements] = value;
ArrayList.cs (58) : NumElements++;
ArrayList.cs (83) : NumElements = 0;
ArrayList.cs (90) : T[] nuevo = new T[newSize];
ArrayList.cs (91) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (92) : {
ArrayList.cs (93) : nuevo[i] = Values[i];
ArrayList.cs (94) : }
ArrayList.cs (95) : Values = nuevo;
List.cs (2) : using Lists;
List.cs (45) : return m_numItems;
List.cs (51) : if (index < 0 || index >= m_numItems)
List.cs (52) : {
List.cs (54) : }
List.cs (55) : else
List.cs (56) : {
List.cs (65) : }
List.cs (143) : m_numItems = 0;
Queue.cs (5) : IList<T> Values = new List<T>();
Queue.cs (9) : return Values.ToString();
Queue.cs (14) : return Values.Count();
Queue.cs (19) : Values.Clear();
Queue.cs (24) : Values.Add(value);
Queue.cs (29) : T elem = Values.Remove(0);
Queue.cs (30) : return elem;
Stack.cs (5) : IList<T> Values = new ArrayList<T>();
Stack.cs (9) : return Values.ToString();
Stack.cs (14) : return Values.Count();
Stack.cs (15) : }
Stack.cs (17) : public void Clear()
Stack.cs (18) : {
Stack.cs (19) : Values.Clear();
Stack.cs (22) : public void Push(T value)
Stack.cs (23) : {
Stack.cs (24) : List<T> nueva = new List<T>();
Stack.cs (25) : nueva.Add(value);
Stack.cs (27) : foreach (T v in Values)
Stack.cs (28) : {
Stack.cs (29) : nueva.Add(v);
Stack.cs (30) : }
Stack.cs (31) : Values = nueva;
Stack.cs (32) : }
Stack.cs (36) : T elem = Values.Remove(0);
Stack.cs (37) : return elem;
