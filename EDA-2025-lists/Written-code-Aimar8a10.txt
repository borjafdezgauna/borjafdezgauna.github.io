IntArrayList.cs (33) : return NumElements;
IntArrayList.cs (39) : if (index < 0 || index >= NumElements)
IntArrayList.cs (40) : {
IntArrayList.cs (42) : }
IntArrayList.cs (43) : else
IntArrayList.cs (44) : {
IntArrayList.cs (45) : return Values[index];
IntArrayList.cs (46) : }
IntArrayList.cs (53) : if (NumElements == Values.Length)
IntArrayList.cs (54) : {
IntArrayList.cs (55) : Resize(Values.Length * 2);
IntArrayList.cs (56) : }
IntArrayList.cs (57) : Values[NumElements] = value;
IntArrayList.cs (58) : NumElements++;
IntArrayList.cs (72) : NumElements = 0;
IntArrayList.cs (78) : int[] nuevo = new int[newSize];
IntArrayList.cs (79) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (80) : {
IntArrayList.cs (81) : nuevo[i] = Values[i];
IntArrayList.cs (82) : }
IntArrayList.cs (83) : Values = nuevo;
IntArrayList.cs (89) : foreach (int value in Values)
IntArrayList.cs (90) : {
IntArrayList.cs (91) : yield return value;
IntArrayList.cs (92) : }
IntList.cs (42) : IntListNode node = First;
IntList.cs (45) : {
IntList.cs (46) : cont++;
IntList.cs (47) : node = node.Next;
IntList.cs (53) : }
IntList.cs (61) : if (index >= Count() || index < 0)
IntList.cs (62) : {
IntList.cs (64) : }
IntList.cs (65) : else
IntList.cs (66) : {
IntList.cs (68) : IntListNode node = First;
IntList.cs (69) : while (i < index)
IntList.cs (70) : {
IntList.cs (71) : i++;
IntList.cs (72) : node = node.Next;
IntList.cs (73) : }
IntList.cs (74) : return node.Value;
IntList.cs (75) : }
IntList.cs (81) : IntListNode node = First;
IntList.cs (88) : while (node.Next != null)
IntList.cs (89) : {
IntList.cs (90) : node = node.Next;
IntList.cs (91) : }
IntList.cs (123) : First = null;
IntList.cs (129) : for (int i = 0; i < Count(); i++)
IntList.cs (130) : {
IntList.cs (131) : yield return Get(i);
IntList.cs (132) : }
ArrayList.cs (31) : return NumElements;
ArrayList.cs (45) : if (NumElements == Values.Length)
ArrayList.cs (46) : {
ArrayList.cs (47) : Resize(Values.Length * 2);
ArrayList.cs (48) : }
ArrayList.cs (49) : Values[NumElements] = value;
ArrayList.cs (50) : NumElements++;
ArrayList.cs (64) : NumElements = 0;
ArrayList.cs (71) : T[] nuevo = new T[newSize];
ArrayList.cs (72) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (73) : {
ArrayList.cs (74) : nuevo[i] = Values[i];
ArrayList.cs (75) : }
ArrayList.cs (76) : Values = nuevo;
List.cs (2) : using Lists;
List.cs (45) : return m_numItems;
List.cs (51) : if (index < 0 || index >= m_numItems)
List.cs (52) : {
List.cs (54) : }
List.cs (55) : else
List.cs (56) : {
List.cs (57) : //Tengo que encontrar la forma de que devuelva el valor
List.cs (58) : return default(T);
List.cs (59) : // return T.Value;
List.cs (60) : }
List.cs (78) : m_numItems = 0;
