IntArrayList.cs (36) : return NumElements;
IntArrayList.cs (44) : if(index < 0 || index >= NumElements)
IntArrayList.cs (45) : {
IntArrayList.cs (47) : }
IntArrayList.cs (49) : return Values[index];
IntArrayList.cs (57) : if(NumElements == Values.Length)
IntArrayList.cs (58) : {
IntArrayList.cs (59) : Resize(Values.Lenght * 2);
IntArrayList.cs (62) : Values [NumElements] = value;
IntArrayList.cs (63) : NumElements++;
IntArrayList.cs (64) : }
IntArrayList.cs (71) : if(index > NumElements || index < 0)
IntArrayList.cs (72) : {
IntArrayList.cs (73) : return -1;
IntArrayList.cs (74) : }
IntArrayList.cs (75) : int elimelement = Values[index];
IntArrayList.cs (76) : for(int i = index; i< NumElements-1; i++)
IntArrayList.cs (77) : {
IntArrayList.cs (78) : Values[i] = Values[i+1];
IntArrayList.cs (79) : }
IntArrayList.cs (80) : NumElements--;
IntArrayList.cs (81) : return elimelement;
IntArrayList.cs (89) : NumElements = 0;
IntArrayList.cs (95) : int[] array = new int[newSize];
IntArrayList.cs (96) : for(int i = 0; i < newSize; i++)
IntArrayList.cs (97) : {
IntArrayList.cs (98) : array[i] = Values[i];
IntArrayList.cs (100) : }
IntArrayList.cs (101) : Values = array;
IntArrayList.cs (108) : for(int i =0; i < NumElements; i++)
IntArrayList.cs (109) : {
IntArrayList.cs (110) : yield return Values[i];
IntArrayList.cs (111) : }
IntList.cs (42) : int  count = 0;
IntList.cs (43) : IntListNode node = First;
IntList.cs (44) : while (node != null)
IntList.cs (45) : {
IntList.cs (46) : count++;
IntList.cs (47) : node = node.Next;
IntList.cs (49) : }
IntList.cs (50) : return count;
IntList.cs (58) : if(index < 0 || index >= Count())
IntList.cs (59) : {
IntList.cs (61) : }
IntList.cs (62) : int contador = 0;
IntList.cs (63) : IntListNode node = First;
IntList.cs (64) : while (contador < index)
IntList.cs (65) : {
IntList.cs (66) : contador++;
IntList.cs (67) : node = node.Next;
IntList.cs (68) : }
IntList.cs (69) : return node.Value;
IntList.cs (77) : IntListNode nuevo = new IntListNode(value);
IntList.cs (78) : if(First == null)
IntList.cs (79) : {
IntList.cs (80) : First = nuevo;
IntList.cs (81) : }
IntList.cs (82) : else
IntList.cs (83) : {
IntList.cs (84) : IntListNode node = First;
IntList.cs (85) : while(node.Next != null)
IntList.cs (86) : {
IntList.cs (87) : node = node.Next;
IntList.cs (88) : }
IntList.cs (89) : node.Next = nuevo;
IntList.cs (90) : }
IntList.cs (99) : if (index == 0)
IntList.cs (100) : {
IntList.cs (101) : int elem = First.Value;
IntList.cs (102) : First=First.Next;
IntList.cs (103) : return elem;
IntList.cs (104) : }
IntList.cs (105) : else
IntList.cs (106) : {
IntList.cs (107) : IntListNode node = First;
IntList.cs (108) : int contador = 0;
IntList.cs (110) : while (contador < index - 1)
IntList.cs (111) : {
IntList.cs (112) : node = node.Next;
IntList.cs (113) : contador++;
IntList.cs (114) : }
IntList.cs (115) : node.Next = node.Next.Next;
IntList.cs (116) : return node.Value;
IntList.cs (117) : }
IntList.cs (127) : First = null;
IntList.cs (133) : for(int i = 0; i < Count; i++)
IntList.cs (134) : {
IntList.cs (135) : yield return Get(i);
IntList.cs (136) : }
ArrayList.cs (34) : return NumElements;
ArrayList.cs (41) : if(index < 0 || index >= NumElements)
ArrayList.cs (42) : {
ArrayList.cs (44) : }
ArrayList.cs (45) : else
ArrayList.cs (46) : {
ArrayList.cs (47) : return Values[index];
ArrayList.cs (48) : }
ArrayList.cs (56) : if (NumElements == Values.Length)
ArrayList.cs (57) : {
ArrayList.cs (58) : Resize(NumElements*2);
ArrayList.cs (59) : }
ArrayList.cs (60) : Values[NumElements] = value;
ArrayList.cs (61) : NumElements++;
ArrayList.cs (70) : if ( index < 0 || index >= NumElements)
ArrayList.cs (71) : {
ArrayList.cs (73) : }
ArrayList.cs (74) : else
ArrayList.cs (75) : {
ArrayList.cs (76) : T elem = Values[index];
ArrayList.cs (77) : for(int i = 0;i < NumElements - 1; i++)
ArrayList.cs (78) : {
ArrayList.cs (79) : Values[i] = Values[i + 1];
ArrayList.cs (80) : }
ArrayList.cs (81) : NumElements--;
ArrayList.cs (82) : return elem;
ArrayList.cs (83) : }
ArrayList.cs (90) : NumElements = 0;
ArrayList.cs (97) : T[] nuevo = new T[newSize];
ArrayList.cs (98) : for(int i = 0; i < NumElements; i++)
ArrayList.cs (99) : {
ArrayList.cs (100) : nuevo[i] = Values[i];
ArrayList.cs (101) : }
ArrayList.cs (102) : Values = nuevo;
ArrayList.cs (107) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (108) : {
ArrayList.cs (109) : yield return Values[i];
ArrayList.cs (110) : }
List.cs (47) : return m_numItems;
List.cs (55) : if(index>= m_numItems)
List.cs (56) : {
List.cs (58) : }
List.cs (59) : else
List.cs (60) : {
List.cs (61) : int con = 0;
List.cs (62) : ListNode<T> node = First;
List.cs (63) : while (con < index)
List.cs (64) : {
List.cs (65) : node = node.Next;
List.cs (66) : con++;
List.cs (67) : }
List.cs (68) : return node.Value;
List.cs (69) : }
List.cs (75) : if(value == null)
List.cs (76) : {
List.cs (77) : ListNode<T> nuevo = new ListNode<T>(value);
List.cs (78) : First = nuevo;
List.cs (79) : Last = nuevo;
List.cs (80) : m_numItems++;
List.cs (81) : }
List.cs (82) : else
List.cs (83) : {
List.cs (84) : {
List.cs (85) : ListNode<T> nuevo = new ListNode<T>(value);
List.cs (86) : Last.Next = nuevo;
List.cs (87) : Last= nuevo;
List.cs (88) : m_numItems++;
List.cs (89) : }
List.cs (90) : }
List.cs (104) : m_numItems = 0;
List.cs (105) : First = null;
List.cs (106) : Last = null;
List.cs (112) : List<T> node = First;
List.cs (113) : while(node != null)
List.cs (114) : {
List.cs (115) : yield return node.Value;
List.cs (116) : node = node.Next;
List.cs (117) : }
