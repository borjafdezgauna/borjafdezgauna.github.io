IntArrayList.cs (3) : using System.Reflection.Metadata;
IntArrayList.cs (4) : using System.Security.Principal;
IntArrayList.cs (37) : return NumElements;
IntArrayList.cs (46) : if (index >= Count() || index < 0)
IntArrayList.cs (47) : {
IntArrayList.cs (49) : }
IntArrayList.cs (50) : return Values[index];
IntArrayList.cs (60) : int newIntPos = Count();
IntArrayList.cs (61) : Values[newIntPos] = value;
IntArrayList.cs (62) : NumElements++;
IntArrayList.cs (72) : //If index s out of bound
IntArrayList.cs (73) : if (index >= Count() || index < 0)
IntArrayList.cs (74) : {
IntArrayList.cs (75) : return -1;
IntArrayList.cs (76) : }
IntArrayList.cs (77) : //If index is not last element of the array
IntArrayList.cs (78) : if (index != Count() - 1)
IntArrayList.cs (79) : {
IntArrayList.cs (80) : int removeInt = Values[index];
IntArrayList.cs (82) : for (int i = index; i < Values.Length; i++)
IntArrayList.cs (83) : {
IntArrayList.cs (85) : Values[i] = Values[i + 1];
IntArrayList.cs (86) : }
IntArrayList.cs (88) : return removeInt;
IntArrayList.cs (89) : }
IntArrayList.cs (91) : if (index == Count() - 1)
IntArrayList.cs (92) : {
IntArrayList.cs (93) : int removeInt = Values[index];
IntArrayList.cs (95) : Values[Count() - 1] = 69;
IntArrayList.cs (97) : return removeInt;
IntArrayList.cs (99) : }
IntArrayList.cs (101) : return -1;
IntArrayList.cs (110) : NumElements = 0;
IntList.cs (3) : using System.Security.Principal;
IntList.cs (4) : using System.Threading;
IntList.cs (5) : using Microsoft.VisualBasic;
IntList.cs (45) : IntListNode Node = First;
IntList.cs (46) : int count = 0;
IntList.cs (47) : while (Node != null)
IntList.cs (48) : {
IntList.cs (49) : count++;
IntList.cs (50) : Node = Node.Next;
IntList.cs (51) : }
IntList.cs (53) : return count;
IntList.cs (63) : IntListNode Node = First;
IntList.cs (64) : int i = 0;
IntList.cs (65) : if (First == null)
IntList.cs (66) : {
IntList.cs (67) : return 0;
IntList.cs (68) : }
IntList.cs (69) : while (Node != null)
IntList.cs (70) : {
IntList.cs (71) : if (i == index)
IntList.cs (72) : {
IntList.cs (73) : return Node.Value;
IntList.cs (74) : }
IntList.cs (75) : i++;
IntList.cs (76) : Node = Node.Next;
IntList.cs (77) : }
IntList.cs (78) : return 0;
IntList.cs (87) : if(First == null)
IntList.cs (88) : {
IntList.cs (89) : First = new IntListNode(value);
IntList.cs (90) : return;
IntList.cs (91) : }
IntList.cs (93) : IntListNode node = First;
IntList.cs (96) : while (node.Next != null)
IntList.cs (97) : {
IntList.cs (98) : node = node.Next;
IntList.cs (99) : }
IntList.cs (101) : IntListNode last = node;
IntList.cs (102) : IntListNode newNode = new IntListNode(value);
IntList.cs (103) : last.Next = newNode;
IntList.cs (116) : //Si la lista esta vacia
IntList.cs (117) : if (First == null)
IntList.cs (118) : {
IntList.cs (119) : return -1;
IntList.cs (120) : }
IntList.cs (123) : //Si es el primer elemento el que se quiere eliminar y es el unico
IntList.cs (125) : IntListNode node = First;
IntList.cs (127) : if (index == 0 && node.Next == null)
IntList.cs (128) : {
IntList.cs (129) : int removedNum = node.Value;
IntList.cs (130) : First = null;
IntList.cs (131) : return removedNum;
IntList.cs (132) : }
IntList.cs (135) : //si es el primeer elemento el que se quiere eliminar y no es el unico
IntList.cs (137) : if (index == 0 && node.Next != null)
IntList.cs (138) : {
IntList.cs (139) : int removedNum = node.Value;
IntList.cs (140) : First = node.Next;
IntList.cs (141) : return removedNum;
IntList.cs (142) : }
IntList.cs (144) : //Moverse hasta el nodo anterior al que se quiere eliminar
IntList.cs (145) : int i = 0;
IntList.cs (146) : while (node != null && i < index - 1)
IntList.cs (147) : {
IntList.cs (148) : node = node.Next;
IntList.cs (149) : i++;
IntList.cs (150) : }
IntList.cs (152) : //Si el nodo es nulo o el siguiente es nulo
IntList.cs (153) : if (node == null || node.Next == null)
IntList.cs (154) : {
IntList.cs (155) : return -1;
IntList.cs (156) : }
IntList.cs (158) : int removedValue = node.Next.Value;
IntList.cs (159) : node.Next = node.Next.Next;
IntList.cs (160) : return removedValue;
IntList.cs (168) : IntListNode node = First;
IntList.cs (169) : First = null;
IntList.cs (177) : IntListNode node = First;
IntList.cs (178) : int lenght = Count();
IntList.cs (179) : for (int i = 1; i < lenght; i++)
IntList.cs (180) : {
IntList.cs (181) : yield return node.Value;
IntList.cs (182) : node = node.Next;
IntList.cs (183) : }
