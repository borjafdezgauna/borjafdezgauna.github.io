IntArrayList.cs (3) : using System.Reflection.Metadata;
IntArrayList.cs (4) : using System.Security.Principal;
IntArrayList.cs (37) : return NumElements;
IntArrayList.cs (46) : if (index >= Count() || index < 0)
IntArrayList.cs (47) : {
IntArrayList.cs (49) : }
IntArrayList.cs (50) : return Values[index];
IntArrayList.cs (60) : if(NumElements == Values.Length)
IntArrayList.cs (61) : {
IntArrayList.cs (62) : Resize(NumElements * 2);
IntArrayList.cs (63) : }
IntArrayList.cs (64) : Values[NumElements] = value;
IntArrayList.cs (65) : NumElements++;
IntArrayList.cs (72) : if (index < 0 || index >= NumElements)
IntArrayList.cs (73) : {
IntArrayList.cs (74) : return -1;
IntArrayList.cs (75) : }
IntArrayList.cs (77) : int removed = Values[index];
IntArrayList.cs (79) : // Mueve los elementos hacia la izquierda
IntArrayList.cs (80) : for (int i = index; i < NumElements - 1; i++)
IntArrayList.cs (81) : {
IntArrayList.cs (82) : Values[i] = Values[i + 1];
IntArrayList.cs (83) : }
IntArrayList.cs (85) : // Opcional: limpia el Ãºltimo espacio
IntArrayList.cs (86) : Values[NumElements - 1] = 0;
IntArrayList.cs (88) : NumElements--;
IntArrayList.cs (89) : return removed;
IntArrayList.cs (96) : NumElements = 0;
IntArrayList.cs (103) : if (newSize <= Values.Length)
IntArrayList.cs (104) : {
IntArrayList.cs (105) : return;
IntArrayList.cs (106) : }
IntArrayList.cs (109) : int[] newIntArrayList = new int[newSize];
IntArrayList.cs (111) : for (int i = 0, j = 0; i < Values.Length; i++)
IntArrayList.cs (112) : {
IntArrayList.cs (113) : newIntArrayList[j] = Values[i];
IntArrayList.cs (114) : j++;
IntArrayList.cs (115) : }
IntArrayList.cs (117) : Values = newIntArrayList;
IntArrayList.cs (126) : for(int i = 0; i<NumElements; i++)
IntArrayList.cs (127) : {
IntArrayList.cs (128) : yield return Values[i];
IntArrayList.cs (129) : }
IntList.cs (3) : using System.Security.Principal;
IntList.cs (4) : using System.Threading;
IntList.cs (5) : using Microsoft.VisualBasic;
IntList.cs (45) : IntListNode Node = First;
IntList.cs (46) : int count = 0;
IntList.cs (47) : while (Node != null)
IntList.cs (48) : {
IntList.cs (49) : count++;
IntList.cs (50) : Node = Node.Next;
IntList.cs (51) : }
IntList.cs (53) : return count;
IntList.cs (63) : IntListNode Node = First;
IntList.cs (64) : int i = 0;
IntList.cs (65) : if (First == null)
IntList.cs (66) : {
IntList.cs (67) : return 0;
IntList.cs (68) : }
IntList.cs (69) : while (Node != null)
IntList.cs (70) : {
IntList.cs (71) : if (i == index)
IntList.cs (72) : {
IntList.cs (73) : return Node.Value;
IntList.cs (74) : }
IntList.cs (75) : i++;
IntList.cs (76) : Node = Node.Next;
IntList.cs (77) : }
IntList.cs (78) : return 0;
IntList.cs (87) : if(First == null)
IntList.cs (88) : {
IntList.cs (89) : First = new IntListNode(value);
IntList.cs (90) : return;
IntList.cs (91) : }
IntList.cs (93) : IntListNode node = First;
IntList.cs (96) : while (node.Next != null)
IntList.cs (97) : {
IntList.cs (98) : node = node.Next;
IntList.cs (99) : }
IntList.cs (101) : IntListNode last = node;
IntList.cs (102) : IntListNode newNode = new IntListNode(value);
IntList.cs (103) : last.Next = newNode;
IntList.cs (116) : //Si la lista esta vacia
IntList.cs (117) : if (First == null)
IntList.cs (118) : {
IntList.cs (119) : return -1;
IntList.cs (120) : }
IntList.cs (123) : //Si es el primer elemento el que se quiere eliminar y es el unico
IntList.cs (125) : IntListNode node = First;
IntList.cs (127) : if (index == 0 && node.Next == null)
IntList.cs (128) : {
IntList.cs (129) : int removedNum = node.Value;
IntList.cs (130) : First = null;
IntList.cs (131) : return removedNum;
IntList.cs (132) : }
IntList.cs (135) : //si es el primeer elemento el que se quiere eliminar y no es el unico
IntList.cs (137) : if (index == 0 && node.Next != null)
IntList.cs (138) : {
IntList.cs (139) : int removedNum = node.Value;
IntList.cs (140) : First = node.Next;
IntList.cs (141) : return removedNum;
IntList.cs (142) : }
IntList.cs (144) : //Moverse hasta el nodo anterior al que se quiere eliminar
IntList.cs (145) : int i = 0;
IntList.cs (146) : while (node != null && i < index - 1)
IntList.cs (147) : {
IntList.cs (148) : node = node.Next;
IntList.cs (149) : i++;
IntList.cs (150) : }
IntList.cs (152) : //Si el nodo es nulo o el siguiente es nulo
IntList.cs (153) : if (node == null || node.Next == null)
IntList.cs (154) : {
IntList.cs (155) : return -1;
IntList.cs (156) : }
IntList.cs (158) : int removedValue = node.Next.Value;
IntList.cs (159) : node.Next = node.Next.Next;
IntList.cs (160) : return removedValue;
IntList.cs (168) : IntListNode node = First;
IntList.cs (169) : First = null;
IntList.cs (177) : IntListNode node = First;
IntList.cs (178) : int lenght = Count();
IntList.cs (179) : for (int i = 1; i < lenght; i++)
IntList.cs (180) : {
IntList.cs (181) : yield return node.Value;
IntList.cs (182) : node = node.Next;
IntList.cs (183) : }
ArrayList.cs (2) : using System.Diagnostics;
ArrayList.cs (3) : using System.Globalization;
ArrayList.cs (4) : using System.Linq.Expressions;
ArrayList.cs (5) : using System.Threading;
ArrayList.cs (6) : using System.Timers;
ArrayList.cs (7) : using System.Windows.Markup;
ArrayList.cs (8) : using System.Xml;
ArrayList.cs (9) : using Microsoft.VisualBasic;
ArrayList.cs (17) : int StartIndex = 0;
ArrayList.cs (18) : int LastIndex = 0;
ArrayList.cs (44) : return NumElements;
ArrayList.cs (51) : if (index < 0 || index >= NumElements)
ArrayList.cs (52) : {
ArrayList.cs (54) : }
ArrayList.cs (55) : int actualIndex = (StartIndex + index) % Values.Length;
ArrayList.cs (56) : return Values[actualIndex];
ArrayList.cs (65) : if(NumElements == Values.Length)
ArrayList.cs (66) : {
ArrayList.cs (67) : Resize(NumElements * 2);
ArrayList.cs (68) : }
ArrayList.cs (69) : Values[LastIndex] = value;
ArrayList.cs (70) : LastIndex = (LastIndex + 1) % Values.Length;
ArrayList.cs (71) : NumElements++;
ArrayList.cs (78) : //TODO #9: remove the element on the index-th position. O if the position is out of bounds
ArrayList.cs (80) : //Si el index es invalido
ArrayList.cs (81) : if (index < 0 || index >= NumElements)
ArrayList.cs (82) : {
ArrayList.cs (84) : }
ArrayList.cs (86) : int actualIndex = (StartIndex + index) % Values.Length;
ArrayList.cs (87) : T removedVar = Values[actualIndex];
ArrayList.cs (89) : //si solo hay un elemento
ArrayList.cs (90) : if (NumElements == 1)
ArrayList.cs (91) : {
ArrayList.cs (92) : removedVar = Values[StartIndex];
ArrayList.cs (93) : Clear();
ArrayList.cs (94) : return removedVar;
ArrayList.cs (95) : }
ArrayList.cs (97) : //Si hay varios elementos y es el primero el que se elimina
ArrayList.cs (98) : if (index == 0)
ArrayList.cs (99) : {
ArrayList.cs (100) : Values[StartIndex] = default(T);
ArrayList.cs (101) : StartIndex = (StartIndex + 1) % Values.Length;
ArrayList.cs (102) : }
ArrayList.cs (104) : //Si es el ultimo el que se elimina
ArrayList.cs (105) : if (index == NumElements - 1)
ArrayList.cs (106) : {
ArrayList.cs (107) : LastIndex = (LastIndex - 1 + Values.Length) % Values.Length;
ArrayList.cs (108) : Values[LastIndex] = default(T);
ArrayList.cs (109) : }
ArrayList.cs (112) : //Si es un elemento intermedio
ArrayList.cs (113) : else
ArrayList.cs (114) : {
ArrayList.cs (115) : //los ponemos como default(T) pero en el get no los devolvemos
ArrayList.cs (116) : Values[actualIndex] = default(T);
ArrayList.cs (117) : }
ArrayList.cs (119) : NumElements--;
ArrayList.cs (120) : return removedVar;
ArrayList.cs (126) : StartIndex = 0;
ArrayList.cs (127) : LastIndex = 0;
ArrayList.cs (128) : NumElements = LastIndex - StartIndex;
ArrayList.cs (136) : if (newSize <= Values.Length)
ArrayList.cs (137) : {
ArrayList.cs (138) : return;
ArrayList.cs (139) : }
ArrayList.cs (142) : T[] newIntArrayList = new T[newSize];
ArrayList.cs (144) : for (int i = 0, j = 0; i < Values.Length; i++)
ArrayList.cs (145) : {
ArrayList.cs (146) : newIntArrayList[j] = Values[i];
ArrayList.cs (147) : j++;
ArrayList.cs (148) : }
ArrayList.cs (150) : Values = newIntArrayList;
ArrayList.cs (157) : for(int i = 0; i<NumElements; i++)
ArrayList.cs (158) : {
ArrayList.cs (159) : yield return Values[i];
ArrayList.cs (160) : }
List.cs (3) : using System.Data;
List.cs (4) : using System.Globalization;
List.cs (5) : using System.Reflection;
List.cs (6) : using System.Runtime.InteropServices;
List.cs (7) : using System.Xml;
List.cs (14) : public ListNode<T> Previous = null;
List.cs (53) : return m_numItems;
List.cs (61) : ListNode<T> node = First;
List.cs (63) : if (First == null || index < 0 || index >= m_numItems)
List.cs (64) : {
List.cs (65) : return default(T);
List.cs (66) : }
List.cs (68) : for (int i = 0; i < m_numItems; i++)
List.cs (69) : {
List.cs (70) : if (i == index)
List.cs (71) : {
List.cs (72) : return node.Value;
List.cs (73) : }
List.cs (74) : node = node.Next;
List.cs (75) : }
List.cs (87) : //Guardamos value en newNode
List.cs (88) : ListNode<T> newNode = new ListNode<T>(value);
List.cs (90) : //Si esta vacio
List.cs (91) : if (First == null)
List.cs (92) : {
List.cs (93) : First = newNode;
List.cs (94) : Last = newNode;
List.cs (95) : }
List.cs (96) : //si hay un First
List.cs (97) : else
List.cs (98) : {
List.cs (99) : newNode.Previous = Last;
List.cs (100) : Last.Next = newNode;
List.cs (101) : Last = newNode;
List.cs (102) : }
List.cs (103) : m_numItems++;
List.cs (112) : //Si esta vacio o index esta "out of bounds"
List.cs (113) : if (First == null || index < 0 || index >= m_numItems)
List.cs (114) : {
List.cs (115) : return default(T);
List.cs (116) : }
List.cs (118) : ListNode<T> node = First;
List.cs (119) : T removedVariable = default(T);
List.cs (122) : //Si se quiere eleminar el primer nodo
List.cs (123) : if (index == 0)
List.cs (124) : {
List.cs (125) : // Y es el unico
List.cs (126) : if (First == Last)
List.cs (127) : {
List.cs (128) : removedVariable = node.Value;
List.cs (129) : First = null;
List.cs (130) : Last = null;
List.cs (131) : m_numItems--;
List.cs (132) : return removedVariable;
List.cs (133) : }
List.cs (134) : //No es el Unico
List.cs (135) : removedVariable = node.Value;
List.cs (136) : First = node.Next;
List.cs (137) : m_numItems--;
List.cs (138) : return removedVariable;
List.cs (139) : }
List.cs (140) : //Si se quiere eleminar el ultimo nodo
List.cs (141) : if (index == m_numItems - 1)
List.cs (142) : {
List.cs (143) : /*
List.cs (144) : for (int i = 0; i < m_numItems; i++)
List.cs (145) : {
List.cs (146) : if (node.Next.Next == null)
List.cs (147) : {
List.cs (148) : removedVariable = node.Next.Value;
List.cs (149) : Last = node;
List.cs (150) : m_numItems--;
List.cs (151) : return removedVariable;
List.cs (152) : }
List.cs (153) : node = node.Next;
List.cs (154) : }
List.cs (155) : */
List.cs (157) : removedVariable = Last.Value;
List.cs (158) : Last = Last.Previous;
List.cs (159) : m_numItems--;
List.cs (160) : return removedVariable;
List.cs (161) : }
List.cs (164) : //Si eleminamos una que no es no la primera ni la ultima
List.cs (166) : /*for (int i = 0; i < m_numItems; i++)
List.cs (167) : {
List.cs (169) : if (i == index - 1)
List.cs (170) : {
List.cs (171) : removedVariable = node.Next.Value;
List.cs (172) : node.Next = node.Next.Next;
List.cs (173) : m_numItems--;
List.cs (174) : return removedVariable;
List.cs (175) : }
List.cs (176) : }
List.cs (178) : */
List.cs (179) : if(index != m_numItems - 1 && index != 0)
List.cs (180) : {
List.cs (181) : for(int i = 0; i<m_numItems;i++)
List.cs (182) : {
List.cs (184) : if (i == index - 1)
List.cs (185) : {
List.cs (186) : removedVariable = node.Next.Value;
List.cs (187) : node.Next = node.Next.Next;
List.cs (188) : node.Next.Previous = node.Next.Previous.Previous;
List.cs (189) : m_numItems--;
List.cs (190) : return removedVariable;
List.cs (191) : }
List.cs (192) : }
List.cs (193) : }
List.cs (196) : return default(T);
List.cs (198) : /*
List.cs (200) : int i = 0;
List.cs (201) : while (node != null && i < index - 1)
List.cs (202) : {
List.cs (203) : node = node.Next;
List.cs (204) : i++;
List.cs (205) : }
List.cs (207) : if (node == null || node.Next == null)
List.cs (208) : {
List.cs (210) : }
List.cs (212) : removedVariable = node.Next.Value;
List.cs (213) : node.Next = node.Next.Next;
List.cs (214) : if (node.Next == null) Last = node;
List.cs (215) : m_numItems--;
List.cs (216) : return removedVariable;
List.cs (217) : */
List.cs (223) : m_numItems = 0;
List.cs (224) : First = null;
List.cs (225) : Last = null;
List.cs (232) : ListNode<T> node = First;
List.cs (233) : while (node != null)
List.cs (234) : {
List.cs (235) : yield return node.Value;
List.cs (236) : node = node.Next;
List.cs (237) : }
List.cs (241) : public int getLastIndex()
List.cs (242) : {
List.cs (243) : return m_numItems - 1;
List.cs (244) : }
Queue.cs (1) : using System;
Queue.cs (8) : //arraylist
Queue.cs (9) : ArrayList<T> values = new ArrayList<T>();
Queue.cs (15) : return values.ToString();
Queue.cs (21) : return values.Count();
Queue.cs (27) : values.Clear();
Queue.cs (32) : //add value at the top of the queue
Queue.cs (33) : values.Add(value);
Queue.cs (38) : //remove value at the bottom of the queue
Queue.cs (40) : return values.Remove(0);
Stack.cs (2) : using System.Linq;
Stack.cs (3) : using System.Runtime.InteropServices;
Stack.cs (9) : //List
Stack.cs (10) : List<T> values = new List<T>();
Stack.cs (16) : return values.ToString();
Stack.cs (23) : //Counts the numElements of the Stack
Stack.cs (24) : return values.Count();
Stack.cs (29) : //Crears all the elements on the stack
Stack.cs (30) : values.Clear();
Stack.cs (36) : //Add value to the top of the stack
Stack.cs (37) : values.Add(value);
Stack.cs (45) : //Remove the top node of the stack
Stack.cs (46) : return values.Remove(values.getLastIndex());
