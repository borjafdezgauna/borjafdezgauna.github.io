IntArrayList.cs (3) : using System.Runtime.ExceptionServices;
IntArrayList.cs (37) : return NumElements;
IntArrayList.cs (46) : if (index >= 0 && index < NumElements)
IntArrayList.cs (47) : {
IntArrayList.cs (48) : return Values[index];
IntArrayList.cs (49) : }
IntArrayList.cs (50) : else
IntArrayList.cs (51) : {
IntArrayList.cs (53) : }
IntArrayList.cs (61) : if (NumElements == Values.Length)
IntArrayList.cs (62) : {
IntArrayList.cs (63) : Resize(Values.Length * 2);
IntArrayList.cs (64) : }
IntArrayList.cs (66) : for (int i = 0; i < Values.Length; i++)
IntArrayList.cs (67) : {
IntArrayList.cs (68) : if (Values[i] == 0)
IntArrayList.cs (69) : {
IntArrayList.cs (70) : Values[i] = value;
IntArrayList.cs (71) : NumElements++;
IntArrayList.cs (72) : break;
IntArrayList.cs (73) : }
IntArrayList.cs (74) : }
IntArrayList.cs (83) : if (index >= 0 && index < Count())
IntArrayList.cs (84) : {
IntArrayList.cs (85) : int removesValue = Values[index];
IntArrayList.cs (87) : for (int i = index; i < Count() - 1; i++)
IntArrayList.cs (88) : {
IntArrayList.cs (89) : Values[i] = Values[i + 1];
IntArrayList.cs (90) : }
IntArrayList.cs (92) : NumElements--;
IntArrayList.cs (93) : return removesValue;
IntArrayList.cs (94) : }
IntArrayList.cs (96) : return -1;
IntArrayList.cs (104) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (105) : {
IntArrayList.cs (106) : Values[i] = 0;
IntArrayList.cs (107) : }
IntArrayList.cs (108) : NumElements = 0;
IntArrayList.cs (114) : if (newSize > Values.Length)
IntArrayList.cs (115) : {
IntArrayList.cs (116) : int[] newArray = new int[newSize];
IntArrayList.cs (117) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (118) : {
IntArrayList.cs (119) : newArray[i] = Values[i];
IntArrayList.cs (120) : }
IntArrayList.cs (121) : Values = newArray;
IntArrayList.cs (122) : }
IntArrayList.cs (129) : for (int i = 0; i < Count(); i++)
IntArrayList.cs (130) : {
IntArrayList.cs (131) : yield return Values[i];
IntArrayList.cs (132) : }
IntList.cs (45) : while (node != null)
IntList.cs (46) : {
IntList.cs (63) : if (Count() < index)
IntList.cs (65) : return 0;
IntList.cs (67) : else
IntList.cs (68) : {
IntList.cs (69) : for (int i = 0; i <= index; i++)
IntList.cs (70) : {
IntList.cs (71) : if (i != index)
IntList.cs (72) : {
IntList.cs (75) : else
IntList.cs (77) : element = node.Value;
IntList.cs (78) : }
IntList.cs (81) : }
IntList.cs (91) : if (First == null)
IntList.cs (92) : {
IntList.cs (93) : First = node;
IntList.cs (94) : }
IntList.cs (95) : else
IntList.cs (96) : {
IntList.cs (97) : while (ultimo.Next != null)
IntList.cs (99) : ultimo = ultimo.Next;
IntList.cs (104) : }
IntList.cs (114) : if (index < 0 || Count() < index || First == null)
IntList.cs (116) : return -1;
IntList.cs (118) : else if (index == 0)
IntList.cs (119) : {
IntList.cs (120) : int removedValue = First.Value;
IntList.cs (121) : First = First.Next;
IntList.cs (122) : return removedValue;
IntList.cs (123) : }
IntList.cs (124) : else
IntList.cs (125) : {
IntList.cs (126) : int currentIndex = 0;
IntList.cs (127) : while (node != null && currentIndex < index - 1)
IntList.cs (128) : {
IntList.cs (129) : node = node.Next;
IntList.cs (130) : currentIndex++;
IntList.cs (133) : if (node == null || node.Next == null)
IntList.cs (135) : return -1;
IntList.cs (138) : int removedValue = node.Next.Value;
IntList.cs (139) : node.Next = node.Next.Next;
IntList.cs (141) : return removedValue;
IntList.cs (142) : }
IntList.cs (151) : First = null;
IntList.cs (158) : IntListNode node = First;
IntList.cs (160) : while (node != null)
IntList.cs (161) : {
IntList.cs (162) : yield return node.Value;
IntList.cs (163) : node = node.Next;
IntList.cs (164) : }
ArrayList.cs (33) : return NumElements;
ArrayList.cs (41) : if (index >= Count() || index < 0)
ArrayList.cs (42) : {
ArrayList.cs (44) : }
ArrayList.cs (45) : else
ArrayList.cs (46) : {
ArrayList.cs (47) : return Values[index];
ArrayList.cs (49) : }
ArrayList.cs (59) : if (NumElements < Values.Length)
ArrayList.cs (60) : {
ArrayList.cs (61) : Values[NumElements] = value;
ArrayList.cs (62) : NumElements++;
ArrayList.cs (63) : }
ArrayList.cs (64) : else if (NumElements == Values.Length)
ArrayList.cs (65) : {
ArrayList.cs (66) : Resize(Values.Length * 2);
ArrayList.cs (67) : Add(value);
ArrayList.cs (68) : }
ArrayList.cs (77) : T removedItem;
ArrayList.cs (79) : if (index < 0 || index >= Count())
ArrayList.cs (80) : {
ArrayList.cs (82) : }
ArrayList.cs (83) : else
ArrayList.cs (84) : {
ArrayList.cs (85) : removedItem = Values[index];
ArrayList.cs (86) : for (int i = index; i < NumElements - 1; i++)
ArrayList.cs (87) : {
ArrayList.cs (88) : Values[i] = Values[i + 1];
ArrayList.cs (89) : }
ArrayList.cs (91) : NumElements--;
ArrayList.cs (92) : return removedItem;
ArrayList.cs (94) : }
ArrayList.cs (100) : NumElements = 0;
ArrayList.cs (108) : T[] newArray = new T[newSize];
ArrayList.cs (110) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (111) : {
ArrayList.cs (112) : newArray[i] = Values[i];
ArrayList.cs (113) : }
ArrayList.cs (114) : Values = newArray;
ArrayList.cs (120) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (121) : {
ArrayList.cs (122) : yield return Values[i];
ArrayList.cs (123) : }
List.cs (2) : using System;
List.cs (47) : return m_numItems;
List.cs (53) : ListNode<T> node = First;
List.cs (54) : int aux = 0;
List.cs (56) : if (Count() < index)
List.cs (57) : {
List.cs (58) : return default;
List.cs (59) : }
List.cs (60) : else
List.cs (61) : {
List.cs (62) : while (aux < index)
List.cs (63) : {
List.cs (64) : node = node.Next;
List.cs (65) : aux++;
List.cs (66) : }
List.cs (67) : return node.Value;
List.cs (68) : }
List.cs (75) : if (First == null)
List.cs (76) : {
List.cs (77) : First = new ListNode<T>(value);
List.cs (78) : Last = First;
List.cs (79) : m_numItems++;
List.cs (80) : }
List.cs (81) : else
List.cs (82) : {
List.cs (83) : Last.Next = new ListNode<T>(value);
List.cs (84) : Last = Last.Next;
List.cs (85) : m_numItems++;
List.cs (86) : }
List.cs (92) : ListNode<T> node = First;
List.cs (93) : T removedValue = default(T);
List.cs (95) : if (index < 0 || index >= Count() || First == null)
List.cs (96) : {
List.cs (97) : return default;
List.cs (98) : }
List.cs (99) : else if (index == 0)
List.cs (100) : {
List.cs (101) : removedValue = First.Value;
List.cs (102) : First = First.Next;
List.cs (103) : m_numItems--;
List.cs (105) : if (Count() == 0)
List.cs (106) : {
List.cs (107) : Last = null;
List.cs (108) : }
List.cs (110) : return removedValue;
List.cs (111) : }
List.cs (112) : else
List.cs (113) : {
List.cs (114) : ListNode<T> anterior = First;
List.cs (115) : for (int i = 0; i < index - 1; i++)
List.cs (116) : {
List.cs (117) : anterior = anterior.Next;
List.cs (118) : }
List.cs (120) : ListNode<T> toRemove = anterior.Next;
List.cs (121) : removedValue = toRemove.Value;
List.cs (122) : anterior.Next = toRemove.Next;
List.cs (124) : if (toRemove == Last)
List.cs (125) : {
List.cs (126) : Last = anterior;
List.cs (127) : }
List.cs (129) : m_numItems--;
List.cs (130) : return removedValue;
List.cs (131) : }
List.cs (138) : while (First != null)
List.cs (139) : {
List.cs (140) : ListNode<T> node = First;
List.cs (141) : First = First.Next;
List.cs (142) : node = null;
List.cs (143) : }
List.cs (144) : m_numItems = 0;
List.cs (151) : if (First == null)
List.cs (152) : {
List.cs (154) : }
List.cs (155) : else
List.cs (156) : {
List.cs (157) : ListNode<T> node = First;
List.cs (159) : while (node != null)
List.cs (160) : {
List.cs (161) : yield return node.Value;
List.cs (162) : node = node.Next;
List.cs (163) : }
List.cs (164) : }
Queue.cs (1) : using System.Collections;
Queue.cs (2) : using System.ComponentModel;
Queue.cs (3) : using System.IO.Compression;
Queue.cs (4) : using System.Runtime.ExceptionServices;
Queue.cs (11) : private List<T> list = new List<T>();
Queue.cs (16) : return list.ToString();
Queue.cs (23) : return list.Count();
Queue.cs (28) : list.Clear();
Queue.cs (33) : list.Add(value);
Queue.cs (39) : if (Count() == 0)
Queue.cs (40) : {
Queue.cs (42) : }
Queue.cs (43) : else
Queue.cs (44) : {
Queue.cs (45) : return list.Remove(0);
Queue.cs (46) : }
Stack.cs (6) : private List<T> list = new List<T>();
Stack.cs (11) : return list.ToString();
Stack.cs (18) : return list.Count();
Stack.cs (23) : list.Clear();
Stack.cs (28) : list.Add(value);
Stack.cs (34) : if (Count() == 0)
Stack.cs (35) : {
Stack.cs (37) : }
Stack.cs (38) : else
Stack.cs (39) : {
Stack.cs (40) : return list.Remove(Count() - 1);
Stack.cs (41) : }
