IntList.cs (62) : if (Count() < index)
IntList.cs (64) : return 0;
IntList.cs (66) : else
IntList.cs (67) : {
IntList.cs (68) : for (int i = 0; i <= index; i++)
IntList.cs (69) : {
IntList.cs (70) : if (i != index)
IntList.cs (71) : {
IntList.cs (74) : else
IntList.cs (76) : element = node.Value;
IntList.cs (77) : }
IntList.cs (80) : }
IntList.cs (90) : if (First == null)
IntList.cs (91) : {
IntList.cs (92) : First = node;
IntList.cs (93) : }
IntList.cs (94) : else
IntList.cs (95) : {
IntList.cs (96) : while (ultimo.Next != null)
IntList.cs (98) : ultimo = ultimo.Next;
IntList.cs (103) : }
IntList.cs (113) : if (index < 0 || Count() < index || First == null)
IntList.cs (115) : return -1;
IntList.cs (117) : else if (index == 0)
IntList.cs (118) : {
IntList.cs (119) : int removedValue = First.Value;
IntList.cs (120) : First = First.Next;
IntList.cs (121) : return removedValue;
IntList.cs (122) : }
IntList.cs (123) : else
IntList.cs (124) : {
IntList.cs (125) : int currentIndex = 0;
IntList.cs (126) : while (node != null && currentIndex < index - 1)
IntList.cs (127) : {
IntList.cs (128) : node = node.Next;
IntList.cs (129) : currentIndex++;
IntList.cs (132) : if (node == null || node.Next == null)
IntList.cs (134) : return -1;
IntList.cs (137) : int removedValue = node.Next.Value;
IntList.cs (138) : node.Next = node.Next.Next;
IntList.cs (140) : return removedValue;
IntList.cs (141) : }
IntList.cs (150) : First = null;
IntList.cs (159) : IntListNode node = First;
IntList.cs (161) : while (node != null)
IntList.cs (162) : {
IntList.cs (163) : yield return node.Value;
IntList.cs (164) : node = node.Next;
IntList.cs (165) : }
