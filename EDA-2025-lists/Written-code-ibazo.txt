IntList.cs (34) : output = output.TrimEnd(',') + $"] {Count()} elements";
IntList.cs (41) : int count = 0;
IntList.cs (42) : IntListNode current = First;
IntList.cs (44) : while (current != null)
IntList.cs (45) : {
IntList.cs (46) : count++;
IntList.cs (47) : current = current.Next;
IntList.cs (48) : }
IntList.cs (50) : return count;
IntList.cs (56) : IntListNode actual = First;
IntList.cs (63) : int i = 0;
IntList.cs (65) : while (i < index && actual != null)
IntList.cs (66) : {
IntList.cs (67) : i++;
IntList.cs (68) : actual = actual.Next;
IntList.cs (69) : }
IntList.cs (71) : return actual.Value;
IntList.cs (78) : IntListNode actual = First;
IntList.cs (80) : if (First == null)
IntList.cs (81) : {
IntList.cs (82) : First = new IntListNode(value);
IntList.cs (83) : return;
IntList.cs (84) : }
IntList.cs (86) : while (actual.Next != null)
IntList.cs (87) : {
IntList.cs (88) : actual = actual.Next;
IntList.cs (89) : }
IntList.cs (91) : actual.Next = new IntListNode(value);
IntList.cs (99) : if (index < 0 || First == null)
IntList.cs (102) : if (index == 0)
IntList.cs (103) : {
IntList.cs (104) : int value = First.Value;
IntList.cs (105) : First = First.Next;
IntList.cs (106) : return value;
IntList.cs (107) : }
IntList.cs (109) : IntListNode current = First;
IntList.cs (110) : for (int i = 0; i < index - 1 && current.Next != null; i++)
IntList.cs (111) : {
IntList.cs (112) : current = current.Next;
IntList.cs (113) : }
IntList.cs (115) : if (current.Next == null)
IntList.cs (116) : return -1;
IntList.cs (118) : int removedValue = current.Next.Value;
IntList.cs (119) : current.Next = current.Next.Next;
IntList.cs (120) : return removedValue;
IntList.cs (126) : First = null;
IntList.cs (133) : IntListNode actual = First;
IntList.cs (136) : {
IntList.cs (137) : yield return actual.Value;
IntList.cs (138) : actual = actual.Next;
IntList.cs (139) : }
