IntList.cs (32) : output = output.TrimEnd(',') + $"] {Count()} elements";
IntList.cs (38) : int count = 0;
IntList.cs (39) : IntListNode current = First;
IntList.cs (41) : while (current != null)
IntList.cs (42) : {
IntList.cs (43) : count++;
IntList.cs (44) : current = current.Next;
IntList.cs (45) : }
IntList.cs (47) : return count;
IntList.cs (52) : if (index < 0)
IntList.cs (53) : return 0;
IntList.cs (55) : IntListNode current = First;
IntList.cs (56) : int i = 0;
IntList.cs (58) : while (current != null)
IntList.cs (59) : {
IntList.cs (60) : if (i == index)
IntList.cs (61) : return current.Value;
IntList.cs (62) : current = current.Next;
IntList.cs (63) : i++;
IntList.cs (64) : }
IntList.cs (66) : return 0;
IntList.cs (69) : <<<<<<< HEAD
IntList.cs (70) : =======
IntList.cs (72) : >>>>>>> refs/remotes/origin/master
IntList.cs (75) : IntListNode newNode = new IntListNode(value);
IntList.cs (77) : if (First == null)
IntList.cs (78) : {
IntList.cs (79) : First = newNode;
IntList.cs (80) : return;
IntList.cs (81) : }
IntList.cs (83) : IntListNode current = First;
IntList.cs (84) : while (current.Next != null)
IntList.cs (85) : {
IntList.cs (86) : current = current.Next;
IntList.cs (87) : }
IntList.cs (89) : current.Next = newNode;
IntList.cs (94) : if (index < 0 || First == null)
IntList.cs (95) : return -1;
IntList.cs (97) : <<<<<<< HEAD
IntList.cs (98) : if (index == 0)
IntList.cs (99) : {
IntList.cs (100) : int value = First.Value;
IntList.cs (101) : First = First.Next;
IntList.cs (102) : return value;
IntList.cs (103) : }
IntList.cs (105) : IntListNode current = First;
IntList.cs (106) : for (int i = 0; i < index - 1 && current.Next != null; i++)
IntList.cs (107) : =======
IntList.cs (108) : while (i < (index - 1) && actual.Next != null)
IntList.cs (109) : >>>>>>> refs/remotes/origin/master
IntList.cs (110) : {
IntList.cs (111) : current = current.Next;
IntList.cs (112) : }
IntList.cs (113) : <<<<<<< HEAD
IntList.cs (115) : if (current.Next == null)
IntList.cs (116) : return -1;
IntList.cs (118) : int removedValue = current.Next.Value;
IntList.cs (119) : current.Next = current.Next.Next;
IntList.cs (120) : return removedValue;
IntList.cs (121) : =======
IntList.cs (122) : ret_value = actual.Next.Value;
IntList.cs (123) : actual.Next = null;
IntList.cs (126) : >>>>>>> refs/remotes/origin/master
IntList.cs (131) : First = null;
IntList.cs (136) : IntListNode current = First;
IntList.cs (137) : while (current != null)
IntList.cs (138) : {
IntList.cs (139) : yield return current.Value;
IntList.cs (140) : current = current.Next;
IntList.cs (141) : }
