IntArrayList.cs (35) : return NumElements;
IntArrayList.cs (44) : if (index >= 0 && index < NumElements)
IntArrayList.cs (45) : {
IntArrayList.cs (46) : return Values[index];
IntArrayList.cs (47) : }
IntArrayList.cs (57) : if (NumElements < Values.Length)
IntArrayList.cs (58) : {
IntArrayList.cs (59) : Values[NumElements] = value;
IntArrayList.cs (60) : NumElements++;
IntArrayList.cs (61) : }
IntArrayList.cs (62) : else
IntArrayList.cs (63) : {
IntArrayList.cs (64) : Resize(Values.Length * 2);
IntArrayList.cs (65) : Values[NumElements] = value;
IntArrayList.cs (66) : NumElements++;
IntArrayList.cs (68) : }
IntArrayList.cs (76) : if (index < 0 && index >= NumElements)
IntArrayList.cs (77) : {
IntArrayList.cs (79) : }
IntArrayList.cs (80) : int eliminado = Values[index];
IntArrayList.cs (81) : for (int i = index; i < Values.Length - 1; i++)
IntArrayList.cs (82) : {
IntArrayList.cs (83) : Values[i] = Values[i + 1];
IntArrayList.cs (86) : NumElements--;
IntArrayList.cs (87) : return eliminado;
IntArrayList.cs (88) : }
IntArrayList.cs (96) : for (int i = 0; i < Values.Length - 1; i++)
IntArrayList.cs (97) : {
IntArrayList.cs (98) : Values[i] = 0;
IntArrayList.cs (100) : }
IntArrayList.cs (101) : NumElements = 0;
IntArrayList.cs (108) : int[] array = new int[newSize];
IntArrayList.cs (109) : for (int i = 0; i < Values.Length-1; i++)
IntArrayList.cs (110) : {
IntArrayList.cs (111) : array[i] = Values[i];
IntArrayList.cs (112) : }
IntArrayList.cs (113) : Values = array;
IntArrayList.cs (121) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (122) : {
IntArrayList.cs (123) : yield return Values[i];
IntArrayList.cs (124) : }
IntList.cs (3) : using System.Xml;
IntList.cs (43) : IntListNode node = First;
IntList.cs (44) : int i = 0;
IntList.cs (45) : while (node != null)
IntList.cs (46) : {
IntList.cs (48) : node = node.Next;
IntList.cs (49) : i++;
IntList.cs (50) : }
IntList.cs (51) : return i;
IntList.cs (59) : IntListNode node = First;
IntList.cs (60) : int i = 0;
IntList.cs (61) : if (index < 0)
IntList.cs (62) : {
IntList.cs (63) : return 0;
IntList.cs (64) : }
IntList.cs (65) : while (node != null && index > i)
IntList.cs (66) : {
IntList.cs (67) : node = node.Next;
IntList.cs (68) : i++;
IntList.cs (69) : }
IntList.cs (70) : if (index == i)
IntList.cs (71) : {
IntList.cs (72) : return node.Value;
IntList.cs (73) : }
IntList.cs (83) : IntListNode node = First;
IntList.cs (84) : if (node == null)
IntList.cs (85) : {
IntList.cs (86) : First = new IntListNode(value);
IntList.cs (87) : }
IntList.cs (88) : else
IntList.cs (89) : {
IntList.cs (90) : while (node.Next != null)
IntList.cs (91) : {
IntList.cs (92) : node = node.Next;
IntList.cs (93) : }
IntList.cs (94) : node.Next = new IntListNode(value);
IntList.cs (95) : }
IntList.cs (104) : IntListNode node = First;
IntList.cs (105) : int eliminado = -1;
IntList.cs (106) : if (node == null)
IntList.cs (107) : {
IntList.cs (108) : return eliminado;
IntList.cs (109) : }
IntList.cs (111) : if (index == 0)
IntList.cs (112) : {
IntList.cs (113) : eliminado = First.Value;
IntList.cs (114) : First = node.Next;
IntList.cs (115) : return eliminado;
IntList.cs (117) : }
IntList.cs (118) : int i = 0;
IntList.cs (119) : while (node != null && index-1> i)
IntList.cs (120) : {
IntList.cs (121) : node = node.Next;
IntList.cs (122) : i++;
IntList.cs (124) : }
IntList.cs (125) : if (node != null && node.Next != null)
IntList.cs (126) : {
IntList.cs (127) : eliminado = node.Next.Value;
IntList.cs (128) : node.Next = node.Next.Next;
IntList.cs (129) : }
IntList.cs (130) : return eliminado;
IntList.cs (139) : First = null;
IntList.cs (145) : IntListNode node = First;
IntList.cs (146) : while (node != null)
IntList.cs (147) : {
IntList.cs (148) : yield return node.Value;
IntList.cs (149) : node = node.Next;
IntList.cs (150) : }
ArrayList.cs (9) : int FirstIndex=-1;
ArrayList.cs (10) : int LastIndex=-1;
ArrayList.cs (36) : return NumElements;
ArrayList.cs (44) : if (index >= 0 && index < NumElements)
ArrayList.cs (45) : {
ArrayList.cs (46) : return Values[index];
ArrayList.cs (47) : }
ArrayList.cs (49) : return default;
ArrayList.cs (57) : if (NumElements < Values.Length)
ArrayList.cs (58) : {
ArrayList.cs (59) : Values[NumElements] = value;
ArrayList.cs (60) : NumElements++;
ArrayList.cs (62) : }
ArrayList.cs (63) : else
ArrayList.cs (64) : {
ArrayList.cs (65) : Resize(Values.Length * 2);
ArrayList.cs (66) : Values[NumElements] = value;
ArrayList.cs (67) : NumElements++;
ArrayList.cs (69) : }
ArrayList.cs (71) : LastIndex++;
ArrayList.cs (72) : if (FirstIndex == -1)
ArrayList.cs (73) : {
ArrayList.cs (74) : FirstIndex++;
ArrayList.cs (75) : }
ArrayList.cs (85) : T eliminado = default;
ArrayList.cs (86) : if (index < 0 && index >= NumElements)
ArrayList.cs (87) : {
ArrayList.cs (88) : return default;
ArrayList.cs (89) : }
ArrayList.cs (90) : if (index == FirstIndex)
ArrayList.cs (91) : {
ArrayList.cs (92) : FirstIndex++;
ArrayList.cs (93) : eliminado = Values[index];
ArrayList.cs (94) : NumElements--;
ArrayList.cs (95) : }
ArrayList.cs (96) : else
ArrayList.cs (97) : {
ArrayList.cs (98) : eliminado = Values[index];
ArrayList.cs (99) : for (int i = index; i < Values.Length - 1; i++)
ArrayList.cs (100) : {
ArrayList.cs (101) : Values[i] = Values[i + 1];
ArrayList.cs (103) : }
ArrayList.cs (104) : NumElements--;
ArrayList.cs (105) : LastIndex--;
ArrayList.cs (106) : }
ArrayList.cs (107) : return eliminado;
ArrayList.cs (114) : for (int i = 0; i < Values.Length - 1; i++)
ArrayList.cs (115) : {
ArrayList.cs (116) : Values[i] = default;
ArrayList.cs (119) : NumElements = 0;
ArrayList.cs (120) : }
ArrayList.cs (126) : T[] array = new T[newSize];
ArrayList.cs (127) : for (int i = 0; i < Values.Length-1; i++)
ArrayList.cs (128) : {
ArrayList.cs (129) : array[i] = Values[i];
ArrayList.cs (130) : }
ArrayList.cs (131) : Values = array;
ArrayList.cs (137) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (138) : {
ArrayList.cs (139) : yield return Values[i];
ArrayList.cs (140) : }
List.cs (47) : return m_numItems;
List.cs (55) : ListNode<T> node = First;
List.cs (56) : int i = 0;
List.cs (57) : if (index < 0)
List.cs (58) : {
List.cs (59) : return default;
List.cs (60) : }
List.cs (61) : while (node != null && index > i)
List.cs (62) : {
List.cs (63) : node = node.Next;
List.cs (64) : i++;
List.cs (65) : }
List.cs (66) : if (index == i)
List.cs (67) : {
List.cs (68) : return node.Value;
List.cs (69) : }
List.cs (71) : return default;
List.cs (79) : ListNode<T> node = First;
List.cs (80) : if (node == null)
List.cs (81) : {
List.cs (82) : First = new ListNode<T>(value);
List.cs (83) : Last = First;
List.cs (84) : m_numItems++;
List.cs (85) : }
List.cs (86) : else
List.cs (87) : {
List.cs (88) : node = Last;
List.cs (89) : node.Next = new ListNode<T>(value);
List.cs (90) : Last = node.Next;
List.cs (91) : m_numItems++;
List.cs (92) : }
List.cs (99) : ListNode<T> node = First;
List.cs (100) : T eliminado = default;
List.cs (101) : if (node == null)
List.cs (102) : {
List.cs (103) : return eliminado;
List.cs (104) : }
List.cs (106) : if (index == 0)
List.cs (107) : {
List.cs (108) : eliminado = First.Value;
List.cs (109) : First = node.Next;
List.cs (110) : m_numItems--;
List.cs (111) : return eliminado;
List.cs (114) : }
List.cs (115) : int i = 0;
List.cs (116) : while (node != null && index - 1 > i)
List.cs (117) : {
List.cs (118) : node = node.Next;
List.cs (119) : i++;
List.cs (122) : }
List.cs (123) : if (node != null && node.Next != null)
List.cs (124) : {
List.cs (125) : eliminado = node.Next.Value;
List.cs (126) : node.Next = node.Next.Next;
List.cs (127) : m_numItems--;
List.cs (128) : }
List.cs (129) : return eliminado;
List.cs (138) : First = null;
List.cs (139) : m_numItems = 0;
List.cs (147) : ListNode<T> node = First;
List.cs (148) : while (node != null)
List.cs (149) : {
List.cs (150) : yield return node.Value;
List.cs (151) : node = node.Next;
List.cs (152) : }
