IntArrayList.cs (35) : return NumElements;
IntArrayList.cs (44) : if (index >= 0 && index < NumElements)
IntArrayList.cs (45) : {
IntArrayList.cs (46) : return Values[index];
IntArrayList.cs (47) : }
IntArrayList.cs (57) : if (NumElements < Values.Length)
IntArrayList.cs (58) : {
IntArrayList.cs (59) : Values[NumElements] = value;
IntArrayList.cs (60) : NumElements++;
IntArrayList.cs (61) : }
IntArrayList.cs (62) : else
IntArrayList.cs (63) : {
IntArrayList.cs (64) : Resize(Values.Length * 2);
IntArrayList.cs (65) : Values[NumElements] = value;
IntArrayList.cs (66) : NumElements++;
IntArrayList.cs (68) : }
IntArrayList.cs (76) : if (index < 0 && index >= NumElements)
IntArrayList.cs (77) : {
IntArrayList.cs (79) : }
IntArrayList.cs (80) : int eliminado = Values[index];
IntArrayList.cs (81) : for (int i = index; i < Values.Length - 1; i++)
IntArrayList.cs (82) : {
IntArrayList.cs (83) : Values[i] = Values[i + 1];
IntArrayList.cs (86) : NumElements--;
IntArrayList.cs (87) : return eliminado;
IntArrayList.cs (88) : }
IntArrayList.cs (96) : for (int i = 0; i < Values.Length - 1; i++)
IntArrayList.cs (97) : {
IntArrayList.cs (98) : Values[i] = 0;
IntArrayList.cs (100) : }
IntArrayList.cs (101) : NumElements = 0;
IntArrayList.cs (108) : int[] array = new int[newSize];
IntArrayList.cs (109) : for (int i = 0; i < Values.Length-1; i++)
IntArrayList.cs (110) : {
IntArrayList.cs (111) : array[i] = Values[i];
IntArrayList.cs (112) : }
IntArrayList.cs (113) : Values = array;
IntArrayList.cs (121) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (122) : {
IntArrayList.cs (123) : yield return Values[i];
IntArrayList.cs (124) : }
IntList.cs (3) : using System.Xml;
IntList.cs (43) : IntListNode node = First;
IntList.cs (44) : int i = 0;
IntList.cs (45) : while (node != null)
IntList.cs (46) : {
IntList.cs (48) : node = node.Next;
IntList.cs (49) : i++;
IntList.cs (50) : }
IntList.cs (51) : return i;
IntList.cs (59) : IntListNode node = First;
IntList.cs (60) : int i = 0;
IntList.cs (61) : if (index < 0)
IntList.cs (62) : {
IntList.cs (63) : return 0;
IntList.cs (64) : }
IntList.cs (65) : while (node != null && index > i)
IntList.cs (66) : {
IntList.cs (67) : node = node.Next;
IntList.cs (68) : i++;
IntList.cs (69) : }
IntList.cs (70) : if (index == i)
IntList.cs (71) : {
IntList.cs (72) : return node.Value;
IntList.cs (73) : }
IntList.cs (83) : IntListNode node = First;
IntList.cs (84) : if (node == null)
IntList.cs (85) : {
IntList.cs (86) : First = new IntListNode(value);
IntList.cs (87) : }
IntList.cs (88) : else
IntList.cs (89) : {
IntList.cs (90) : while (node.Next != null)
IntList.cs (91) : {
IntList.cs (92) : node = node.Next;
IntList.cs (93) : }
IntList.cs (94) : node.Next = new IntListNode(value);
IntList.cs (95) : }
IntList.cs (104) : IntListNode node = First;
IntList.cs (105) : int eliminado = -1;
IntList.cs (106) : if (node == null)
IntList.cs (107) : {
IntList.cs (108) : return eliminado;
IntList.cs (109) : }
IntList.cs (111) : if (index == 0)
IntList.cs (112) : {
IntList.cs (113) : eliminado = First.Value;
IntList.cs (114) : First = node.Next;
IntList.cs (115) : return eliminado;
IntList.cs (117) : }
IntList.cs (118) : int i = 0;
IntList.cs (119) : while (node != null && index-1> i)
IntList.cs (120) : {
IntList.cs (121) : node = node.Next;
IntList.cs (122) : i++;
IntList.cs (124) : }
IntList.cs (125) : if (node != null && node.Next != null)
IntList.cs (126) : {
IntList.cs (127) : eliminado = node.Next.Value;
IntList.cs (128) : node.Next = node.Next.Next;
IntList.cs (129) : }
IntList.cs (130) : return eliminado;
IntList.cs (139) : First = null;
IntList.cs (145) : IntListNode node = First;
IntList.cs (146) : while (node != null)
IntList.cs (147) : {
IntList.cs (148) : yield return node.Value;
IntList.cs (149) : node = node.Next;
IntList.cs (150) : }
ArrayList.cs (9) : int FirstIndex=0;
ArrayList.cs (10) : int LastIndex=0;
ArrayList.cs (36) : return NumElements;
ArrayList.cs (44) : if (index >= 0 && index < NumElements)
ArrayList.cs (45) : {
ArrayList.cs (46) : return Values[index];
ArrayList.cs (47) : }
ArrayList.cs (49) : return default;
ArrayList.cs (57) : if (NumElements < Values.Length)
ArrayList.cs (58) : {
ArrayList.cs (59) : Values[NumElements] = value;
ArrayList.cs (62) : }
ArrayList.cs (63) : else
ArrayList.cs (64) : {
ArrayList.cs (65) : Resize(Values.Length * 2);
ArrayList.cs (66) : Values[NumElements] = value;
ArrayList.cs (69) : }
ArrayList.cs (71) : NumElements++;
ArrayList.cs (72) : LastIndex=(FirstIndex+NumElements-1)%Values.Length;
ArrayList.cs (83) : T eliminado = default;
ArrayList.cs (84) : if (index < 0 || index >= NumElements)
ArrayList.cs (85) : {
ArrayList.cs (86) : return default;
ArrayList.cs (87) : }
ArrayList.cs (88) : if (index == 0 && FirstIndex!=-1)
ArrayList.cs (89) : {
ArrayList.cs (91) : FirstIndex++;
ArrayList.cs (92) : eliminado = Values[index];
ArrayList.cs (93) : NumElements--;
ArrayList.cs (94) : }
ArrayList.cs (95) : else
ArrayList.cs (96) : {
ArrayList.cs (97) : eliminado = Values[index];
ArrayList.cs (98) : for (int i = index; i < Values.Length - 1; i++)
ArrayList.cs (99) : {
ArrayList.cs (100) : Values[i] = Values[i + 1];
ArrayList.cs (102) : }
ArrayList.cs (103) : Values[NumElements - 1] = default;
ArrayList.cs (104) : NumElements--;
ArrayList.cs (105) : LastIndex--;
ArrayList.cs (106) : }
ArrayList.cs (108) : if (NumElements == 0)
ArrayList.cs (109) : {
ArrayList.cs (110) : FirstIndex = 0;
ArrayList.cs (111) : LastIndex = 0;
ArrayList.cs (112) : }
ArrayList.cs (114) : return eliminado;
ArrayList.cs (121) : for (int i = 0; i < Values.Length-1; i++)
ArrayList.cs (122) : {
ArrayList.cs (123) : Values[i] = default;
ArrayList.cs (128) : NumElements = 0;
ArrayList.cs (129) : FirstIndex = -1;
ArrayList.cs (130) : LastIndex = -1;
ArrayList.cs (132) : }
ArrayList.cs (138) : T[] array = new T[newSize];
ArrayList.cs (139) : for (int i = 0; i < Values.Length-1; i++)
ArrayList.cs (140) : {
ArrayList.cs (141) : array[i] = Values[i];
ArrayList.cs (142) : }
ArrayList.cs (143) : Values = array;
ArrayList.cs (149) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (150) : {
ArrayList.cs (151) : yield return Values[i];
ArrayList.cs (152) : }
List.cs (2) : using System;
List.cs (10) : public ListNode<T> Previous = null;
List.cs (50) : return m_numItems;
List.cs (58) : ListNode<T> node = First;
List.cs (59) : int i = 0;
List.cs (60) : if (index < 0)
List.cs (61) : {
List.cs (62) : return default;
List.cs (63) : }
List.cs (64) : while (node != null && index > i)
List.cs (65) : {
List.cs (66) : node = node.Next;
List.cs (67) : i++;
List.cs (68) : }
List.cs (69) : if (index == i)
List.cs (70) : {
List.cs (71) : return node.Value;
List.cs (72) : }
List.cs (74) : return default;
List.cs (82) : ListNode<T> node = First;
List.cs (83) : if (node == null)
List.cs (84) : {
List.cs (85) : First = new ListNode<T>(value);
List.cs (86) : Last = First;
List.cs (87) : m_numItems++;
List.cs (88) : }
List.cs (89) : else
List.cs (90) : {
List.cs (91) : node = Last;
List.cs (92) : node.Next = new ListNode<T>(value);
List.cs (93) : ListNode<T> anterior = Last;
List.cs (94) : Last = node.Next;
List.cs (95) : Last.Previous = anterior;
List.cs (96) : m_numItems++;
List.cs (97) : }
List.cs (104) : ListNode<T> node = First;
List.cs (105) : T eliminado = default;
List.cs (106) : if (node == null)
List.cs (107) : {
List.cs (108) : return eliminado;
List.cs (109) : }
List.cs (111) : if (index == 0)
List.cs (112) : {
List.cs (113) : eliminado = First.Value;
List.cs (114) : First = First.Next;
List.cs (115) : m_numItems--;
List.cs (116) : if (First != null)
List.cs (117) : {
List.cs (118) : First.Previous = null;
List.cs (119) : }
List.cs (120) : return eliminado;
List.cs (123) : }
List.cs (124) : int i = 0;
List.cs (125) : if (index == m_numItems - 1)
List.cs (126) : {
List.cs (127) : Last.Previous.Next = null;
List.cs (128) : eliminado = Last.Value;
List.cs (129) : Last = Last.Previous;
List.cs (130) : m_numItems--;
List.cs (131) : }
List.cs (133) : else
List.cs (134) : {
List.cs (135) : while (node != null && index - 1 > i)
List.cs (136) : {
List.cs (137) : node = node.Next;
List.cs (138) : i++;
List.cs (141) : }
List.cs (143) : if (node != null && node.Next != null && node.Next.Next != null)
List.cs (144) : {
List.cs (145) : eliminado = node.Next.Value;
List.cs (146) : node.Next = node.Next.Next;
List.cs (147) : m_numItems--;
List.cs (148) : node.Next.Previous = node;
List.cs (149) : }
List.cs (152) : }
List.cs (153) : return eliminado;
List.cs (160) : First = null;
List.cs (161) : m_numItems = 0;
List.cs (169) : ListNode<T> node = First;
List.cs (170) : while (node != null)
List.cs (171) : {
List.cs (172) : yield return node.Value;
List.cs (173) : node = node.Next;
List.cs (174) : }
Queue.cs (6) : List<T> lista = new List<T>();
Queue.cs (7) : int NumElements = 0;
Queue.cs (12) : return lista.ToString();
Queue.cs (19) : return NumElements;
Queue.cs (25) : lista.Clear();
Queue.cs (26) : NumElements = 0;
Queue.cs (31) : lista.Add(value);
Queue.cs (32) : NumElements++;
Queue.cs (37) : T value= lista.Get(0);
Queue.cs (38) : lista.Remove(0);
Queue.cs (39) : NumElements--;
Queue.cs (41) : return value;
Stack.cs (6) : int NumElements=0;
Stack.cs (7) : ArrayList<T> lista = new ArrayList<T>();
Stack.cs (12) : return lista.ToString();
Stack.cs (19) : return NumElements;
Stack.cs (25) : lista.Clear();
Stack.cs (26) : NumElements = 0;
Stack.cs (31) : lista.Add(value);
Stack.cs (32) : NumElements++;
Stack.cs (37) : T value = lista.Get(NumElements - 1);
Stack.cs (38) : lista.Remove(NumElements - 1);
Stack.cs (39) : NumElements--;
Stack.cs (40) : return value;
