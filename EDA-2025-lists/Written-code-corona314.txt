IntArrayList.cs (77) : return aux;
IntArrayList.cs (84) : NumElements = 0;
IntArrayList.cs (91) : int[] newArray = new int[newSize];
IntArrayList.cs (93) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (94) : {
IntArrayList.cs (95) : newArray[i] = Get(i);
IntArrayList.cs (96) : }
IntArrayList.cs (97) : Values = newArray;
IntArrayList.cs (103) : for (int i = 0; i < NumElements; i++)
IntArrayList.cs (104) : {
IntArrayList.cs (105) : yield return Get(i);
IntArrayList.cs (106) : }
IntList.cs (3) : using System.Diagnostics.Metrics;
IntList.cs (43) : IntListNode node = First;
IntList.cs (44) : int counter = 0;
IntList.cs (45) : while (node != null)
IntList.cs (46) : {
IntList.cs (47) : counter++;
IntList.cs (48) : node = node.Next;
IntList.cs (49) : }
IntList.cs (50) : return counter;
IntList.cs (58) : IntListNode node = First;
IntList.cs (59) : int counter = 0;
IntList.cs (60) : while (node != null && counter != index)
IntList.cs (61) : {
IntList.cs (62) : counter++;
IntList.cs (63) : node = node.Next;
IntList.cs (64) : }
IntList.cs (65) : if (node == null) return 0;
IntList.cs (66) : return node.Value;
IntList.cs (74) : if (First == null)
IntList.cs (75) : {
IntList.cs (76) : IntListNode listNode = new IntListNode(value);
IntList.cs (77) : First = listNode;
IntList.cs (78) : return;
IntList.cs (79) : }
IntList.cs (80) : IntListNode node = First;
IntList.cs (81) : while (node != null)
IntList.cs (82) : {
IntList.cs (83) : if (node.Next == null)
IntList.cs (84) : {
IntList.cs (85) : IntListNode listNode = new IntListNode(value);
IntList.cs (86) : node.Next = listNode;
IntList.cs (87) : return;
IntList.cs (88) : }
IntList.cs (89) : node = node.Next;
IntList.cs (90) : }
IntList.cs (91) : return;
IntList.cs (99) : int removedValue = -1;
IntList.cs (100) : IntListNode node = First;
IntList.cs (101) : if (index == 0)
IntList.cs (102) : {
IntList.cs (103) : removedValue = node.Next.Value;
IntList.cs (104) : First = node.Next;
IntList.cs (105) : return removedValue;
IntList.cs (106) : }
IntList.cs (107) : int counter = 0;
IntList.cs (108) : while (node != null && counter != index - 1)
IntList.cs (109) : {
IntList.cs (110) : counter++;
IntList.cs (111) : node = node.Next;
IntList.cs (112) : }
IntList.cs (113) : if (counter == index - 1)
IntList.cs (114) : {
IntList.cs (115) : removedValue = node.Next.Value;
IntList.cs (116) : node.Next = node.Next.Next;
IntList.cs (117) : return removedValue;
IntList.cs (118) : }
IntList.cs (119) : return removedValue;
IntList.cs (126) : First = null;
IntList.cs (132) : IntListNode node = First;
IntList.cs (133) : while (node != null)
IntList.cs (134) : {
IntList.cs (135) : yield return node.Value;
IntList.cs (136) : node = node.Next;
IntList.cs (137) : }
ArrayList.cs (33) : return NumElements;
ArrayList.cs (40) : if(index > NumElements || index < 0)
ArrayList.cs (41) : {
ArrayList.cs (42) : return default;
ArrayList.cs (43) : }
ArrayList.cs (44) : return Values[index];
ArrayList.cs (49) : if(NumElements+1 > Values.Length)
ArrayList.cs (50) : {
ArrayList.cs (51) : Resize(Values.Length*2);
ArrayList.cs (52) : }
ArrayList.cs (53) : Values[NumElements] = value;
ArrayList.cs (54) : NumElements++;
ArrayList.cs (64) : if(index > NumElements || index < 0)
ArrayList.cs (65) : {
ArrayList.cs (66) : T ret = default;
ArrayList.cs (67) : return ret;
ArrayList.cs (68) : }
ArrayList.cs (69) : T aux = Values[index];
ArrayList.cs (70) : for(int i=index+1; i<NumElements; i++)
ArrayList.cs (71) : {
ArrayList.cs (72) : Values[i-1] = Values[i];
ArrayList.cs (73) : }
ArrayList.cs (74) : NumElements--;
ArrayList.cs (75) : return aux;
ArrayList.cs (81) : NumElements = 0;
ArrayList.cs (88) : T[] newArray = new T[newSize];
ArrayList.cs (89) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (90) : {
ArrayList.cs (91) : newArray[i] = Get(i);
ArrayList.cs (92) : }
ArrayList.cs (93) : Values = newArray;
ArrayList.cs (99) : for (int i = 0; i < NumElements; i++)
ArrayList.cs (100) : {
ArrayList.cs (101) : yield return Get(i);
ArrayList.cs (102) : }
